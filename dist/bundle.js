/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t,n,r,a,o,i={51:(e,t,n)=>{n.a(e,(async(e,r)=>{try{n.d(t,{u:()=>s});var a=n(540),o=n(976),i=n(775),l=e([i]);i=(l.then?(await l)():l)[0];const s=()=>a.createElement("div",{className:"min-h-screen bg-amber-50 flex flex-col"},a.createElement("header",{className:"py-4 px-6 bg-amber-100 shadow-sm"},a.createElement("div",{className:"flex justify-between items-center"},a.createElement("h1",{className:"text-xl font-semibold text-amber-800"},"Planty"),a.createElement(o.N_,{to:"/",className:"text-amber-800 hover:text-amber-600"},"Back to Plant"))),a.createElement("main",{className:"flex-grow p-6"},a.createElement(i.s,null)));r()}catch(e){r(e)}}))},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},61:(e,t,n)=>{n.d(t,{L:()=>a});const r=!0;function a(){if(!r)return console.log("Development mode detected - unregistering any service workers"),void("serviceWorker"in navigator&&navigator.serviceWorker.ready.then((e=>{e.unregister()})).catch((e=>{console.error("Error unregistering service worker:",e)})));if("serviceWorker"in navigator){const e=()=>{navigator.serviceWorker.register("/service-worker.js").then((e=>{e.addEventListener("updatefound",(()=>{const t=e.installing;t&&t.addEventListener("statechange",(()=>{"installed"===t.state&&(navigator.serviceWorker.controller?console.log("New content is available. Please refresh the page."):console.log("Content is cached for offline use."))}))}))})).catch((e=>{console.error("Error during service worker registration:",e)}))};"complete"===document.readyState?e():(window.addEventListener("load",(()=>{e()})),setTimeout((()=>{navigator.serviceWorker.controller||e()}),3e3))}else console.warn("Service workers are not supported in this browser.")}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],l=0;l<e.length;l++){var s=e[l],c=r.base?s[0]+r.base:s[0],u=o[c]||0,d="".concat(c," ").concat(u);o[c]=u+1;var f=n(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=a(p,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=n(o[i]);t[l].references--}for(var s=r(e,a),c=0;c<o.length;c++){var u=n(o[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=s}}},78:(e,t,n)=>{n.a(e,(async(e,r)=>{try{n.d(t,{OH:()=>h,sW:()=>p});var a=n(690),o=e([a]);a=(o.then?(await o)():o)[0];var i={661:e=>{e.exports=function(){throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object")}}},l={};function A(e){var t=l[e];if(void 0!==t)return t.exports;var n=l[e]={exports:{}};return i[e](n,n.exports,A),n.exports}A.d=(e,t)=>{for(var n in t)A.o(t,n)&&!A.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},A.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),A.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};A.d(s,{x5:()=>he,a5:()=>pe,eI:()=>re,QV:()=>me,sM:()=>ve,OZ:()=>fe,CB:()=>xe,sW:()=>ue,hL:()=>oe,gW:()=>ye,FI:()=>c,Xq:()=>ge,Al:()=>d,Pz:()=>Se,ly:()=>ke,U8:()=>de,D2:()=>ae,yl:()=>we,BV:()=>u,nM:()=>Ee,c5:()=>ie,IG:()=>f,OH:()=>ce});var c={};A.r(c),A.d(c,{WebSocketManager:()=>X});var u={};A.r(u),A.d(u,{MessageProtocol:()=>J,MessageRouter:()=>Z});var d={};A.r(d),A.d(d,{DocumentManager:()=>te});var f={};A.r(f),A.d(f,{Storage:()=>ne});const b=10,y=(e=0)=>t=>`[${t+e}m`,_=(e=0)=>t=>`[${38+e};5;${t}m`,w=(e=0)=>(t,n,r)=>`[${38+e};2;${t};${n};${r}m`,v={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],overline:[53,55],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],gray:[90,39],grey:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgGray:[100,49],bgGrey:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};Object.keys(v.modifier),Object.keys(v.color),Object.keys(v.bgColor);function E(){const e=new Map;for(const[t,n]of Object.entries(v)){for(const[t,r]of Object.entries(n))v[t]={open:`[${r[0]}m`,close:`[${r[1]}m`},n[t]=v[t],e.set(r[0],r[1]);Object.defineProperty(v,t,{value:n,enumerable:!1})}return Object.defineProperty(v,"codes",{value:e,enumerable:!1}),v.color.close="[39m",v.bgColor.close="[49m",v.color.ansi=y(),v.color.ansi256=_(),v.color.ansi16m=w(),v.bgColor.ansi=y(b),v.bgColor.ansi256=_(b),v.bgColor.ansi16m=w(b),Object.defineProperties(v,{rgbToAnsi256:{value:(e,t,n)=>e===t&&t===n?e<8?16:e>248?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(t/255*5)+Math.round(n/255*5),enumerable:!1},hexToRgb:{value(e){const t=/[a-f\d]{6}|[a-f\d]{3}/i.exec(e.toString(16));if(!t)return[0,0,0];let[n]=t;3===n.length&&(n=[...n].map((e=>e+e)).join(""));const r=Number.parseInt(n,16);return[r>>16&255,r>>8&255,255&r]},enumerable:!1},hexToAnsi256:{value:e=>v.rgbToAnsi256(...v.hexToRgb(e)),enumerable:!1},ansi256ToAnsi:{value(e){if(e<8)return 30+e;if(e<16)return e-8+90;let t,n,r;if(e>=232)t=(10*(e-232)+8)/255,n=t,r=t;else{const a=(e-=16)%36;t=Math.floor(e/36)/5,n=Math.floor(a/6)/5,r=a%6/5}const a=2*Math.max(t,n,r);if(0===a)return 30;let o=30+(Math.round(r)<<2|Math.round(n)<<1|Math.round(t));return 2===a&&(o+=60),o},enumerable:!1},rgbToAnsi:{value:(e,t,n)=>v.ansi256ToAnsi(v.rgbToAnsi256(e,t,n)),enumerable:!1},hexToAnsi:{value:e=>v.ansi256ToAnsi(v.hexToAnsi256(e)),enumerable:!1}}),v}const k=E(),S=(()=>{if(!("navigator"in globalThis))return 0;if(globalThis.navigator.userAgentData){const e=navigator.userAgentData.brands.find((({brand:e})=>"Chromium"===e));if(e&&e.version>93)return 3}return/\b(Chrome|Chromium)\//.test(globalThis.navigator.userAgent)?1:0})(),x=0!==S&&{level:S,hasBasic:!0,has256:S>=2,has16m:S>=3},C={stdout:x,stderr:x};function B(e,t,n){let r=e.indexOf(t);if(-1===r)return e;const a=t.length;let o=0,i="";do{i+=e.slice(o,r)+t+n,o=r+a,r=e.indexOf(t,o)}while(-1!==r);return i+=e.slice(o),i}function O(e,t,n,r){let a=0,o="";do{const i="\r"===e[r-1];o+=e.slice(a,i?r-1:r)+t+(i?"\r\n":"\n")+n,a=r+1,r=e.indexOf("\n",a)}while(-1!==r);return o+=e.slice(a),o}const{stdout:N,stderr:P}=C,z=Symbol("GENERATOR"),R=Symbol("STYLER"),T=Symbol("IS_EMPTY"),M=["ansi","ansi","ansi256","ansi16m"],D=Object.create(null),L=(e,t={})=>{if(t.level&&!(Number.isInteger(t.level)&&t.level>=0&&t.level<=3))throw new Error("The `level` option should be an integer from 0 to 3");const n=N?N.level:0;e.level=void 0===t.level?n:t.level},I=e=>{const t=(...e)=>e.join(" ");return L(t,e),Object.setPrototypeOf(t,j.prototype),t};function j(e){return I(e)}Object.setPrototypeOf(j.prototype,Function.prototype);for(const[Ce,Be]of Object.entries(k))D[Ce]={get(){const e=W(this,H(Be.open,Be.close,this[R]),this[T]);return Object.defineProperty(this,Ce,{value:e}),e}};D.visible={get(){const e=W(this,this[R],!0);return Object.defineProperty(this,"visible",{value:e}),e}};const F=(e,t,n,...r)=>"rgb"===e?"ansi16m"===t?k[n].ansi16m(...r):"ansi256"===t?k[n].ansi256(k.rgbToAnsi256(...r)):k[n].ansi(k.rgbToAnsi(...r)):"hex"===e?F("rgb",t,n,...k.hexToRgb(...r)):k[n][e](...r),U=["rgb","hex","ansi256"];for(const Oe of U)D[Oe]={get(){const{level:e}=this;return function(...t){const n=H(F(Oe,M[e],"color",...t),k.color.close,this[R]);return W(this,n,this[T])}}},D["bg"+Oe[0].toUpperCase()+Oe.slice(1)]={get(){const{level:e}=this;return function(...t){const n=H(F(Oe,M[e],"bgColor",...t),k.bgColor.close,this[R]);return W(this,n,this[T])}}};const $=Object.defineProperties((()=>{}),{...D,level:{enumerable:!0,get(){return this[z].level},set(e){this[z].level=e}}}),H=(e,t,n)=>{let r,a;return void 0===n?(r=e,a=t):(r=n.openAll+e,a=t+n.closeAll),{open:e,close:t,openAll:r,closeAll:a,parent:n}},W=(e,t,n)=>{const r=(...e)=>V(r,1===e.length?""+e[0]:e.join(" "));return Object.setPrototypeOf(r,$),r[z]=e,r[R]=t,r[T]=n,r},V=(e,t)=>{if(e.level<=0||!t)return e[T]?"":t;let n=e[R];if(void 0===n)return t;const{openAll:r,closeAll:a}=n;if(t.includes(""))for(;void 0!==n;)t=B(t,n.close,n.open),n=n.parent;const o=t.indexOf("\n");return-1!==o&&(t=O(t,a,r,o)),r+t+a};Object.defineProperties(j.prototype,D);const q=j(),Q=(j({level:P?P.level:0}),q);class G{constructor(){this.logLevel="debug"}static getInstance(){return G.instance||(G.instance=new G),G.instance}setLogLevel(e){this.logLevel=e}getTimestamp(){return(new Date).toISOString()}shouldLog(e){const t=["debug","info","warn","error"];return t.indexOf(e)>=t.indexOf(this.logLevel)}debug(e,...t){this.shouldLog("debug")&&console.log(Q.gray(`[${this.getTimestamp()}] DEBUG:`),e,...t)}info(e,...t){this.shouldLog("info")&&console.log(Q.blue(`[${this.getTimestamp()}] INFO:`),e,...t)}warn(e,...t){this.shouldLog("warn")&&console.log(Q.yellow(`[${this.getTimestamp()}] WARN:`),e,...t)}error(e,...t){if(this.shouldLog("error")){const n=e instanceof Error?e.stack||e.message:e;console.error(Q.red(`[${this.getTimestamp()}] ERROR:`),n,...t)}}formatObject(e){return e instanceof Uint8Array?`Uint8Array(${e.length})`:e}debugWithContext(e,t,...n){if(this.shouldLog("debug")){const r=n.map((e=>this.formatObject(e)));console.log(Q.gray(`[${this.getTimestamp()}] DEBUG [${e}]:`),t,...r)}}}const Y=G.getInstance(),K="undefined"!=typeof window&&window.WebSocket?window.WebSocket:A(661);class X{constructor(e,t,n,r){this.ws=null,this.isOnline=!1,this.reconnectInterval=null,this.reconnectAttempts=0,this.maxReconnectDelay=3e4,this.onStatusChange=()=>{},this.offlineQueue=[],this.url=e.url,this.reconnectDelay=e.reconnectDelay||1e3,this.onMessage=t,this.onError=n,this.connectionResolve=()=>{},r&&(this.onStatusChange=r)}async connect(){return this.connectWebSocket(this.url),Promise.resolve()}connectWebSocket(e){try{this.ws=new K(e),this.ws.onopen=()=>{Y.debug("WebSocket connected"),this.setOnlineStatus(!0),this.connectionResolve(),this.reconnectAttempts=0,this.processPendingMessages()},this.ws.onmessage=async e=>{try{if(e.data instanceof Blob){const t=await e.data.arrayBuffer(),n=new Uint8Array(t);this.onMessage(n)}else{const t=JSON.parse(e.data);this.onMessage(t)}}catch(e){Y.error("WebSocket message error:",e),this.onError(e)}},this.ws.onerror=e=>{Y.error("WebSocket error:",e),this.setOnlineStatus(!1),this.onError(e)},this.ws.onclose=()=>{this.isOnline&&(Y.info("WebSocket closed, going to offline mode"),this.setOnlineStatus(!1));const e=Math.min(this.reconnectDelay*Math.pow(1.5,this.reconnectAttempts),this.maxReconnectDelay);this.reconnectAttempts++,this.scheduleReconnection(e)}}catch(e){Y.warn("Failed to create WebSocket:",e),this.setOnlineStatus(!1),this.scheduleReconnection(this.reconnectDelay)}}scheduleReconnection(e){this.reconnectInterval&&clearTimeout(this.reconnectInterval),Y.debug(`Scheduling reconnection attempt in ${e}ms`),this.reconnectInterval=setTimeout((()=>{Y.debug("Attempting to reconnect to WebSocket..."),this.connectWebSocket(this.url)}),e)}setOnlineStatus(e){this.isOnline!==e&&(this.isOnline=e,Y.info("Connection status changed to: "+(e?"online":"offline")),this.onStatusChange(e))}async processPendingMessages(){if(this.offlineQueue.length>0){Y.info(`Processing ${this.offlineQueue.length} queued messages`);const e=[...this.offlineQueue];this.offlineQueue=[];for(const t of e)await this.send(t);Y.info("Finished processing queued messages")}}async send(e){if(!this.isOnline)return Y.debug("Currently offline, queueing message for later"),void this.offlineQueue.push(e);try{if(!this.ws||this.ws.readyState!==K.OPEN)return Y.warn("WebSocket not connected, queueing message"),void this.offlineQueue.push(e);e instanceof Uint8Array?this.ws.send(e):this.ws.send(JSON.stringify(e))}catch(t){Y.error("Error sending message:",t),this.offlineQueue.push(e),this.setOnlineStatus(!1)}}close(){this.reconnectInterval&&(clearTimeout(this.reconnectInterval),this.reconnectInterval=null),this.ws&&(this.ws.onclose=null,this.ws.close(),this.ws=null),this.setOnlineStatus(!1)}}class Z{constructor(e="MessageRouter"){this.messageHandlers=new Map,this.syncCallbacks=[],this.name=e}registerSyncCallback(e){this.syncCallbacks.push(e)}unregisterSyncCallback(e){const t=this.syncCallbacks.indexOf(e);t>=0&&this.syncCallbacks.splice(t,1)}registerMessageHandler(e,t){this.messageHandlers.set(e,t)}unregisterMessageHandler(e){this.messageHandlers.delete(e)}async handleMessage(e){e instanceof Uint8Array?await this.handleBinaryMessage(e):e.type?await this.routeCustomMessage(e):e.docId&&e.changes?await this.routeSyncMessage(e):Y.debugWithContext(this.name,"Received message without type or changes:",e)}async handleBinaryMessage(e){try{const t=(new TextDecoder).decode(e),n=JSON.parse(t);await this.handleMessage(n)}catch(t){const n=this.messageHandlers.get("binary");n?await n({data:e}):Y.debugWithContext(this.name,"Received binary message without handler")}}async routeCustomMessage(e){const t=this.messageHandlers.get(e.type);t?await t(e):Y.debugWithContext(this.name,`Received message type: ${e.type}`)}async routeSyncMessage(e){Y.debugWithContext(this.name,`Received changes for ${e.docId}:`,e.changes),this.notifySyncCallbacks(e.docId);const t=this.messageHandlers.get("sync");t&&await t(e)}notifySyncCallbacks(e){for(const t of this.syncCallbacks)try{t(e)}catch(e){Y.error("Error in sync callback:",e)}}clear(){this.syncCallbacks=[],this.messageHandlers.clear()}}class J{static createClientJoinedMessage(e){return{type:"client_joined",clientId:e,timestamp:Date.now()}}static createSyncMessage(e,t){return{docId:e,changes:Array.from(t)}}}const ee=(g={change:()=>a.Zg,clone:()=>a.o8,from:()=>a.HT,generateSyncMessage:()=>a.AX,init:()=>a.Ts,initSyncState:()=>a.Ze,load:()=>a.Hh,receiveSyncMessage:()=>a.UB,save:()=>a.UN,toJS:()=>a.HO},m={},A.d(m,g),m);class te{constructor(e,t="DocumentManager"){this.storage=e,this.documents=new Map,this.syncStates=new Map,this.documentLocks=new Map,this.name=t}async withDocumentLock(e,t){const n=this.documentLocks.get(e);let r;n&&await n;const a=new Promise((e=>{r=e}));this.documentLocks.set(e,a);try{return await t()}finally{r(),this.documentLocks.delete(e)}}async loadDocument(e){let t=this.documents.get(e);if(t)return ee.clone(t);const n=await this.storage.getDocument(e);return n?(t=ee.load(n),this.documents.set(e,t),ee.clone(t)):null}async createDocument(e,t={}){const n=ee.init(),r=ee.change(n,(e=>{Object.assign(e,t)}));this.documents.set(e,r),await this.storage.saveDocument(e,ee.save(r))}async getDocument(e){return await this.loadDocument(e)||null}async updateDocument(e,t){await this.withDocumentLock(e,(async()=>{const n=await this.loadDocument(e);if(!n)throw new Error("Document not found");try{const r=ee.change(n,t);this.documents.set(e,r),await this.storage.saveDocument(e,ee.save(r)),Y.debugWithContext(this.name,`Document updated: ${e}`)}catch(t){throw Y.error(`Error updating document ${e}:`,t),t}}))}async handleIncomingChanges(e,t){Y.debugWithContext(this.name,`Loading document again of id ${e}`);let n=await this.loadDocument(e);n||(Y.debugWithContext(this.name,`Initializing a new document of id ${e}`),n=ee.init(),this.documents.set(e,n)),n=ee.clone(n);const r=this.syncStates.get(e)||ee.initSyncState();try{Y.debugWithContext(this.name,"Receiving sync message for:",{docId:e,docContent:n});const[a,o,i]=ee.receiveSyncMessage(n,r,new Uint8Array(t));return Y.debugWithContext(this.name,"After receiving sync message:",{docId:e,newDocContent:a}),this.documents.set(e,a),this.syncStates.set(e,o),await this.storage.saveDocument(e,ee.save(a)),i?(Y.debugWithContext(this.name,`Received patch for ${e}:`,i),{patch:i,didChange:!0}):{patch:null,didChange:!1}}catch(t){throw Y.error(`Error handling changes for ${e}:`,t),t}}async generateSyncMessage(e){const t=this.documents.get(e);if(!t)return Y.warn(`No document found for id: ${e}`),null;const n=this.syncStates.get(e)||ee.initSyncState(),[r,a]=ee.generateSyncMessage(t,n);return a?(Y.debugWithContext(this.name,`Generated sync message for ${e}:`,{messageLength:a.length,docContent:t}),this.syncStates.set(e,r),a):null}getAllDocumentIds(){return Array.from(this.documents.keys())}clear(){this.documents.clear(),this.syncStates.clear(),this.documentLocks.clear()}}class ne{constructor(e="sync-engine-store"){this.db=null,this.dbInitPromise=null,this.DOCS_STORE="documents",this.BLOBS_STORE="blobs",this.DB_NAME=e}async init(){return this.dbInitPromise||(this.dbInitPromise=new Promise(((e,t)=>{const n=indexedDB.open(this.DB_NAME,1);n.onerror=()=>{console.error("Failed to open database:",n.error),t(n.error)},n.onsuccess=()=>{this.db=n.result,e()},n.onupgradeneeded=()=>{const e=n.result;e.objectStoreNames.contains(this.DOCS_STORE)||e.createObjectStore(this.DOCS_STORE),e.objectStoreNames.contains(this.BLOBS_STORE)||e.createObjectStore(this.BLOBS_STORE)}}))),this.dbInitPromise}async ensureDB(){if(!this.db&&(await this.init(),!this.db))throw new Error("Database failed to initialize");return this.db}async saveDocument(e,t){const n=await this.ensureDB();return new Promise(((r,a)=>{const o=n.transaction(this.DOCS_STORE,"readwrite").objectStore(this.DOCS_STORE).put(t,e);o.onerror=()=>a(o.error),o.onsuccess=()=>r()}))}async saveBlob(e,t){const n=await this.ensureDB();return new Promise(((r,a)=>{const o=n.transaction(this.BLOBS_STORE,"readwrite").objectStore(this.BLOBS_STORE).put(t,e);o.onerror=()=>a(o.error),o.onsuccess=()=>r()}))}async getDocument(e){const t=await this.ensureDB();return new Promise(((n,r)=>{const a=t.transaction(this.DOCS_STORE,"readwrite").objectStore(this.DOCS_STORE).get(e);a.onerror=()=>r(a.error),a.onsuccess=()=>n(a.result)}))}async getBlob(e){const t=await this.ensureDB();return new Promise(((n,r)=>{const a=t.transaction(this.BLOBS_STORE,"readwrite").objectStore(this.BLOBS_STORE).get(e);a.onerror=()=>r(a.error),a.onsuccess=()=>n(a.result)}))}}class re{static getInstance(){return re.instance?re.instance:(Y.warn("SyncEngine not created yet"),null)}static async configureInstance(e){return re.instance?Y.warn("SyncEngine instance already exists. Ignoring new options."):(re.instance=new re(e),await re.instance.init(),Y.info("SyncEngine created successfully")),re.instance}static resetInstance(){re.instance&&(re.instance=null)}constructor(e={}){this.options=e,this.initialized=!1,this.isOnline=!1,this.pendingDocUpdates=new Set,this.clientId=crypto.randomUUID?crypto.randomUUID():Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15),this.storage=new ne(e.dbName),this.documentManager=new te(this.storage,e.name),this.messageRouter=new Z(e.name),this.connection=new X({url:e.url||"ws://localhost:4080/sync"},this.handleMessage.bind(this),this.handleError.bind(this),this.handleConnectionStatusChange.bind(this)),this.messageRouter.registerMessageHandler("client_joined",this.handleClientJoined.bind(this)),this.messageRouter.registerMessageHandler("sync",this.handleSyncMessage.bind(this))}async init(){if(!this.initialized)try{await this.storage.init(),await this.connection.connect(),this.initialized=!0,this.isOnline&&await this.announcePresence()}catch(e){Y.error("Failed to initialize SyncEngine:",e),this.initialized=!0}}handleConnectionStatusChange(e){const t=this.isOnline;this.isOnline=e,Y.info("SyncEngine connection status changed to: "+(e?"online":"offline")),!t&&e&&this.handleReconnection().catch((e=>{Y.error("Error handling reconnection:",e)}))}async handleReconnection(){try{await this.announcePresence(),await this.syncPendingUpdates()}catch(e){Y.error("Error during reconnection:",e),this.options.onError?.(e)}}async syncPendingUpdates(){if(this.pendingDocUpdates.size>0){Y.info(`Syncing ${this.pendingDocUpdates.size} documents updated while offline`);const e=[...this.pendingDocUpdates];this.pendingDocUpdates.clear();for(const t of e)await this.sendChanges(t)}}async handleMessage(e){await this.messageRouter.handleMessage(e)}handleError(e){Y.error("SyncEngine error:",e),this.options.onError?.(e)}async announcePresence(){this.isOnline&&await this.connection.send(J.createClientJoinedMessage(this.clientId))}async handleClientJoined(e){if(Y.debugWithContext(this.options.name||"SyncEngine",`Client joined: ${e.clientId}`),e.clientId!==this.clientId){const e=500*Math.random();await new Promise((t=>setTimeout(t,e)));for(const e of this.documentManager.getAllDocumentIds())await this.sendChanges(e)}}async handleSyncMessage(e){try{const{docId:t,changes:n}=e,r=await this.documentManager.handleIncomingChanges(t,n);this.options.onSync&&this.options.onSync(t),r.didChange&&await this.sendChanges(t)}catch(e){this.handleError(e)}}async sendChanges(e){const t=await this.documentManager.generateSyncMessage(e);t&&(await this.connection.send(J.createSyncMessage(e,t)),this.isOnline||this.pendingDocUpdates.add(e))}registerSyncCallback(e){this.messageRouter.registerSyncCallback(e)}unregisterSyncCallback(e){this.messageRouter.unregisterSyncCallback(e)}registerMessageHandler(e,t){this.messageRouter.registerMessageHandler(e,t)}unregisterMessageHandler(e){this.messageRouter.unregisterMessageHandler(e)}async sendMessage(e){await this.connection.send(e)}async createDocument(e,t={}){if(!this.initialized)throw new Error("SyncEngine not initialized");await this.documentManager.createDocument(e,t),await this.sendChanges(e)}async getDocument(e){return this.documentManager.getDocument(e)}async updateDocument(e,t){if(!this.initialized)throw new Error("SyncEngine not initialized");await this.documentManager.updateDocument(e,t),this.isOnline||this.pendingDocUpdates.add(e),await this.sendChanges(e)}isConnected(){return this.isOnline}isInitialized(){return this.initialized}close(){this.initialized=!1,this.connection.close(),this.messageRouter.clear(),this.documentManager.clear(),re.instance=null}}re.instance=null;const ae=()=>re.getInstance(),oe=e=>re.configureInstance(e),ie=()=>re.resetInstance(),le=(e,t)=>{const n=e.getState();JSON.stringify(se(n))!==JSON.stringify(se(t))&&e.setState((e=>{const n={...e};return Object.keys(t).forEach((e=>{e in t&&(n[e]=t[e])})),n}))};function se(e){if(!e||"object"!=typeof e)return e;const t=Array.isArray(e)?[]:{};for(const n in e){const r=e[n];"function"!=typeof r&&(t[n]=r&&"object"==typeof r?se(r):r)}return t}const ce=(e,t)=>(n,r,a)=>{let o=null,i=!1;const l=e(((e,a)=>{n(e,a);const o=ae();if(!o||!i)return;const l=r();try{const e=se(l);o.updateDocument(t.docId,(t=>{Object.assign(t,e)})).catch((e=>{Y.warn(`Error updating document ${t.docId}:`,e)}))}catch(e){Y.warn(`Error preparing update for document ${t.docId}:`,e)}}),r,a),s=e=>{if(e)try{o=e;const t=ee.toJS(e);Y.debugWithContext("sync-middleware","Received doc change, updating Zustand store:",t),le(a,t)}catch(e){Y.error(`Error handling document change for ${t.docId}:`,e)}};function c(){if(i)return;const e=ae();e?e.getDocument(t.docId).then((n=>{if(!n){const n=r(),a=ee.change(ee.init(),(e=>{Object.assign(e,se(n))}));return o=a,e.createDocument(t.docId,ee.toJS(a))}o=n,s(n)})).then((()=>{const n=e.options.onSync;e.options.onSync=async r=>{if(r===t.docId)try{const n=await e.getDocument(t.docId);n&&s(n)}catch(e){Y.error(`Error in sync callback for ${t.docId}:`,e)}n&&n(r)},i=!0})).catch((e=>{Y.error(`Failed to initialize document ${t.docId}:`,e),t.onInitError&&t.onInitError(e instanceof Error?e:new Error(String(e)))})):Y.warn(`Cannot initialize sync for ${t.docId}: sync engine not available`)}const u=t.initTimeout??3e4;let d=null,f=Date.now();if("undefined"!=typeof window&&!window.__SYNC_ENGINE_REGISTRY__){window.__SYNC_ENGINE_REGISTRY__={callbacks:[],notifyCallbacks:function(){const e=ae();e&&(this.callbacks.forEach((t=>t(e))),this.callbacks=[])}};const e=setInterval((()=>{ae()&&window.__SYNC_ENGINE_REGISTRY__&&(window.__SYNC_ENGINE_REGISTRY__.notifyCallbacks(),clearInterval(e))}),100)}const p=()=>{if(Date.now()-f>u){d&&(clearTimeout(d),d=null);const e=new Error(`Sync initialization timed out after ${u}ms for document ${t.docId}`);return Y.error(e.message),void(t.onInitError&&t.onInitError(e))}const e=ae();e&&!i?(Y.debug(`Sync engine available, initializing store for ${t.docId}`),c(),d&&(clearTimeout(d),d=null)):e||("undefined"!=typeof window&&window.__SYNC_ENGINE_REGISTRY__?(window.__SYNC_ENGINE_REGISTRY__.callbacks.push((()=>{i||(Y.debug(`Sync engine became available, initializing store for ${t.docId}`),c())})),d=setTimeout(p,1e3)):d=setTimeout(p,100))};return p(),{...l}};function ue(e){ae()||oe(e)}async function de(){const e=ae();return e?(e.isInitialized()||await e.init(),e):(Y.warn("Sync engine not created yet"),null)}function fe(){const e=ae();e&&e.close()}class pe{constructor(e={}){this.db=null,this.dbInitPromise=null,this.dbName=e.dbName||"sync-engine-store",this.storeName=e.storeName||"file-blobs"}async init(){if(!this.db)return this.dbInitPromise||(this.dbInitPromise=new Promise(((e,t)=>{const n=indexedDB.open(this.dbName,1);n.onerror=()=>{console.error("Failed to open database:",n.error),t(new Error("Failed to open database"))},n.onsuccess=()=>{if(this.db=n.result,this.db.objectStoreNames.contains(this.storeName))e();else{this.db.close();const n=this.db.version+1,r=indexedDB.open(this.dbName,n);r.onupgradeneeded=()=>{const e=r.result;e.objectStoreNames.contains(this.storeName)||e.createObjectStore(this.storeName)},r.onsuccess=()=>{this.db=r.result,e()},r.onerror=()=>{console.error("Failed to upgrade database:",r.error),t(new Error("Failed to upgrade database"))}}},n.onupgradeneeded=e=>{const t=n.result;0!==e.oldVersion||t.objectStoreNames.contains(this.storeName)||t.createObjectStore(this.storeName)}}))),this.dbInitPromise}async computeHash(e){const t=await e.arrayBuffer();if("undefined"!=typeof crypto&&crypto.subtle){const e=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(e)).map((e=>e.toString(16).padStart(2,"0"))).join("")}return console.warn("Web Crypto API not available, using fallback hash method"),this.fallbackHash(t)}fallbackHash(e){const t=new Uint8Array(e);let n=0;for(let e=0;e<t.length;e++)n=(n<<5)-n+t[e],n|=0;const r=Date.now().toString(16);return(n>>>0).toString(16).padStart(8,"0")+r}async addFile(e){await this.init();const t=await this.computeHash(e);return await this.storeBlob(t,e),{hash:t,name:e.name,type:e.type,size:e.size,lastModified:e.lastModified}}async storeBlob(e,t){if(!this.db)throw new Error("Database not initialized");return new Promise(((n,r)=>{const a=this.db.transaction(this.storeName,"readwrite"),o=a.objectStore(this.storeName).put(t,e);o.onsuccess=()=>n(),o.onerror=()=>r(new Error("Failed to store blob")),a.oncomplete=()=>n(),a.onerror=()=>r(new Error("Transaction failed"))}))}async getBlob(e){if(await this.init(),!this.db)throw new Error("Database not initialized");return new Promise(((t,n)=>{const r=this.db.transaction(this.storeName,"readonly").objectStore(this.storeName).get(e);r.onsuccess=()=>t(r.result||null),r.onerror=()=>n(new Error("Failed to retrieve blob"))}))}async hasBlob(e){return null!==await this.getBlob(e)}async deleteBlob(e){if(await this.init(),!this.db)throw new Error("Database not initialized");return new Promise(((t,n)=>{const r=this.db.transaction(this.storeName,"readwrite"),a=r.objectStore(this.storeName).delete(e);a.onsuccess=()=>t(),a.onerror=()=>n(new Error("Failed to delete blob")),r.oncomplete=()=>t(),r.onerror=()=>n(new Error("Transaction failed"))}))}async createBlobUrl(e){const t=await this.getBlob(e);if(!t)throw new Error(`Blob with hash ${e} not found`);return URL.createObjectURL(t)}revokeBlobUrl(e){URL.revokeObjectURL(e)}async exportFile(e){const t=await this.getBlob(e.hash);if(!t)throw new Error(`Blob with hash ${e.hash} not found`);if("showSaveFilePicker"in window)try{const n=window.showSaveFilePicker,r=await n({suggestedName:e.name,types:[{description:"File",accept:{[e.type]:[`.${e.name.split(".").pop()}`]}}]}),a=await r.createWritable();await a.write(t),await a.close()}catch(e){const t=e;if("AbortError"!==t.name)throw new Error(`Failed to export file: ${t.message||"Unknown error"}`)}else{const n=URL.createObjectURL(t),r=document.createElement("a");r.href=n,r.download=e.name,r.click(),URL.revokeObjectURL(n)}}async importFile(){if(!("showOpenFilePicker"in window))return new Promise(((e,t)=>{const n=document.createElement("input");n.type="file",n.onchange=async()=>{const r=n.files?.[0];if(r)try{const t=await this.addFile(r);e(t)}catch(e){t(e)}else e(null)},n.click()}));try{const e=window.showOpenFilePicker,[t]=await e(),n=await t.getFile();return this.addFile(n)}catch(e){const t=e;if("AbortError"!==t.name)throw new Error(`Failed to import file: ${t.message||"Unknown error"}`);return null}}close(){this.db&&(this.db.close(),this.db=null)}}class he extends pe{updateAutomergeDoc(e,t){return ee.change(e,`Add file: ${t.name}`,(e=>{e.files||(e.files=[]);const n=e.files.findIndex((e=>e.hash===t.hash));n>=0?e.files[n]=t:e.files.push(t)}))}removeFileFromAutomergeDoc(e,t){return ee.change(e,`Remove file with hash: ${t}`,(e=>{if(!e.files)return;const n=e.files.findIndex((e=>e.hash===t));n>=0&&e.files.splice(n,1)}))}async getMissingBlobs(e){if(!e.files||0===e.files.length)return[];const t=[];for(const n of e.files)await this.hasBlob(n.hash)||t.push(n.hash);return t}}async function ge(){return ee.from({files:[]})}class me extends he{constructor(e,t="files",n={}){super({dbName:n.dbName||"sync-engine-store",storeName:n.storeName||"file-blobs"}),this.initialized=!1,this.syncCallback=null,this.blobRequestHandlers=new Map,this.syncEngine=e,this.docId=t}async init(){this.initialized||(await super.init(),await this.syncEngine.getDocument(this.docId)||(Y.debugWithContext("SyncedFileManager",`Creating new file document with ID: ${this.docId}`),await this.syncEngine.createDocument(this.docId,{files:[]})),this.syncCallback=e=>{e===this.docId&&this.handleDocumentSync().catch((e=>{Y.error("Error handling document sync:",e)}))},this.syncEngine.registerMessageHandler("blob_request",(async e=>{await this.handleBlobRequest(e.hash)})),this.syncEngine.registerMessageHandler("blob_response",(async e=>{await this.handleBlobResponse(e.hash,e.blob)})),this.syncEngine.registerSyncCallback(this.syncCallback),this.initialized=!0,await this.checkForMissingBlobs())}async handleDocumentSync(){await this.checkForMissingBlobs()}async checkForMissingBlobs(){const e=await this.syncEngine.getDocument(this.docId);if(!e||!e.files)return;const t=await this.getMissingBlobs(e);for(const e of t)await this.requestBlob(e)}async requestBlob(e){Y.debugWithContext("SyncedFileManager",`Requesting blob with hash: ${e}`);const t=new Promise(((t,n)=>{const r=setTimeout((()=>{this.blobRequestHandlers.delete(e),n(new Error(`Timeout waiting for blob: ${e}`))}),3e4);this.blobRequestHandlers.set(e,(async()=>{clearTimeout(r),this.blobRequestHandlers.delete(e),t()}))}));this.syncEngine.sendMessage({type:"blob_request",hash:e});try{await t,Y.debugWithContext("SyncedFileManager",`Successfully received blob with hash: ${e}`)}catch(t){Y.error(`Failed to receive blob with hash: ${e}`,t),this.blobRequestHandlers.delete(e)}}async handleBlobRequest(e){if(!await this.hasBlob(e))return;const t=await this.getBlob(e);if(!t)return;const n=await t.arrayBuffer(),r=this.arrayBufferToBase64(n);this.syncEngine.sendMessage({type:"blob_response",hash:e,blob:{data:r,type:t.type}})}async handleBlobResponse(e,t){const n=this.base64ToArrayBuffer(t.data),r=new Blob([n],{type:t.type});await this.storeBlob(e,r);const a=this.blobRequestHandlers.get(e);a&&await a(e)}async addFile(e){this.initialized||await this.init();const t=await super.addFile(e);return await this.syncEngine.updateDocument(this.docId,(e=>{e.files||(e.files=[]);const n=e.files.findIndex((e=>e.hash===t.hash));n>=0?e.files[n]=t:e.files.push(t)})),t}async removeFile(e){this.initialized||await this.init(),await super.deleteBlob(e),await this.syncEngine.updateDocument(this.docId,(t=>{if(!t.files)return;const n=t.files.findIndex((t=>t.hash===e));n>=0&&t.files.splice(n,1)}))}async getAllFiles(){this.initialized||await this.init();const e=await this.syncEngine.getDocument(this.docId);return e&&e.files?e.files:[]}async syncMissingBlobs(e){this.initialized||await this.init();const t=await this.syncEngine.getDocument(this.docId);if(!t||!t.files)return[];const n=await this.getMissingBlobs(t),r=[];for(const t of n){const n=await e.getBlob(t);n&&(await this.storeBlob(t,n),r.push(t))}return r}base64ToArrayBuffer(e){const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;e++)n[e]=t.charCodeAt(e);return n.buffer}arrayBufferToBase64(e){const t=new Uint8Array(e);let n="";for(let e=0;e<t.length;e+=1024){const r=t.slice(e,Math.min(e+1024,t.length));n+=String.fromCharCode.apply(null,Array.from(r))}return btoa(n)}close(){this.syncCallback&&(this.syncEngine.unregisterSyncCallback(this.syncCallback),this.syncCallback=null),this.syncEngine.unregisterMessageHandler("blob_request"),this.syncEngine.unregisterMessageHandler("blob_response"),this.blobRequestHandlers.clear(),super.close(),this.initialized=!1}}let Ae=null,be=null;function ye(e={}){Ae||(be=_e(e))}async function _e(e={}){const t=await de();return t?(Ae=new me(t,e.docId||"files",{dbName:e.dbName||"sync-engine-store",storeName:e.storeName||"file-blobs"}),await Ae.init(),Ae):(Y.warn("Sync engine not created yet"),null)}async function we(){return be||(be=_e()),be}async function ve(e){const t=await we();return t?t.addFile(e):null}async function Ee(e){const t=await we();if(t)return t.removeFile(e)}async function ke(e){const t=await we();return t?t.getBlob(e):null}async function Se(){const e=await we();return e?e.getAllFiles():null}function xe(){Ae=null,be=null}var p=s.sW,h=s.OH;r()}catch(Ne){r(Ne)}var g,m}))},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},120:(e,t,n)=>{n.a(e,(async(e,r)=>{try{n.d(t,{d:()=>s});var a=n(540),o=n(976),i=n(941),l=e([i]);i=(l.then?(await l)():l)[0];const s=()=>a.createElement("div",{className:"min-h-screen bg-amber-50 flex flex-col"},a.createElement("header",{className:"py-4 px-6 bg-amber-100 shadow-sm"},a.createElement("div",{className:"flex justify-between items-center"},a.createElement("h1",{className:"text-xl font-semibold text-amber-800"},"Planty"),a.createElement(o.N_,{to:"/history",className:"text-amber-800 hover:text-amber-600"},"History"))),a.createElement("main",{className:"flex-grow flex items-center justify-center p-6"},a.createElement(i.e,null)));r()}catch(e){r(e)}}))},159:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},170:(e,t,n)=>{n.d(t,{A:()=>a});var r=n(540);const a=()=>r.createElement("main",{className:"min-h-screen bg-gray-50 p-4 md:p-6 lg:p-8"},r.createElement("section",{className:"max-w-2xl mx-auto"},r.createElement("div",{className:"bg-white rounded-lg shadow-sm p-6"},r.createElement("div",{className:"mb-4"},r.createElement("h1",{className:"text-3xl font-bold text-gray-900"},"Hello World")),r.createElement("div",null,r.createElement("p",{className:"text-gray-600"},"Welcome to your new Tonk application!")))))},172:(e,t,n)=>{var r=n(777);e.exports=n.v(t,e.id,"4bc69c9fa1b4f2712454",{"./automerge_wasm_bg.js":{__wbindgen_object_drop_ref:r.bk,__wbindgen_string_get:r.qN,__wbindgen_error_new:r.Rj,__wbindgen_string_new:r.yc,__wbindgen_number_new:r.N8,__wbindgen_object_clone_ref:r.BZ,__wbindgen_number_get:r.sW,__wbindgen_is_undefined:r.vU,__wbindgen_boolean_get:r.Nh,__wbindgen_is_null:r.QR,__wbindgen_is_string:r.Gu,__wbindgen_is_function:r.PR,__wbindgen_is_object:r.qv,__wbindgen_is_array:r.Cz,__wbindgen_json_serialize:r.dz,__wbg_new_abda76e883ba8a5f:r.V5,__wbg_stack_658279fe44541cf6:r.u$,__wbg_error_f851667af71bcfc6:r.Xu,__wbindgen_jsval_loose_eq:r.U8,__wbg_String_91fba7ded13ba54c:r.qB,__wbindgen_bigint_from_i64:r.ce,__wbindgen_bigint_from_u64:r.Qg,__wbg_set_20cbc34131e76824:r.H0,__wbg_getRandomValues_3aa56aa6edec874c:r.VF,__wbg_randomFillSync_5c9c955aa56b6049:r.hW,__wbg_crypto_1d1f22824a6a080c:r.h_,__wbg_process_4a72847cc503995b:r.cA,__wbg_versions_f686565e586dd935:r.D1,__wbg_node_104a2ff8d6ea03a2:r.NL,__wbg_require_cca90b1a94a0255b:r.s,__wbg_msCrypto_eb05e62b530a1508:r.cl,__wbg_log_5bb5f88f245d7762:r.A9,__wbg_log_1746d5c75ec89963:r.Og,__wbg_get_bd8e338fbd5f5cc8:r.g_,__wbg_length_cd7af8117672b8b8:r.O$,__wbg_new_16b304a2cfa7ff4a:r.M2,__wbg_newnoargs_e258087cd0daa0ea:r.Pf,__wbg_next_40fc327bfc8770e6:r.Xo,__wbg_next_196c84450b364254:r.iS,__wbg_done_298b57d23c0fc80c:r.uL,__wbg_value_d93c65011f51a456:r.qT,__wbg_iterator_2cee6dadfd956dfa:r.GR,__wbg_get_e3c254076557e348:r.XB,__wbg_call_27c0f87801dedf93:r.cq,__wbg_new_72fb9a18b5ae2624:r.ot,__wbg_length_dee433d4c85c9387:r.Fx,__wbg_set_d4638f722068f043:r.QU,__wbg_from_89e3fc3ba5e6fb48:r.vb,__wbg_isArray_2ab64d95e09ea0ae:r.f3,__wbg_push_a5b05aedc7234f9f:r.co,__wbg_unshift_e22df4b34bcf5070:r.db,__wbg_instanceof_ArrayBuffer_836825be07d4c9d2:r.B7,__wbg_new_28c511d9baebfa89:r.mC,__wbg_call_b3ca7c6051f9bec1:r._m,__wbg_instanceof_Date_f65cf97fb83fc369:r.G_,__wbg_getTime_2bc4375165f02d15:r.Ym,__wbg_new_cf3ec55744a78578:r.qD,__wbg_instanceof_Object_71ca3c0a59266746:r.DG,__wbg_assign_496d2d14fecafbcf:r.MT,__wbg_defineProperty_cc00e2de8a0f5141:r.$$,__wbg_entries_95cc2c823b285a09:r.OZ,__wbg_freeze_cc6bc19f75299986:r.uE,__wbg_keys_91e412b4b222659f:r.rn,__wbg_values_9c75e6e2bfbdb70d:r.Ak,__wbg_new_dd6a5dd7b538af21:r.KR,__wbg_apply_0a5aa603881e6d79:r.Ii,__wbg_deleteProperty_13e721a56f19e842:r.nd,__wbg_ownKeys_658942b7f28d1fe9:r.hB,__wbg_set_1f9b04f170055d33:r.j,__wbg_buffer_12d079cc21e14bdb:r.Fm,__wbg_concat_3de229fe4fe90fea:r.B_,__wbg_slice_52fb626ffdc8da8f:r.s1,__wbg_for_27c67e2dbdce22f6:r.Oh,__wbg_toString_7df3c77999517c20:r.nC,__wbg_self_ce0dbfc45cf2f5be:r.cX,__wbg_window_c6fb939a7f436783:r.kh,__wbg_globalThis_d1e6af4856ba331b:r.Kc,__wbg_global_207b558942527489:r.vA,__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb:r.Lo,__wbg_new_63b92bc8671ed464:r.$Z,__wbg_set_a47bac70306a19a7:r.Wv,__wbg_length_c20a40f15020d68a:r.qY,__wbg_instanceof_Uint8Array_2b3bbecd033d19f6:r.QD,__wbg_newwithlength_e9b4878cebadb3d3:r.v6,__wbg_subarray_a1f73cd4b5b42fe1:r.if,__wbindgen_debug_string:r.rl,__wbindgen_throw:r.Qn,__wbindgen_memory:r.Py}})},175:(e,t,n)=>{let r;n.d(t,{$v:()=>c,Q$:()=>s});const a=new Array(128).fill(void 0);a.push(void 0,null,!0,!1),a.length;("undefined"!=typeof TextEncoder?new TextEncoder("utf-8"):{encode:()=>{throw Error("TextEncoder not available")}}).encodeInto;const o="undefined"!=typeof TextDecoder?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};"undefined"!=typeof TextDecoder&&o.decode(),Object.freeze({Array:0,0:"Array",String:1,1:"String"}),"undefined"==typeof FinalizationRegistry||new FinalizationRegistry((e=>r.__wbg_automerge_free(e>>>0))),"undefined"==typeof FinalizationRegistry||new FinalizationRegistry((e=>r.__wbg_syncstate_free(e>>>0)));let i=!1,l=[];function s(e){for(const t in e)c[t]=e[t];i=!0;for(const e of l)e()}const c={create(e){throw new RangeError("Automerge.use() not called")},load(e,t){throw new RangeError("Automerge.use() not called (load)")},encodeChange(e){throw new RangeError("Automerge.use() not called (encodeChange)")},decodeChange(e){throw new RangeError("Automerge.use() not called (decodeChange)")},initSyncState(){throw new RangeError("Automerge.use() not called (initSyncState)")},encodeSyncMessage(e){throw new RangeError("Automerge.use() not called (encodeSyncMessage)")},decodeSyncMessage(e){throw new RangeError("Automerge.use() not called (decodeSyncMessage)")},encodeSyncState(e){throw new RangeError("Automerge.use() not called (encodeSyncState)")},decodeSyncState(e){throw new RangeError("Automerge.use() not called (decodeSyncState)")},exportSyncState(e){throw new RangeError("Automerge.use() not called (exportSyncState)")},importSyncState(e){throw new RangeError("Automerge.use() not called (importSyncState)")}}},221:(e,t,n)=>{var r=n(540);function a(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function o(){}var i={d:{f:o,r:function(){throw Error(a(522))},D:o,C:o,L:o,m:o,X:o,S:o,M:o},p:0,findDOMNode:null},l=Symbol.for("react.portal"),s=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function c(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=i,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(a(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:l,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=s.T,n=i.p;try{if(s.T=null,i.p=2,e)return e()}finally{s.T=t,i.p=n,i.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,i.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&i.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=c(n,t.crossOrigin),a="string"==typeof t.integrity?t.integrity:void 0,o="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?i.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:a,fetchPriority:o}):"script"===n&&i.d.X(e,{crossOrigin:r,integrity:a,fetchPriority:o,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=c(t.as,t.crossOrigin);i.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&i.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=c(n,t.crossOrigin);i.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=c(t.as,t.crossOrigin);i.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else i.d.m(e)},t.requestFormReset=function(e){i.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return s.H.useFormState(e,t,n)},t.useFormStatus=function(){return s.H.useHostTransitionStatus()},t.version="19.0.0"},245:(e,t,n)=>{n.d(t,{Q:()=>r});class r{constructor(e){this.val=e}toString(){return this.val}toJSON(){return this.val}}},247:(e,t,n)=>{var r=n(982),a=n(540),o=n(961);function i(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=Symbol.for("react.element"),s=Symbol.for("react.transitional.element"),c=Symbol.for("react.portal"),u=Symbol.for("react.fragment"),d=Symbol.for("react.strict_mode"),f=Symbol.for("react.profiler"),p=Symbol.for("react.provider"),h=Symbol.for("react.consumer"),g=Symbol.for("react.context"),m=Symbol.for("react.forward_ref"),A=Symbol.for("react.suspense"),b=Symbol.for("react.suspense_list"),y=Symbol.for("react.memo"),_=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var w=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var v=Symbol.for("react.memo_cache_sentinel"),E=Symbol.iterator;function k(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=E&&e[E]||e["@@iterator"])?e:null}var S=Symbol.for("react.client.reference");function x(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===S?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case u:return"Fragment";case c:return"Portal";case f:return"Profiler";case d:return"StrictMode";case A:return"Suspense";case b:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case g:return(e.displayName||"Context")+".Provider";case h:return(e._context.displayName||"Context")+".Consumer";case m:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case y:return null!==(t=e.displayName||null)?t:x(e.type)||"Memo";case _:t=e._payload,e=e._init;try{return x(e(t))}catch(e){}}return null}var C,B,O=a.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,N=Object.assign;function P(e){if(void 0===C)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);C=t&&t[1]||"",B=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+C+e+B}var z=!1;function R(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var a=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");a&&a.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var o=r.DetermineComponentFrameRoot(),i=o[0],l=o[1];if(i&&l){var s=i.split("\n"),c=l.split("\n");for(a=r=0;r<s.length&&!s[r].includes("DetermineComponentFrameRoot");)r++;for(;a<c.length&&!c[a].includes("DetermineComponentFrameRoot");)a++;if(r===s.length||a===c.length)for(r=s.length-1,a=c.length-1;1<=r&&0<=a&&s[r]!==c[a];)a--;for(;1<=r&&0<=a;r--,a--)if(s[r]!==c[a]){if(1!==r||1!==a)do{if(r--,0>--a||s[r]!==c[a]){var u="\n"+s[r].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=r&&0<=a);break}}}finally{z=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?P(n):""}function T(e){switch(e.tag){case 26:case 27:case 5:return P(e.type);case 16:return P("Lazy");case 13:return P("Suspense");case 19:return P("SuspenseList");case 0:case 15:return R(e.type,!1);case 11:return R(e.type.render,!1);case 1:return R(e.type,!0);default:return""}}function M(e){try{var t="";do{t+=T(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function D(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function L(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function I(e){if(D(e)!==e)throw Error(i(188))}function j(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=j(e)))return t;e=e.sibling}return null}var F=Array.isArray,U=o.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,$={pending:!1,data:null,method:null,action:null},H=[],W=-1;function V(e){return{current:e}}function q(e){0>W||(e.current=H[W],H[W]=null,W--)}function Q(e,t){W++,H[W]=e.current,e.current=t}var G=V(null),Y=V(null),K=V(null),X=V(null);function Z(e,t){switch(Q(K,t),Q(Y,e),Q(G,null),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)&&(t=t.namespaceURI)?Yu(t):0;break;default:if(t=(e=8===e?t.parentNode:t).tagName,e=e.namespaceURI)t=Ku(e=Yu(e),t);else switch(t){case"svg":t=1;break;case"math":t=2;break;default:t=0}}q(G),Q(G,t)}function J(){q(G),q(Y),q(K)}function ee(e){null!==e.memoizedState&&Q(X,e);var t=G.current,n=Ku(t,e.type);t!==n&&(Q(Y,e),Q(G,n))}function te(e){Y.current===e&&(q(G),q(Y)),X.current===e&&(q(X),Md._currentValue=$)}var ne=Object.prototype.hasOwnProperty,re=r.unstable_scheduleCallback,ae=r.unstable_cancelCallback,oe=r.unstable_shouldYield,ie=r.unstable_requestPaint,le=r.unstable_now,se=r.unstable_getCurrentPriorityLevel,ce=r.unstable_ImmediatePriority,ue=r.unstable_UserBlockingPriority,de=r.unstable_NormalPriority,fe=r.unstable_LowPriority,pe=r.unstable_IdlePriority,he=r.log,ge=r.unstable_setDisableYieldValue,me=null,Ae=null;function be(e){if("function"==typeof he&&ge(e),Ae&&"function"==typeof Ae.setStrictMode)try{Ae.setStrictMode(me,e)}catch(e){}}var ye=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(_e(e)/we|0)|0},_e=Math.log,we=Math.LN2,ve=128,Ee=4194304;function ke(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194176&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function Se(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=e.warmLanes;e=0!==e.finishedLanes;var l=134217727&n;return 0!==l?0!=(n=l&~a)?r=ke(n):0!=(o&=l)?r=ke(o):e||0!=(i=l&~i)&&(r=ke(i)):0!=(l=n&~a)?r=ke(l):0!==o?r=ke(o):e||0!=(i=n&~i)&&(r=ke(i)),0===r?0:0===t||t===r||t&a||!((a=r&-r)>=(i=t&-t)||32===a&&4194176&i)?r:t}function xe(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function Ce(e,t){switch(e){case 1:case 2:case 4:case 8:return t+250;case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function Be(){var e=ve;return!(4194176&(ve<<=1))&&(ve=128),e}function Oe(){var e=Ee;return!(62914560&(Ee<<=1))&&(Ee=4194304),e}function Ne(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Pe(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function ze(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-ye(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194218&n}function Re(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-ye(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}function Te(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Me(){var e=U.p;return 0!==e?e:void 0===(e=window.event)?32:Gd(e.type)}var De=Math.random().toString(36).slice(2),Le="__reactFiber$"+De,Ie="__reactProps$"+De,je="__reactContainer$"+De,Fe="__reactEvents$"+De,Ue="__reactListeners$"+De,$e="__reactHandles$"+De,He="__reactResources$"+De,We="__reactMarker$"+De;function Ve(e){delete e[Le],delete e[Ie],delete e[Fe],delete e[Ue],delete e[$e]}function qe(e){var t=e[Le];if(t)return t;for(var n=e.parentNode;n;){if(t=n[je]||n[Le]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ld(e);null!==e;){if(n=e[Le])return n;e=ld(e)}return t}n=(e=n).parentNode}return null}function Qe(e){if(e=e[Le]||e[je]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function Ge(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(i(33))}function Ye(e){var t=e[He];return t||(t=e[He]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Ke(e){e[We]=!0}var Xe=new Set,Ze={};function Je(e,t){et(e,t),et(e+"Capture",t)}function et(e,t){for(Ze[e]=t,e=0;e<t.length;e++)Xe.add(t[e])}var tt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),nt=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),rt={},at={};function ot(e,t,n){if(a=t,ne.call(at,a)||!ne.call(rt,a)&&(nt.test(a)?at[a]=!0:(rt[a]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var a}function it(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function lt(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function st(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ct(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ut(e){e._valueTracker||(e._valueTracker=function(e){var t=ct(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function dt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ct(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ft(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var pt=/[\n"\\]/g;function ht(e){return e.replace(pt,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function gt(e,t,n,r,a,o,i,l){e.name="",null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.type=i:e.removeAttribute("type"),null!=t?"number"===i?(0===t&&""===e.value||e.value!=t)&&(e.value=""+st(t)):e.value!==""+st(t)&&(e.value=""+st(t)):"submit"!==i&&"reset"!==i||e.removeAttribute("value"),null!=t?At(e,i,st(t)):null!=n?At(e,i,st(n)):null!=r&&e.removeAttribute("value"),null==a&&null!=o&&(e.defaultChecked=!!o),null!=a&&(e.checked=a&&"function"!=typeof a&&"symbol"!=typeof a),null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?e.name=""+st(l):e.removeAttribute("name")}function mt(e,t,n,r,a,o,i,l){if(null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.type=o),null!=t||null!=n){if(("submit"===o||"reset"===o)&&null==t)return;n=null!=n?""+st(n):"",t=null!=t?""+st(t):n,l||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:a)&&"symbol"!=typeof r&&!!r,e.checked=l?e.checked:!!r,e.defaultChecked=!!r,null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i&&(e.name=i)}function At(e,t,n){"number"===t&&ft(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function bt(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+st(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function yt(e,t,n){null==t||((t=""+st(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+st(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function _t(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(i(92));if(F(r)){if(1<r.length)throw Error(i(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=st(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function wt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var vt=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function Et(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||vt.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function kt(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(i(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var a in t)r=t[a],t.hasOwnProperty(a)&&n[a]!==r&&Et(e,a,r)}else for(var o in t)t.hasOwnProperty(o)&&Et(e,o,t[o])}function St(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var xt=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Ct=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Bt(e){return Ct.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Ot=null;function Nt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Pt=null,zt=null;function Rt(e){var t=Qe(e);if(t&&(e=t.stateNode)){var n=e[Ie]||null;e:switch(e=t.stateNode,t.type){case"input":if(gt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+ht(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=r[Ie]||null;if(!a)throw Error(i(90));gt(r,a.value,a.defaultValue,a.defaultValue,a.checked,a.defaultChecked,a.type,a.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&dt(r)}break e;case"textarea":yt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&bt(e,!!n.multiple,t,!1)}}}var Tt=!1;function Mt(e,t,n){if(Tt)return e(t,n);Tt=!0;try{return e(t)}finally{if(Tt=!1,(null!==Pt||null!==zt)&&(Lc(),Pt&&(t=Pt,e=zt,zt=Pt=null,Rt(t),e)))for(t=0;t<e.length;t++)Rt(e[t])}}function Dt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Ie]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Lt=!1;if(tt)try{var It={};Object.defineProperty(It,"passive",{get:function(){Lt=!0}}),window.addEventListener("test",It,It),window.removeEventListener("test",It,It)}catch(e){Lt=!1}var jt=null,Ft=null,Ut=null;function $t(){if(Ut)return Ut;var e,t,n=Ft,r=n.length,a="value"in jt?jt.value:jt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Ut=a.slice(e,1<t?1-t:void 0)}function Ht(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Wt(){return!0}function Vt(){return!1}function qt(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?Wt:Vt,this.isPropagationStopped=Vt,this}return N(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Wt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Wt)},persist:function(){},isPersistent:Wt}),t}var Qt,Gt,Yt,Kt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Xt=qt(Kt),Zt=N({},Kt,{view:0,detail:0}),Jt=qt(Zt),en=N({},Zt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:fn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Yt&&(Yt&&"mousemove"===e.type?(Qt=e.screenX-Yt.screenX,Gt=e.screenY-Yt.screenY):Gt=Qt=0,Yt=e),Qt)},movementY:function(e){return"movementY"in e?e.movementY:Gt}}),tn=qt(en),nn=qt(N({},en,{dataTransfer:0})),rn=qt(N({},Zt,{relatedTarget:0})),an=qt(N({},Kt,{animationName:0,elapsedTime:0,pseudoElement:0})),on=qt(N({},Kt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),ln=qt(N({},Kt,{data:0})),sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},un={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function dn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=un[e])&&!!t[e]}function fn(){return dn}var pn=qt(N({},Zt,{key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Ht(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:fn,charCode:function(e){return"keypress"===e.type?Ht(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ht(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),hn=qt(N({},en,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),gn=qt(N({},Zt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:fn})),mn=qt(N({},Kt,{propertyName:0,elapsedTime:0,pseudoElement:0})),An=qt(N({},en,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),bn=qt(N({},Kt,{newState:0,oldState:0})),yn=[9,13,27,32],_n=tt&&"CompositionEvent"in window,wn=null;tt&&"documentMode"in document&&(wn=document.documentMode);var vn=tt&&"TextEvent"in window&&!wn,En=tt&&(!_n||wn&&8<wn&&11>=wn),kn=String.fromCharCode(32),Sn=!1;function xn(e,t){switch(e){case"keyup":return-1!==yn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Cn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1,On={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Nn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!On[e.type]:"textarea"===t}function Pn(e,t,n,r){Pt?zt?zt.push(r):zt=[r]:Pt=r,0<(t=Mu(t,"onChange")).length&&(n=new Xt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var zn=null,Rn=null;function Tn(e){Cu(e,0)}function Mn(e){if(dt(Ge(e)))return e}function Dn(e,t){if("change"===e)return t}var Ln=!1;if(tt){var In;if(tt){var jn="oninput"in document;if(!jn){var Fn=document.createElement("div");Fn.setAttribute("oninput","return;"),jn="function"==typeof Fn.oninput}In=jn}else In=!1;Ln=In&&(!document.documentMode||9<document.documentMode)}function Un(){zn&&(zn.detachEvent("onpropertychange",$n),Rn=zn=null)}function $n(e){if("value"===e.propertyName&&Mn(Rn)){var t=[];Pn(t,Rn,e,Nt(e)),Mt(Tn,t)}}function Hn(e,t,n){"focusin"===e?(Un(),Rn=n,(zn=t).attachEvent("onpropertychange",$n)):"focusout"===e&&Un()}function Wn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Mn(Rn)}function Vn(e,t){if("click"===e)return Mn(t)}function qn(e,t){if("input"===e||"change"===e)return Mn(t)}var Qn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Gn(e,t){if(Qn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!ne.call(t,a)||!Qn(e[a],t[a]))return!1}return!0}function Yn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Kn(e,t){var n,r=Yn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Yn(r)}}function Xn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Xn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Zn(e){for(var t=ft((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=ft((e=t.contentWindow).document)}return t}function Jn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function er(e,t){var n=Zn(t);t=e.focusedElem;var r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&Xn(t.ownerDocument.documentElement,t)){if(null!==r&&Jn(t))if(e=r.start,void 0===(n=r.end)&&(n=e),"selectionStart"in t)t.selectionStart=e,t.selectionEnd=Math.min(n,t.value.length);else if((n=(e=t.ownerDocument||document)&&e.defaultView||window).getSelection){n=n.getSelection();var a=t.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!n.extend&&o>r&&(a=r,r=o,o=a),a=Kn(t,o);var i=Kn(t,r);a&&i&&(1!==n.rangeCount||n.anchorNode!==a.node||n.anchorOffset!==a.offset||n.focusNode!==i.node||n.focusOffset!==i.offset)&&((e=e.createRange()).setStart(a.node,a.offset),n.removeAllRanges(),o>r?(n.addRange(e),n.extend(i.node,i.offset)):(e.setEnd(i.node,i.offset),n.addRange(e)))}for(e=[],n=t;n=n.parentNode;)1===n.nodeType&&e.push({element:n,left:n.scrollLeft,top:n.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<e.length;t++)(n=e[t]).element.scrollLeft=n.left,n.element.scrollTop=n.top}}var tr=tt&&"documentMode"in document&&11>=document.documentMode,nr=null,rr=null,ar=null,or=!1;function ir(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;or||null==nr||nr!==ft(r)||(r="selectionStart"in(r=nr)&&Jn(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},ar&&Gn(ar,r)||(ar=r,0<(r=Mu(rr,"onSelect")).length&&(t=new Xt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=nr)))}function lr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var sr={animationend:lr("Animation","AnimationEnd"),animationiteration:lr("Animation","AnimationIteration"),animationstart:lr("Animation","AnimationStart"),transitionrun:lr("Transition","TransitionRun"),transitionstart:lr("Transition","TransitionStart"),transitioncancel:lr("Transition","TransitionCancel"),transitionend:lr("Transition","TransitionEnd")},cr={},ur={};function dr(e){if(cr[e])return cr[e];if(!sr[e])return e;var t,n=sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in ur)return cr[e]=n[t];return e}tt&&(ur=document.createElement("div").style,"AnimationEvent"in window||(delete sr.animationend.animation,delete sr.animationiteration.animation,delete sr.animationstart.animation),"TransitionEvent"in window||delete sr.transitionend.transition);var fr=dr("animationend"),pr=dr("animationiteration"),hr=dr("animationstart"),gr=dr("transitionrun"),mr=dr("transitionstart"),Ar=dr("transitioncancel"),br=dr("transitionend"),yr=new Map,_r="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(" ");function wr(e,t){yr.set(e,t),Je(t,[e])}var vr=[],Er=0,kr=0;function Sr(){for(var e=Er,t=kr=Er=0;t<e;){var n=vr[t];vr[t++]=null;var r=vr[t];vr[t++]=null;var a=vr[t];vr[t++]=null;var o=vr[t];if(vr[t++]=null,null!==r&&null!==a){var i=r.pending;null===i?a.next=a:(a.next=i.next,i.next=a),r.pending=a}0!==o&&Or(n,a,o)}}function xr(e,t,n,r){vr[Er++]=e,vr[Er++]=t,vr[Er++]=n,vr[Er++]=r,kr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Cr(e,t,n,r){return xr(e,t,n,r),Nr(e)}function Br(e,t){return xr(e,null,null,t),Nr(e)}function Or(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var a=!1,o=e.return;null!==o;)o.childLanes|=n,null!==(r=o.alternate)&&(r.childLanes|=n),22===o.tag&&(null===(e=o.stateNode)||1&e._visibility||(a=!0)),e=o,o=o.return;a&&null!==t&&3===e.tag&&(o=e.stateNode,a=31-ye(n),null===(e=(o=o.hiddenUpdates)[a])?o[a]=[t]:e.push(t),t.lane=536870912|n)}function Nr(e){if(50<Cc)throw Cc=0,Bc=null,Error(i(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Pr={},zr=new WeakMap;function Rr(e,t){if("object"==typeof e&&null!==e){var n=zr.get(e);return void 0!==n?n:(t={value:e,source:t,stack:M(t)},zr.set(e,t),t)}return{value:e,source:t,stack:M(t)}}var Tr=[],Mr=0,Dr=null,Lr=0,Ir=[],jr=0,Fr=null,Ur=1,$r="";function Hr(e,t){Tr[Mr++]=Lr,Tr[Mr++]=Dr,Dr=e,Lr=t}function Wr(e,t,n){Ir[jr++]=Ur,Ir[jr++]=$r,Ir[jr++]=Fr,Fr=e;var r=Ur;e=$r;var a=32-ye(r)-1;r&=~(1<<a),n+=1;var o=32-ye(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Ur=1<<32-ye(t)+a|n<<a|r,$r=o+e}else Ur=1<<o|n<<a|r,$r=e}function Vr(e){null!==e.return&&(Hr(e,1),Wr(e,1,0))}function qr(e){for(;e===Dr;)Dr=Tr[--Mr],Tr[Mr]=null,Lr=Tr[--Mr],Tr[Mr]=null;for(;e===Fr;)Fr=Ir[--jr],Ir[jr]=null,$r=Ir[--jr],Ir[jr]=null,Ur=Ir[--jr],Ir[jr]=null}var Qr=null,Gr=null,Yr=!1,Kr=null,Xr=!1,Zr=Error(i(519));function Jr(e){throw aa(Rr(Error(i(418,"")),e)),Zr}function ea(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Le]=e,t[Ie]=r,n){case"dialog":Bu("cancel",t),Bu("close",t);break;case"iframe":case"object":case"embed":Bu("load",t);break;case"video":case"audio":for(n=0;n<Su.length;n++)Bu(Su[n],t);break;case"source":Bu("error",t);break;case"img":case"image":case"link":Bu("error",t),Bu("load",t);break;case"details":Bu("toggle",t);break;case"input":Bu("invalid",t),mt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),ut(t);break;case"select":Bu("invalid",t);break;case"textarea":Bu("invalid",t),_t(t,r.value,r.defaultValue,r.children),ut(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Uu(t.textContent,n)?(null!=r.popover&&(Bu("beforetoggle",t),Bu("toggle",t)),null!=r.onScroll&&Bu("scroll",t),null!=r.onScrollEnd&&Bu("scrollend",t),null!=r.onClick&&(t.onclick=$u),t=!0):t=!1,t||Jr(e)}function ta(e){for(Qr=e.return;Qr;)switch(Qr.tag){case 3:case 27:return void(Xr=!0);case 5:case 13:return void(Xr=!1);default:Qr=Qr.return}}function na(e){if(e!==Qr)return!1;if(!Yr)return ta(e),Yr=!0,!1;var t,n=!1;if((t=3!==e.tag&&27!==e.tag)&&((t=5===e.tag)&&(t=!("form"!==(t=e.type)&&"button"!==t)||Xu(e.type,e.memoizedProps)),t=!t),t&&(n=!0),n&&Gr&&Jr(e),ta(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){Gr=id(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}Gr=null}}else Gr=Qr?id(e.stateNode.nextSibling):null;return!0}function ra(){Gr=Qr=null,Yr=!1}function aa(e){null===Kr?Kr=[e]:Kr.push(e)}var oa=Error(i(460)),ia=Error(i(474)),la={then:function(){}};function sa(e){return"fulfilled"===(e=e.status)||"rejected"===e}function ca(){}function ua(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(ca,ca),t=n),t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===oa)throw Error(i(483));throw e;default:if("string"==typeof t.status)t.then(ca,ca);else{if(null!==(e=ec)&&100<e.shellSuspendCounter)throw Error(i(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===oa)throw Error(i(483));throw e}throw da=t,oa}}var da=null;function fa(){if(null===da)throw Error(i(459));var e=da;return da=null,e}var pa=null,ha=0;function ga(e){var t=ha;return ha+=1,null===pa&&(pa=[]),ua(pa,e,t)}function ma(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function Aa(e,t){if(t.$$typeof===l)throw Error(i(525));throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ba(e){return(0,e._init)(e._payload)}function ya(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function a(e,t){return(e=Ds(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=33554434,n):r:(t.flags|=33554434,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=33554434),t}function d(e,t,n,r){return null===t||6!==t.tag?((t=Us(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n,r){var o=n.type;return o===u?h(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===_&&ba(o)===t.type)?(ma(t=a(t,n.props),n),t.return=e,t):(ma(t=Is(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function p(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=$s(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function h(e,t,n,r,o){return null===t||7!==t.tag?((t=js(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function m(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Us(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case s:return ma(n=Is(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case c:return(t=$s(t,e.mode,n)).return=e,t;case _:return m(e,t=(0,t._init)(t._payload),n)}if(F(t)||k(t))return(t=js(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return m(e,ga(t),n);if(t.$$typeof===g)return m(e,Sl(e,t),n);Aa(e,t)}return null}function A(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==a?null:d(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case s:return n.key===a?f(e,t,n,r):null;case c:return n.key===a?p(e,t,n,r):null;case _:return A(e,t,n=(a=n._init)(n._payload),r)}if(F(n)||k(n))return null!==a?null:h(e,t,n,r,null);if("function"==typeof n.then)return A(e,t,ga(n),r);if(n.$$typeof===g)return A(e,t,Sl(e,n),r);Aa(e,n)}return null}function b(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return d(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case s:return f(t,e=e.get(null===r.key?n:r.key)||null,r,a);case c:return p(t,e=e.get(null===r.key?n:r.key)||null,r,a);case _:return b(e,t,n,r=(0,r._init)(r._payload),a)}if(F(r)||k(r))return h(t,e=e.get(n)||null,r,a,null);if("function"==typeof r.then)return b(e,t,n,ga(r),a);if(r.$$typeof===g)return b(e,t,n,Sl(t,r),a);Aa(t,r)}return null}function y(d,f,p,h){if("object"==typeof p&&null!==p&&p.type===u&&null===p.key&&(p=p.props.children),"object"==typeof p&&null!==p){switch(p.$$typeof){case s:e:{for(var w=p.key;null!==f;){if(f.key===w){if((w=p.type)===u){if(7===f.tag){n(d,f.sibling),(h=a(f,p.props.children)).return=d,d=h;break e}}else if(f.elementType===w||"object"==typeof w&&null!==w&&w.$$typeof===_&&ba(w)===f.type){n(d,f.sibling),ma(h=a(f,p.props),p),h.return=d,d=h;break e}n(d,f);break}t(d,f),f=f.sibling}p.type===u?((h=js(p.props.children,d.mode,h,p.key)).return=d,d=h):(ma(h=Is(p.type,p.key,p.props,null,d.mode,h),p),h.return=d,d=h)}return l(d);case c:e:{for(w=p.key;null!==f;){if(f.key===w){if(4===f.tag&&f.stateNode.containerInfo===p.containerInfo&&f.stateNode.implementation===p.implementation){n(d,f.sibling),(h=a(f,p.children||[])).return=d,d=h;break e}n(d,f);break}t(d,f),f=f.sibling}(h=$s(p,d.mode,h)).return=d,d=h}return l(d);case _:return y(d,f,p=(w=p._init)(p._payload),h)}if(F(p))return function(a,i,l,s){for(var c=null,u=null,d=i,f=i=0,p=null;null!==d&&f<l.length;f++){d.index>f?(p=d,d=null):p=d.sibling;var h=A(a,d,l[f],s);if(null===h){null===d&&(d=p);break}e&&d&&null===h.alternate&&t(a,d),i=o(h,i,f),null===u?c=h:u.sibling=h,u=h,d=p}if(f===l.length)return n(a,d),Yr&&Hr(a,f),c;if(null===d){for(;f<l.length;f++)null!==(d=m(a,l[f],s))&&(i=o(d,i,f),null===u?c=d:u.sibling=d,u=d);return Yr&&Hr(a,f),c}for(d=r(d);f<l.length;f++)null!==(p=b(d,a,f,l[f],s))&&(e&&null!==p.alternate&&d.delete(null===p.key?f:p.key),i=o(p,i,f),null===u?c=p:u.sibling=p,u=p);return e&&d.forEach((function(e){return t(a,e)})),Yr&&Hr(a,f),c}(d,f,p,h);if(k(p)){if("function"!=typeof(w=k(p)))throw Error(i(150));return function(a,l,s,c){if(null==s)throw Error(i(151));for(var u=null,d=null,f=l,p=l=0,h=null,g=s.next();null!==f&&!g.done;p++,g=s.next()){f.index>p?(h=f,f=null):h=f.sibling;var y=A(a,f,g.value,c);if(null===y){null===f&&(f=h);break}e&&f&&null===y.alternate&&t(a,f),l=o(y,l,p),null===d?u=y:d.sibling=y,d=y,f=h}if(g.done)return n(a,f),Yr&&Hr(a,p),u;if(null===f){for(;!g.done;p++,g=s.next())null!==(g=m(a,g.value,c))&&(l=o(g,l,p),null===d?u=g:d.sibling=g,d=g);return Yr&&Hr(a,p),u}for(f=r(f);!g.done;p++,g=s.next())null!==(g=b(f,a,p,g.value,c))&&(e&&null!==g.alternate&&f.delete(null===g.key?p:g.key),l=o(g,l,p),null===d?u=g:d.sibling=g,d=g);return e&&f.forEach((function(e){return t(a,e)})),Yr&&Hr(a,p),u}(d,f,p=w.call(p),h)}if("function"==typeof p.then)return y(d,f,ga(p),h);if(p.$$typeof===g)return y(d,f,Sl(d,p),h);Aa(d,p)}return"string"==typeof p&&""!==p||"number"==typeof p||"bigint"==typeof p?(p=""+p,null!==f&&6===f.tag?(n(d,f.sibling),(h=a(f,p)).return=d,d=h):(n(d,f),(h=Us(p,d.mode,h)).return=d,d=h),l(d)):n(d,f)}return function(e,t,n,r){try{ha=0;var a=y(e,t,n,r);return pa=null,a}catch(t){if(t===oa)throw t;var o=Ts(29,t,null,e.mode);return o.lanes=r,o.return=e,o}}}var _a=ya(!0),wa=ya(!1),va=V(null),Ea=V(0);function ka(e,t){Q(Ea,e=sc),Q(va,t),sc=e|t.baseLanes}function Sa(){Q(Ea,sc),Q(va,va.current)}function xa(){sc=Ea.current,q(va),q(Ea)}var Ca=V(null),Ba=null;function Oa(e){var t=e.alternate;Q(Ra,1&Ra.current),Q(Ca,e),null===Ba&&(null===t||null!==va.current||null!==t.memoizedState)&&(Ba=e)}function Na(e){if(22===e.tag){if(Q(Ra,Ra.current),Q(Ca,e),null===Ba){var t=e.alternate;null!==t&&null!==t.memoizedState&&(Ba=e)}}else Pa()}function Pa(){Q(Ra,Ra.current),Q(Ca,Ca.current)}function za(e){q(Ca),Ba===e&&(Ba=null),q(Ra)}var Ra=V(0);function Ta(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ma="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Da=r.unstable_scheduleCallback,La=r.unstable_NormalPriority,Ia={$$typeof:g,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function ja(){return{controller:new Ma,data:new Map,refCount:0}}function Fa(e){e.refCount--,0===e.refCount&&Da(La,(function(){e.controller.abort()}))}var Ua=null,$a=0,Ha=0,Wa=null;function Va(){if(0==--$a&&null!==Ua){null!==Wa&&(Wa.status="fulfilled");var e=Ua;Ua=null,Ha=0,Wa=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var qa=O.S;O.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Ua){var n=Ua=[];$a=0,Ha=_u(),Wa={status:"pending",value:void 0,then:function(e){n.push(e)}}}$a++,t.then(Va,Va)}(0,t),null!==qa&&qa(e,t)};var Qa=V(null);function Ga(){var e=Qa.current;return null!==e?e:ec.pooledCache}function Ya(e,t){Q(Qa,null===t?Qa.current:t.pool)}function Ka(){var e=Ga();return null===e?null:{parent:Ia._currentValue,pool:e}}var Xa=0,Za=null,Ja=null,eo=null,to=!1,no=!1,ro=!1,ao=0,oo=0,io=null,lo=0;function so(){throw Error(i(321))}function co(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Qn(e[n],t[n]))return!1;return!0}function uo(e,t,n,r,a,o){return Xa=o,Za=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,O.H=null===e||null===e.memoizedState?Si:xi,ro=!1,o=n(r,a),ro=!1,no&&(o=po(t,n,r,a)),fo(e),o}function fo(e){O.H=ki;var t=null!==Ja&&null!==Ja.next;if(Xa=0,eo=Ja=Za=null,to=!1,oo=0,io=null,t)throw Error(i(300));null===e||Hi||null!==(e=e.dependencies)&&vl(e)&&(Hi=!0)}function po(e,t,n,r){Za=e;var a=0;do{if(no&&(io=null),oo=0,no=!1,25<=a)throw Error(i(301));if(a+=1,eo=Ja=null,null!=e.updateQueue){var o=e.updateQueue;o.lastEffect=null,o.events=null,o.stores=null,null!=o.memoCache&&(o.memoCache.index=0)}O.H=Ci,o=t(n,r)}while(no);return o}function ho(){var e=O.H,t=e.useState()[0];return t="function"==typeof t.then?_o(t):t,e=e.useState()[0],(null!==Ja?Ja.memoizedState:null)!==e&&(Za.flags|=1024),t}function go(){var e=0!==ao;return ao=0,e}function mo(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function Ao(e){if(to){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}to=!1}Xa=0,eo=Ja=Za=null,no=!1,oo=ao=0,io=null}function bo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===eo?Za.memoizedState=eo=e:eo=eo.next=e,eo}function yo(){if(null===Ja){var e=Za.alternate;e=null!==e?e.memoizedState:null}else e=Ja.next;var t=null===eo?Za.memoizedState:eo.next;if(null!==t)eo=t,Ja=e;else{if(null===e){if(null===Za.alternate)throw Error(i(467));throw Error(i(310))}e={memoizedState:(Ja=e).memoizedState,baseState:Ja.baseState,baseQueue:Ja.baseQueue,queue:Ja.queue,next:null},null===eo?Za.memoizedState=eo=e:eo=eo.next=e}return eo}function _o(e){var t=oo;return oo+=1,null===io&&(io=[]),e=ua(io,e,t),t=Za,null===(null===eo?t.memoizedState:eo.next)&&(t=t.alternate,O.H=null===t||null===t.memoizedState?Si:xi),e}function wo(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return _o(e);if(e.$$typeof===g)return kl(e)}throw Error(i(438,String(e)))}function vo(e){var t=null,n=Za.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=Za.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},Za.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=v;return t.index++,n}function Eo(e,t){return"function"==typeof t?t(e):t}function ko(e){return So(yo(),Ja,e)}function So(e,t,n){var r=e.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=n;var a=e.baseQueue,o=r.pending;if(null!==o){if(null!==a){var l=a.next;a.next=o.next,o.next=l}t.baseQueue=a=o,r.pending=null}if(o=e.baseState,null===a)e.memoizedState=o;else{var s=l=null,c=null,u=t=a.next,d=!1;do{var f=-536870913&u.lane;if(f!==u.lane?(nc&f)===f:(Xa&f)===f){var p=u.revertLane;if(0===p)null!==c&&(c=c.next={lane:0,revertLane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),f===Ha&&(d=!0);else{if((Xa&p)===p){u=u.next,p===Ha&&(d=!0);continue}f={lane:0,revertLane:u.revertLane,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null},null===c?(s=c=f,l=o):c=c.next=f,Za.lanes|=p,uc|=p}f=u.action,ro&&n(o,f),o=u.hasEagerState?u.eagerState:n(o,f)}else p={lane:f,revertLane:u.revertLane,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null},null===c?(s=c=p,l=o):c=c.next=p,Za.lanes|=f,uc|=f;u=u.next}while(null!==u&&u!==t);if(null===c?l=o:c.next=s,!Qn(o,e.memoizedState)&&(Hi=!0,d&&null!==(n=Wa)))throw n;e.memoizedState=o,e.baseState=l,e.baseQueue=c,r.lastRenderedState=o}return null===a&&(r.lanes=0),[e.memoizedState,r.dispatch]}function xo(e){var t=yo(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{o=e(o,l.action),l=l.next}while(l!==a);Qn(o,t.memoizedState)||(Hi=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function Co(e,t,n){var r=Za,a=yo(),o=Yr;if(o){if(void 0===n)throw Error(i(407));n=n()}else n=t();var l=!Qn((Ja||a).memoizedState,n);if(l&&(a.memoizedState=n,Hi=!0),a=a.queue,Zo(No.bind(null,r,a,e),[e]),a.getSnapshot!==t||l||null!==eo&&1&eo.memoizedState.tag){if(r.flags|=2048,Qo(9,Oo.bind(null,r,a,n,t),{destroy:void 0},null),null===ec)throw Error(i(349));o||60&Xa||Bo(r,t,n)}return n}function Bo(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=Za.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},Za.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Oo(e,t,n,r){t.value=n,t.getSnapshot=r,Po(t)&&zo(e)}function No(e,t,n){return n((function(){Po(t)&&zo(e)}))}function Po(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Qn(e,n)}catch(e){return!0}}function zo(e){var t=Br(e,2);null!==t&&Pc(t,0,2)}function Ro(e){var t=bo();if("function"==typeof e){var n=e;if(e=n(),ro){be(!0);try{n()}finally{be(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Eo,lastRenderedState:e},t}function To(e,t,n,r){return e.baseState=n,So(e,Ja,"function"==typeof r?r:Eo)}function Mo(e,t,n,r,a){if(wi(e))throw Error(i(485));if(null!==(e=t.action)){var o={payload:a,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){o.listeners.push(e)}};null!==O.T?n(!0):o.isTransition=!1,r(o),null===(n=t.pending)?(o.next=t.pending=o,Do(t,o)):(o.next=n.next,t.pending=n.next=o)}}function Do(e,t){var n=t.action,r=t.payload,a=e.state;if(t.isTransition){var o=O.T,i={};O.T=i;try{var l=n(a,r),s=O.S;null!==s&&s(i,l),Lo(e,t,l)}catch(n){jo(e,t,n)}finally{O.T=o}}else try{Lo(e,t,o=n(a,r))}catch(n){jo(e,t,n)}}function Lo(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){Io(e,t,n)}),(function(n){return jo(e,t,n)})):Io(e,t,n)}function Io(e,t,n){t.status="fulfilled",t.value=n,Fo(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,Do(e,n)))}function jo(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,Fo(t),t=t.next}while(t!==r)}e.action=null}function Fo(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function Uo(e,t){return t}function $o(e,t){if(Yr){var n=ec.formState;if(null!==n){e:{var r=Za;if(Yr){if(Gr){t:{for(var a=Gr,o=Xr;8!==a.nodeType;){if(!o){a=null;break t}if(null===(a=id(a.nextSibling))){a=null;break t}}a="F!"===(o=a.data)||"F"===o?a:null}if(a){Gr=id(a.nextSibling),r="F!"===a.data;break e}}Jr(r)}r=!1}r&&(t=n[0])}}return(n=bo()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Uo,lastRenderedState:t},n.queue=r,n=bi.bind(null,Za,r),r.dispatch=n,r=Ro(!1),o=_i.bind(null,Za,!1,r.queue),a={state:t,dispatch:null,action:e,pending:null},(r=bo()).queue=a,n=Mo.bind(null,Za,a,o,n),a.dispatch=n,r.memoizedState=e,[t,n,!1]}function Ho(e){return Wo(yo(),Ja,e)}function Wo(e,t,n){t=So(e,t,Uo)[0],e=ko(Eo)[0],t="object"==typeof t&&null!==t&&"function"==typeof t.then?_o(t):t;var r=yo(),a=r.queue,o=a.dispatch;return n!==r.memoizedState&&(Za.flags|=2048,Qo(9,Vo.bind(null,a,n),{destroy:void 0},null)),[t,o,e]}function Vo(e,t){e.action=t}function qo(e){var t=yo(),n=Ja;if(null!==n)return Wo(t,n,e);yo(),t=t.memoizedState;var r=(n=yo()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function Qo(e,t,n,r){return e={tag:e,create:t,inst:n,deps:r,next:null},null===(t=Za.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},Za.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Go(){return yo().memoizedState}function Yo(e,t,n,r){var a=bo();Za.flags|=e,a.memoizedState=Qo(1|t,n,{destroy:void 0},void 0===r?null:r)}function Ko(e,t,n,r){var a=yo();r=void 0===r?null:r;var o=a.memoizedState.inst;null!==Ja&&null!==r&&co(r,Ja.memoizedState.deps)?a.memoizedState=Qo(t,n,o,r):(Za.flags|=e,a.memoizedState=Qo(1|t,n,o,r))}function Xo(e,t){Yo(8390656,8,e,t)}function Zo(e,t){Ko(2048,8,e,t)}function Jo(e,t){return Ko(4,2,e,t)}function ei(e,t){return Ko(4,4,e,t)}function ti(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function ni(e,t,n){n=null!=n?n.concat([e]):null,Ko(4,4,ti.bind(null,t,e),n)}function ri(){}function ai(e,t){var n=yo();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&co(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function oi(e,t){var n=yo();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&co(t,r[1]))return r[0];if(r=e(),ro){be(!0);try{e()}finally{be(!1)}}return n.memoizedState=[r,t],r}function ii(e,t,n){return void 0===n||1073741824&Xa?e.memoizedState=t:(e.memoizedState=n,e=Nc(),Za.lanes|=e,uc|=e,n)}function li(e,t,n,r){return Qn(n,t)?n:null!==va.current?(e=ii(e,n,r),Qn(e,t)||(Hi=!0),e):42&Xa?(e=Nc(),Za.lanes|=e,uc|=e,t):(Hi=!0,e.memoizedState=n)}function si(e,t,n,r,a){var o=U.p;U.p=0!==o&&8>o?o:8;var i,l,s,c=O.T,u={};O.T=u,_i(e,!1,t,n);try{var d=a(),f=O.S;null!==f&&f(u,d),null!==d&&"object"==typeof d&&"function"==typeof d.then?yi(e,t,(i=r,l=[],s={status:"pending",value:null,reason:null,then:function(e){l.push(e)}},d.then((function(){s.status="fulfilled",s.value=i;for(var e=0;e<l.length;e++)(0,l[e])(i)}),(function(e){for(s.status="rejected",s.reason=e,e=0;e<l.length;e++)(0,l[e])(void 0)})),s),Oc()):yi(e,t,r,Oc())}catch(n){yi(e,t,{then:function(){},status:"rejected",reason:n},Oc())}finally{U.p=o,O.T=c}}function ci(){}function ui(e,t,n,r){if(5!==e.tag)throw Error(i(476));var a=di(e).queue;si(e,a,t,$,null===n?ci:function(){return fi(e),n(r)})}function di(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:$,baseState:$,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Eo,lastRenderedState:$},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Eo,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function fi(e){yi(e,di(e).next.queue,{},Oc())}function pi(){return kl(Md)}function hi(){return yo().memoizedState}function gi(){return yo().memoizedState}function mi(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Oc(),r=Pl(t,e=Nl(n),n);return null!==r&&(Pc(r,0,n),zl(r,t,n)),t={cache:ja()},void(e.payload=t)}t=t.return}}function Ai(e,t,n){var r=Oc();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},wi(e)?vi(t,n):null!==(n=Cr(e,t,n,r))&&(Pc(n,0,r),Ei(n,t,r))}function bi(e,t,n){yi(e,t,n,Oc())}function yi(e,t,n,r){var a={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(wi(e))vi(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.hasEagerState=!0,a.eagerState=l,Qn(l,i))return xr(e,t,a,0),null===ec&&Sr(),!1}catch(e){}if(null!==(n=Cr(e,t,a,r)))return Pc(n,0,r),Ei(n,t,r),!0}return!1}function _i(e,t,n,r){if(r={lane:2,revertLane:_u(),action:r,hasEagerState:!1,eagerState:null,next:null},wi(e)){if(t)throw Error(i(479))}else null!==(t=Cr(e,n,r,2))&&Pc(t,0,2)}function wi(e){var t=e.alternate;return e===Za||null!==t&&t===Za}function vi(e,t){no=to=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Ei(e,t,n){if(4194176&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Re(e,n)}}var ki={readContext:kl,use:wo,useCallback:so,useContext:so,useEffect:so,useImperativeHandle:so,useLayoutEffect:so,useInsertionEffect:so,useMemo:so,useReducer:so,useRef:so,useState:so,useDebugValue:so,useDeferredValue:so,useTransition:so,useSyncExternalStore:so,useId:so};ki.useCacheRefresh=so,ki.useMemoCache=so,ki.useHostTransitionStatus=so,ki.useFormState=so,ki.useActionState=so,ki.useOptimistic=so;var Si={readContext:kl,use:wo,useCallback:function(e,t){return bo().memoizedState=[e,void 0===t?null:t],e},useContext:kl,useEffect:Xo,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,Yo(4194308,4,ti.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Yo(4194308,4,e,t)},useInsertionEffect:function(e,t){Yo(4,2,e,t)},useMemo:function(e,t){var n=bo();t=void 0===t?null:t;var r=e();if(ro){be(!0);try{e()}finally{be(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=bo();if(void 0!==n){var a=n(t);if(ro){be(!0);try{n(t)}finally{be(!1)}}}else a=t;return r.memoizedState=r.baseState=a,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:a},r.queue=e,e=e.dispatch=Ai.bind(null,Za,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},bo().memoizedState=e},useState:function(e){var t=(e=Ro(e)).queue,n=bi.bind(null,Za,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:ri,useDeferredValue:function(e,t){return ii(bo(),e,t)},useTransition:function(){var e=Ro(!1);return e=si.bind(null,Za,e.queue,!0,!1),bo().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=Za,a=bo();if(Yr){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===ec)throw Error(i(349));60&nc||Bo(r,t,n)}a.memoizedState=n;var o={value:n,getSnapshot:t};return a.queue=o,Xo(No.bind(null,r,o,e),[e]),r.flags|=2048,Qo(9,Oo.bind(null,r,o,n,t),{destroy:void 0},null),n},useId:function(){var e=bo(),t=ec.identifierPrefix;if(Yr){var n=$r;t=":"+t+"R"+(n=(Ur&~(1<<32-ye(Ur)-1)).toString(32)+n),0<(n=ao++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=lo++).toString(32)+":";return e.memoizedState=t},useCacheRefresh:function(){return bo().memoizedState=mi.bind(null,Za)}};Si.useMemoCache=vo,Si.useHostTransitionStatus=pi,Si.useFormState=$o,Si.useActionState=$o,Si.useOptimistic=function(e){var t=bo();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=_i.bind(null,Za,!0,n),n.dispatch=t,[e,t]};var xi={readContext:kl,use:wo,useCallback:ai,useContext:kl,useEffect:Zo,useImperativeHandle:ni,useInsertionEffect:Jo,useLayoutEffect:ei,useMemo:oi,useReducer:ko,useRef:Go,useState:function(){return ko(Eo)},useDebugValue:ri,useDeferredValue:function(e,t){return li(yo(),Ja.memoizedState,e,t)},useTransition:function(){var e=ko(Eo)[0],t=yo().memoizedState;return["boolean"==typeof e?e:_o(e),t]},useSyncExternalStore:Co,useId:hi};xi.useCacheRefresh=gi,xi.useMemoCache=vo,xi.useHostTransitionStatus=pi,xi.useFormState=Ho,xi.useActionState=Ho,xi.useOptimistic=function(e,t){return To(yo(),0,e,t)};var Ci={readContext:kl,use:wo,useCallback:ai,useContext:kl,useEffect:Zo,useImperativeHandle:ni,useInsertionEffect:Jo,useLayoutEffect:ei,useMemo:oi,useReducer:xo,useRef:Go,useState:function(){return xo(Eo)},useDebugValue:ri,useDeferredValue:function(e,t){var n=yo();return null===Ja?ii(n,e,t):li(n,Ja.memoizedState,e,t)},useTransition:function(){var e=xo(Eo)[0],t=yo().memoizedState;return["boolean"==typeof e?e:_o(e),t]},useSyncExternalStore:Co,useId:hi};function Bi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:N({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}Ci.useCacheRefresh=gi,Ci.useMemoCache=vo,Ci.useHostTransitionStatus=pi,Ci.useFormState=qo,Ci.useActionState=qo,Ci.useOptimistic=function(e,t){var n=yo();return null!==Ja?To(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])};var Oi={isMounted:function(e){return!!(e=e._reactInternals)&&D(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Oc(),a=Nl(r);a.payload=t,null!=n&&(a.callback=n),null!==(t=Pl(e,a,r))&&(Pc(t,0,r),zl(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Oc(),a=Nl(r);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Pl(e,a,r))&&(Pc(t,0,r),zl(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Oc(),r=Nl(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=Pl(e,r,n))&&(Pc(t,0,n),zl(t,e,n))}};function Ni(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&Gn(n,r)&&Gn(a,o))}function Pi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Oi.enqueueReplaceState(t,t.state,null)}function zi(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var a in n===t&&(n=N({},n)),e)void 0===n[a]&&(n[a]=e[a]);return n}var Ri="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function Ti(e){Ri(e)}function Mi(e){console.error(e)}function Di(e){Ri(e)}function Li(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function Ii(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function ji(e,t,n){return(n=Nl(n)).tag=3,n.payload={element:null},n.callback=function(){Li(e,t)},n}function Fi(e){return(e=Nl(e)).tag=3,e}function Ui(e,t,n,r){var a=n.type.getDerivedStateFromError;if("function"==typeof a){var o=r.value;e.payload=function(){return a(o)},e.callback=function(){Ii(t,n,r)}}var i=n.stateNode;null!==i&&"function"==typeof i.componentDidCatch&&(e.callback=function(){Ii(t,n,r),"function"!=typeof a&&(null===wc?wc=new Set([this]):wc.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var $i=Error(i(461)),Hi=!1;function Wi(e,t,n,r){t.child=null===e?wa(t,null,n,r):_a(t,e.child,n,r)}function Vi(e,t,n,r,a){n=n.render;var o=t.ref;if("ref"in r){var i={};for(var l in r)"ref"!==l&&(i[l]=r[l])}else i=r;return El(t),r=uo(e,t,n,i,o,a),l=go(),null===e||Hi?(Yr&&l&&Vr(t),t.flags|=1,Wi(e,t,r,a),t.child):(mo(e,t,a),dl(e,t,a))}function qi(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Ms(o)||void 0!==o.defaultProps||null!==n.compare?((e=Is(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Qi(e,t,o,r,a))}if(o=e.child,!fl(e,a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:Gn)(i,r)&&e.ref===t.ref)return dl(e,t,a)}return t.flags|=1,(e=Ds(o,r)).ref=t.ref,e.return=t,t.child=e}function Qi(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(Gn(o,r)&&e.ref===t.ref){if(Hi=!1,t.pendingProps=r=o,!fl(e,a))return t.lanes=e.lanes,dl(e,t,a);131072&e.flags&&(Hi=!0)}}return Xi(e,t,n,r,a)}function Gi(e,t,n){var r=t.pendingProps,a=r.children,o=!!(2&t.stateNode._pendingVisibility),i=null!==e?e.memoizedState:null;if(Ki(e,t),"hidden"===r.mode||o){if(128&t.flags){if(r=null!==i?i.baseLanes|n:n,null!==e){for(a=t.child=e.child,o=0;null!==a;)o=o|a.lanes|a.childLanes,a=a.sibling;t.childLanes=o&~r}else t.childLanes=0,t.child=null;return Yi(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Yi(e,t,null!==i?i.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Ya(0,null!==i?i.cachePool:null),null!==i?ka(t,i):Sa(),Na(t)}else null!==i?(Ya(0,i.cachePool),ka(t,i),Pa(),t.memoizedState=null):(null!==e&&Ya(0,null),Sa(),Pa());return Wi(e,t,a,n),t.child}function Yi(e,t,n,r){var a=Ga();return a=null===a?null:{parent:Ia._currentValue,pool:a},t.memoizedState={baseLanes:n,cachePool:a},null!==e&&Ya(0,null),Sa(),Na(t),null!==e&&wl(e,t,r,!0),null}function Ki(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=2097664);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(i(284));null!==e&&e.ref===n||(t.flags|=2097664)}}function Xi(e,t,n,r,a){return El(t),n=uo(e,t,n,r,void 0,a),r=go(),null===e||Hi?(Yr&&r&&Vr(t),t.flags|=1,Wi(e,t,n,a),t.child):(mo(e,t,a),dl(e,t,a))}function Zi(e,t,n,r,a,o){return El(t),t.updateQueue=null,n=po(t,r,n,a),fo(e),r=go(),null===e||Hi?(Yr&&r&&Vr(t),t.flags|=1,Wi(e,t,n,o),t.child):(mo(e,t,o),dl(e,t,o))}function Ji(e,t,n,r,a){if(El(t),null===t.stateNode){var o=Pr,i=n.contextType;"object"==typeof i&&null!==i&&(o=kl(i)),o=new n(r,o),t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,o.updater=Oi,t.stateNode=o,o._reactInternals=t,(o=t.stateNode).props=r,o.state=t.memoizedState,o.refs={},Bl(t),i=n.contextType,o.context="object"==typeof i&&null!==i?kl(i):Pr,o.state=t.memoizedState,"function"==typeof(i=n.getDerivedStateFromProps)&&(Bi(t,n,i,r),o.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(i=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),i!==o.state&&Oi.enqueueReplaceState(o,o.state,null),Dl(t,r,o,a),Ml(),o.state=t.memoizedState),"function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){o=t.stateNode;var l=t.memoizedProps,s=zi(n,l);o.props=s;var c=o.context,u=n.contextType;i=Pr,"object"==typeof u&&null!==u&&(i=kl(u));var d=n.getDerivedStateFromProps;u="function"==typeof d||"function"==typeof o.getSnapshotBeforeUpdate,l=t.pendingProps!==l,u||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l||c!==i)&&Pi(t,o,r,i),Cl=!1;var f=t.memoizedState;o.state=f,Dl(t,r,o,a),Ml(),c=t.memoizedState,l||f!==c||Cl?("function"==typeof d&&(Bi(t,n,d,r),c=t.memoizedState),(s=Cl||Ni(t,n,s,r,f,c,i))?(u||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4194308)):("function"==typeof o.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=c),o.props=r,o.state=c,o.context=i,r=s):("function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,Ol(e,t),u=zi(n,i=t.memoizedProps),o.props=u,d=t.pendingProps,f=o.context,c=n.contextType,s=Pr,"object"==typeof c&&null!==c&&(s=kl(c)),(c="function"==typeof(l=n.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(i!==d||f!==s)&&Pi(t,o,r,s),Cl=!1,f=t.memoizedState,o.state=f,Dl(t,r,o,a),Ml();var p=t.memoizedState;i!==d||f!==p||Cl||null!==e&&null!==e.dependencies&&vl(e.dependencies)?("function"==typeof l&&(Bi(t,n,l,r),p=t.memoizedState),(u=Cl||Ni(t,n,u,r,f,p,s)||null!==e&&null!==e.dependencies&&vl(e.dependencies))?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,p,s),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof o.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),o.props=r,o.state=p,o.context=s,r=u):("function"!=typeof o.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return o=r,Ki(e,t),r=!!(128&t.flags),o||r?(o=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:o.render(),t.flags|=1,null!==e&&r?(t.child=_a(t,e.child,null,a),t.child=_a(t,null,n,a)):Wi(e,t,n,a),t.memoizedState=o.state,e=t.child):e=dl(e,t,a),e}function el(e,t,n,r){return ra(),t.flags|=256,Wi(e,t,n,r),t.child}var tl={dehydrated:null,treeContext:null,retryLane:0};function nl(e){return{baseLanes:e,cachePool:Ka()}}function rl(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=pc),e}function al(e,t,n){var r,a=t.pendingProps,o=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&Ra.current)),r&&(o=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(Yr){if(o?Oa(t):Pa(),Yr){var s,c=Gr;if(s=c){e:{for(s=c,c=Xr;8!==s.nodeType;){if(!c){c=null;break e}if(null===(s=id(s.nextSibling))){c=null;break e}}c=s}null!==c?(t.memoizedState={dehydrated:c,treeContext:null!==Fr?{id:Ur,overflow:$r}:null,retryLane:536870912},(s=Ts(18,null,null,0)).stateNode=c,s.return=t,t.child=s,Qr=t,Gr=null,s=!0):s=!1}s||Jr(t)}if(null!==(c=t.memoizedState)&&null!==(c=c.dehydrated))return"$!"===c.data?t.lanes=16:t.lanes=536870912,null;za(t)}return c=a.children,a=a.fallback,o?(Pa(),c=il({mode:"hidden",children:c},o=t.mode),a=js(a,o,n,null),c.return=t,a.return=t,c.sibling=a,t.child=c,(o=t.child).memoizedState=nl(n),o.childLanes=rl(e,r,n),t.memoizedState=tl,a):(Oa(t),ol(t,c))}if(null!==(s=e.memoizedState)&&null!==(c=s.dehydrated)){if(l)256&t.flags?(Oa(t),t.flags&=-257,t=ll(e,t,n)):null!==t.memoizedState?(Pa(),t.child=e.child,t.flags|=128,t=null):(Pa(),o=a.fallback,c=t.mode,a=il({mode:"visible",children:a.children},c),(o=js(o,c,n,null)).flags|=2,a.return=t,o.return=t,a.sibling=o,t.child=a,_a(t,e.child,null,n),(a=t.child).memoizedState=nl(n),a.childLanes=rl(e,r,n),t.memoizedState=tl,t=o);else if(Oa(t),"$!"===c.data){if(r=c.nextSibling&&c.nextSibling.dataset)var u=r.dgst;r=u,(a=Error(i(419))).stack="",a.digest=r,aa({value:a,source:null,stack:null}),t=ll(e,t,n)}else if(Hi||wl(e,t,n,!1),r=!!(n&e.childLanes),Hi||r){if(null!==(r=ec)){if(42&(a=n&-n))a=1;else switch(a){case 2:a=1;break;case 8:a=4;break;case 32:a=16;break;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:a=64;break;case 268435456:a=134217728;break;default:a=0}if(0!==(a=a&(r.suspendedLanes|n)?0:a)&&a!==s.retryLane)throw s.retryLane=a,Br(e,a),Pc(r,0,a),$i}"$?"===c.data||Hc(),t=ll(e,t,n)}else"$?"===c.data?(t.flags|=128,t.child=e.child,t=iu.bind(null,e),c._reactRetry=t,t=null):(e=s.treeContext,Gr=id(c.nextSibling),Qr=t,Yr=!0,Kr=null,Xr=!1,null!==e&&(Ir[jr++]=Ur,Ir[jr++]=$r,Ir[jr++]=Fr,Ur=e.id,$r=e.overflow,Fr=t),(t=ol(t,a.children)).flags|=4096);return t}return o?(Pa(),o=a.fallback,c=t.mode,u=(s=e.child).sibling,(a=Ds(s,{mode:"hidden",children:a.children})).subtreeFlags=31457280&s.subtreeFlags,null!==u?o=Ds(u,o):(o=js(o,c,n,null)).flags|=2,o.return=t,a.return=t,a.sibling=o,t.child=a,a=o,o=t.child,null===(c=e.child.memoizedState)?c=nl(n):(null!==(s=c.cachePool)?(u=Ia._currentValue,s=s.parent!==u?{parent:u,pool:u}:s):s=Ka(),c={baseLanes:c.baseLanes|n,cachePool:s}),o.memoizedState=c,o.childLanes=rl(e,r,n),t.memoizedState=tl,a):(Oa(t),e=(n=e.child).sibling,(n=Ds(n,{mode:"visible",children:a.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function ol(e,t){return(t=il({mode:"visible",children:t},e.mode)).return=e,e.child=t}function il(e,t){return Fs(e,t,0,null)}function ll(e,t,n){return _a(t,e.child,null,n),(e=ol(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function sl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),yl(e.return,t,n)}function cl(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function ul(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Wi(e,t,r.children,n),2&(r=Ra.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&sl(e,n,t);else if(19===e.tag)sl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(Q(Ra,r),a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Ta(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),cl(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Ta(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}cl(t,!0,n,null,o);break;case"together":cl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function dl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),uc|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(wl(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Ds(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ds(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function fl(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!vl(e))}function pl(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Hi=!0;else{if(!(fl(e,n)||128&t.flags))return Hi=!1,function(e,t,n){switch(t.tag){case 3:Z(t,t.stateNode.containerInfo),Al(0,Ia,e.memoizedState.cache),ra();break;case 27:case 5:ee(t);break;case 4:Z(t,t.stateNode.containerInfo);break;case 10:Al(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(Oa(t),t.flags|=128,null):n&t.child.childLanes?al(e,t,n):(Oa(t),null!==(e=dl(e,t,n))?e.sibling:null);Oa(t);break;case 19:var a=!!(128&e.flags);if((r=!!(n&t.childLanes))||(wl(e,t,n,!1),r=!!(n&t.childLanes)),a){if(r)return ul(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Q(Ra,Ra.current),r)break;return null;case 22:case 23:return t.lanes=0,Gi(e,t,n);case 24:Al(0,Ia,e.memoizedState.cache)}return dl(e,t,n)}(e,t,n);Hi=!!(131072&e.flags)}else Hi=!1,Yr&&1048576&t.flags&&Wr(t,Lr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,a=r._init;if(r=a(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((a=r.$$typeof)===m){t.tag=11,t=Vi(null,t,r,e,n);break e}if(a===y){t.tag=14,t=qi(null,t,r,e,n);break e}}throw t=x(r)||r,Error(i(306,t,""))}Ms(r)?(e=zi(r,e),t.tag=1,t=Ji(null,t,r,e,n)):(t.tag=0,t=Xi(null,t,r,e,n))}return t;case 0:return Xi(e,t,t.type,t.pendingProps,n);case 1:return Ji(e,t,r=t.type,a=zi(r,t.pendingProps),n);case 3:e:{if(Z(t,t.stateNode.containerInfo),null===e)throw Error(i(387));var o=t.pendingProps;r=(a=t.memoizedState).element,Ol(e,t),Dl(t,o,null,n);var l=t.memoizedState;if(o=l.cache,Al(0,Ia,o),o!==a.cache&&_l(t,[Ia],n,!0),Ml(),o=l.element,a.isDehydrated){if(a={element:o,isDehydrated:!1,cache:l.cache},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=el(e,t,o,n);break e}if(o!==r){aa(r=Rr(Error(i(424)),t)),t=el(e,t,o,n);break e}for(Gr=id(t.stateNode.containerInfo.firstChild),Qr=t,Yr=!0,Kr=null,Xr=!0,n=wa(t,null,o,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ra(),o===r){t=dl(e,t,n);break e}Wi(e,t,o,n)}t=t.child}return t;case 26:return Ki(e,t),null===e?(n=gd(t.type,null,t.pendingProps,null))?t.memoizedState=n:Yr||(n=t.type,e=t.pendingProps,(r=Gu(K.current).createElement(n))[Le]=t,r[Ie]=e,Vu(r,n,e),Ke(r),t.stateNode=r):t.memoizedState=gd(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return ee(t),null===e&&Yr&&(r=t.stateNode=sd(t.type,t.pendingProps,K.current),Qr=t,Xr=!0,Gr=id(r.firstChild)),r=t.pendingProps.children,null!==e||Yr?Wi(e,t,r,n):t.child=_a(t,null,r,n),Ki(e,t),t.child;case 5:return null===e&&Yr&&((a=r=Gr)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var a=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[We])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(o=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(o!==a.rel||e.getAttribute("href")!==(null==a.href?null:a.href)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin)||e.getAttribute("title")!==(null==a.title?null:a.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((o=e.getAttribute("src"))!==(null==a.src?null:a.src)||e.getAttribute("type")!==(null==a.type?null:a.type)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin))&&o&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var o=null==a.name?null:""+a.name;if("hidden"===a.type&&e.getAttribute("name")===o)return e}if(null===(e=id(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,Xr))?(t.stateNode=r,Qr=t,Gr=id(r.firstChild),Xr=!1,a=!0):a=!1),a||Jr(t)),ee(t),a=t.type,o=t.pendingProps,l=null!==e?e.memoizedProps:null,r=o.children,Xu(a,o)?r=null:null!==l&&Xu(a,l)&&(t.flags|=32),null!==t.memoizedState&&(a=uo(e,t,ho,null,null,n),Md._currentValue=a),Ki(e,t),Wi(e,t,r,n),t.child;case 6:return null===e&&Yr&&((e=n=Gr)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=id(e.nextSibling)))return null}return e}(n,t.pendingProps,Xr))?(t.stateNode=n,Qr=t,Gr=null,e=!0):e=!1),e||Jr(t)),null;case 13:return al(e,t,n);case 4:return Z(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=_a(t,null,r,n):Wi(e,t,r,n),t.child;case 11:return Vi(e,t,t.type,t.pendingProps,n);case 7:return Wi(e,t,t.pendingProps,n),t.child;case 8:case 12:return Wi(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,Al(0,t.type,r.value),Wi(e,t,r.children,n),t.child;case 9:return a=t.type._context,r=t.pendingProps.children,El(t),r=r(a=kl(a)),t.flags|=1,Wi(e,t,r,n),t.child;case 14:return qi(e,t,t.type,t.pendingProps,n);case 15:return Qi(e,t,t.type,t.pendingProps,n);case 19:return ul(e,t,n);case 22:return Gi(e,t,n);case 24:return El(t),r=kl(Ia),null===e?(null===(a=Ga())&&(a=ec,o=ja(),a.pooledCache=o,o.refCount++,null!==o&&(a.pooledCacheLanes|=n),a=o),t.memoizedState={parent:r,cache:a},Bl(t),Al(0,Ia,a)):(!!(e.lanes&n)&&(Ol(e,t),Dl(t,null,null,n),Ml()),a=e.memoizedState,o=t.memoizedState,a.parent!==r?(a={parent:r,cache:r},t.memoizedState=a,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=a),Al(0,Ia,r)):(r=o.cache,Al(0,Ia,r),r!==a.cache&&_l(t,[Ia],n,!0))),Wi(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(i(156,t.tag))}var hl=V(null),gl=null,ml=null;function Al(e,t,n){Q(hl,t._currentValue),t._currentValue=n}function bl(e){e._currentValue=hl.current,q(hl)}function yl(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function _l(e,t,n,r){var a=e.child;for(null!==a&&(a.return=e);null!==a;){var o=a.dependencies;if(null!==o){var l=a.child;o=o.firstContext;e:for(;null!==o;){var s=o;o=a;for(var c=0;c<t.length;c++)if(s.context===t[c]){o.lanes|=n,null!==(s=o.alternate)&&(s.lanes|=n),yl(o.return,n,e),r||(l=null);break e}o=s.next}}else if(18===a.tag){if(null===(l=a.return))throw Error(i(341));l.lanes|=n,null!==(o=l.alternate)&&(o.lanes|=n),yl(l,n,e),l=null}else l=a.child;if(null!==l)l.return=a;else for(l=a;null!==l;){if(l===e){l=null;break}if(null!==(a=l.sibling)){a.return=l.return,l=a;break}l=l.return}a=l}}function wl(e,t,n,r){e=null;for(var a=t,o=!1;null!==a;){if(!o)if(524288&a.flags)o=!0;else if(262144&a.flags)break;if(10===a.tag){var l=a.alternate;if(null===l)throw Error(i(387));if(null!==(l=l.memoizedProps)){var s=a.type;Qn(a.pendingProps.value,l.value)||(null!==e?e.push(s):e=[s])}}else if(a===X.current){if(null===(l=a.alternate))throw Error(i(387));l.memoizedState.memoizedState!==a.memoizedState.memoizedState&&(null!==e?e.push(Md):e=[Md])}a=a.return}null!==e&&_l(t,e,n,r),t.flags|=262144}function vl(e){for(e=e.firstContext;null!==e;){if(!Qn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function El(e){gl=e,ml=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function kl(e){return xl(gl,e)}function Sl(e,t){return null===gl&&El(e),xl(e,t)}function xl(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===ml){if(null===e)throw Error(i(308));ml=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else ml=ml.next=t;return n}var Cl=!1;function Bl(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function Ol(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function Nl(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function Pl(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Js){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,t=Nr(e),Or(e,null,n),t}return xr(e,r,t,n),Nr(e)}function zl(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194176&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Re(e,n)}}function Rl(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var Tl=!1;function Ml(){if(Tl&&null!==Wa)throw Wa}function Dl(e,t,n,r){Tl=!1;var a=e.updateQueue;Cl=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var s=l,c=s.next;s.next=null,null===i?o=c:i.next=c,i=s;var u=e.alternate;null!==u&&(l=(u=u.updateQueue).lastBaseUpdate)!==i&&(null===l?u.firstBaseUpdate=c:l.next=c,u.lastBaseUpdate=s)}if(null!==o){var d=a.baseState;for(i=0,u=c=s=null,l=o;;){var f=-536870913&l.lane,p=f!==l.lane;if(p?(nc&f)===f:(r&f)===f){0!==f&&f===Ha&&(Tl=!0),null!==u&&(u=u.next={lane:0,tag:l.tag,payload:l.payload,callback:null,next:null});e:{var h=e,g=l;f=t;var m=n;switch(g.tag){case 1:if("function"==typeof(h=g.payload)){d=h.call(m,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=g.payload)?h.call(m,d,f):h))break e;d=N({},d,f);break e;case 2:Cl=!0}}null!==(f=l.callback)&&(e.flags|=64,p&&(e.flags|=8192),null===(p=a.callbacks)?a.callbacks=[f]:p.push(f))}else p={lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===u?(c=u=p,s=d):u=u.next=p,i|=f;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(p=l).next,p.next=null,a.lastBaseUpdate=p,a.shared.pending=null}}null===u&&(s=d),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=u,null===o&&(a.shared.lanes=0),uc|=i,e.lanes=i,e.memoizedState=d}}function Ll(e,t){if("function"!=typeof e)throw Error(i(191,e));e.call(t)}function Il(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)Ll(n[e],t)}function jl(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var a=r.next;n=a;do{if((n.tag&e)===e){r=void 0;var o=n.create,i=n.inst;r=o(),i.destroy=r}n=n.next}while(n!==a)}}catch(e){nu(t,t.return,e)}}function Fl(e,t,n){try{var r=t.updateQueue,a=null!==r?r.lastEffect:null;if(null!==a){var o=a.next;r=o;do{if((r.tag&e)===e){var i=r.inst,l=i.destroy;if(void 0!==l){i.destroy=void 0,a=t;var s=n;try{l()}catch(e){nu(a,s,e)}}}r=r.next}while(r!==o)}}catch(e){nu(t,t.return,e)}}function Ul(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{Il(t,n)}catch(t){nu(e,e.return,t)}}}function $l(e,t,n){n.props=zi(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){nu(e,t,n)}}function Hl(e,t){try{var n=e.ref;if(null!==n){var r=e.stateNode;switch(e.tag){case 26:case 27:case 5:var a=r;break;default:a=r}"function"==typeof n?e.refCleanup=n(a):n.current=a}}catch(n){nu(e,t,n)}}function Wl(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){nu(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){nu(e,t,n)}else n.current=null}function Vl(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){nu(e,e.return,t)}}function ql(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var a=null,o=null,l=null,s=null,c=null,u=null,d=null;for(h in n){var f=n[h];if(n.hasOwnProperty(h)&&null!=f)switch(h){case"checked":case"value":break;case"defaultValue":c=f;default:r.hasOwnProperty(h)||Hu(e,t,h,null,r,f)}}for(var p in r){var h=r[p];if(f=n[p],r.hasOwnProperty(p)&&(null!=h||null!=f))switch(p){case"type":o=h;break;case"name":a=h;break;case"checked":u=h;break;case"defaultChecked":d=h;break;case"value":l=h;break;case"defaultValue":s=h;break;case"children":case"dangerouslySetInnerHTML":if(null!=h)throw Error(i(137,t));break;default:h!==f&&Hu(e,t,p,h,r,f)}}return void gt(e,l,s,c,u,d,o,a);case"select":for(o in h=l=s=p=null,n)if(c=n[o],n.hasOwnProperty(o)&&null!=c)switch(o){case"value":break;case"multiple":h=c;default:r.hasOwnProperty(o)||Hu(e,t,o,null,r,c)}for(a in r)if(o=r[a],c=n[a],r.hasOwnProperty(a)&&(null!=o||null!=c))switch(a){case"value":p=o;break;case"defaultValue":s=o;break;case"multiple":l=o;default:o!==c&&Hu(e,t,a,o,r,c)}return t=s,n=l,r=h,void(null!=p?bt(e,!!n,p,!1):!!r!=!!n&&(null!=t?bt(e,!!n,t,!0):bt(e,!!n,n?[]:"",!1)));case"textarea":for(s in h=p=null,n)if(a=n[s],n.hasOwnProperty(s)&&null!=a&&!r.hasOwnProperty(s))switch(s){case"value":case"children":break;default:Hu(e,t,s,null,r,a)}for(l in r)if(a=r[l],o=n[l],r.hasOwnProperty(l)&&(null!=a||null!=o))switch(l){case"value":p=a;break;case"defaultValue":h=a;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=a)throw Error(i(91));break;default:a!==o&&Hu(e,t,l,a,r,o)}return void yt(e,p,h);case"option":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&("selected"===g?e.selected=!1:Hu(e,t,g,null,r,p));for(c in r)p=r[c],h=n[c],!r.hasOwnProperty(c)||p===h||null==p&&null==h||("selected"===c?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Hu(e,t,c,p,r,h));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var m in n)p=n[m],n.hasOwnProperty(m)&&null!=p&&!r.hasOwnProperty(m)&&Hu(e,t,m,null,r,p);for(u in r)if(p=r[u],h=n[u],r.hasOwnProperty(u)&&p!==h&&(null!=p||null!=h))switch(u){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(i(137,t));break;default:Hu(e,t,u,p,r,h)}return;default:if(St(t)){for(var A in n)p=n[A],n.hasOwnProperty(A)&&void 0!==p&&!r.hasOwnProperty(A)&&Wu(e,t,A,void 0,r,p);for(d in r)p=r[d],h=n[d],!r.hasOwnProperty(d)||p===h||void 0===p&&void 0===h||Wu(e,t,d,p,r,h);return}}for(var b in n)p=n[b],n.hasOwnProperty(b)&&null!=p&&!r.hasOwnProperty(b)&&Hu(e,t,b,null,r,p);for(f in r)p=r[f],h=n[f],!r.hasOwnProperty(f)||p===h||null==p&&null==h||Hu(e,t,f,p,r,h)}(r,e.type,n,t),r[Ie]=t}catch(t){nu(e,e.return,t)}}function Ql(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag||4===e.tag}function Gl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Ql(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&27!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Yl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=$u));else if(4!==r&&27!==r&&null!==(e=e.child))for(Yl(e,t,n),e=e.sibling;null!==e;)Yl(e,t,n),e=e.sibling}function Kl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&27!==r&&null!==(e=e.child))for(Kl(e,t,n),e=e.sibling;null!==e;)Kl(e,t,n),e=e.sibling}var Xl=!1,Zl=!1,Jl=!1,es="function"==typeof WeakSet?WeakSet:Set,ts=null,ns=!1;function rs(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:ms(e,n),4&r&&jl(5,n);break;case 1:if(ms(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){nu(n,n.return,e)}else{var a=zi(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(a,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){nu(n,n.return,e)}}64&r&&Ul(n),512&r&&Hl(n,n.return);break;case 3:if(ms(e,n),64&r&&null!==(r=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:e=n.child.stateNode}try{Il(r,e)}catch(e){nu(n,n.return,e)}}break;case 26:ms(e,n),512&r&&Hl(n,n.return);break;case 27:case 5:ms(e,n),null===t&&4&r&&Vl(n),512&r&&Hl(n,n.return);break;case 12:default:ms(e,n);break;case 13:ms(e,n),4&r&&cs(e,n);break;case 22:if(!(a=null!==n.memoizedState||Xl)){t=null!==t&&null!==t.memoizedState||Zl;var o=Xl,i=Zl;Xl=a,(Zl=t)&&!i?bs(e,n,!!(8772&n.subtreeFlags)):ms(e,n),Xl=o,Zl=i}512&r&&("manual"===n.memoizedProps.mode?Hl(n,n.return):Wl(n,n.return))}}function as(e){var t=e.alternate;null!==t&&(e.alternate=null,as(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&Ve(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var os=null,is=!1;function ls(e,t,n){for(n=n.child;null!==n;)ss(e,t,n),n=n.sibling}function ss(e,t,n){if(Ae&&"function"==typeof Ae.onCommitFiberUnmount)try{Ae.onCommitFiberUnmount(me,n)}catch(e){}switch(n.tag){case 26:Zl||Wl(n,t),ls(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:Zl||Wl(n,t);var r=os,a=is;for(os=n.stateNode,ls(e,t,n),t=(n=n.stateNode).attributes;t.length;)n.removeAttributeNode(t[0]);Ve(n),os=r,is=a;break;case 5:Zl||Wl(n,t);case 6:a=os;var o=is;if(os=null,ls(e,t,n),is=o,null!==(os=a))if(is)try{e=os,r=n.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)}catch(e){nu(n,t,e)}else try{os.removeChild(n.stateNode)}catch(e){nu(n,t,e)}break;case 18:null!==os&&(is?(t=os,n=n.stateNode,8===t.nodeType?ad(t.parentNode,n):1===t.nodeType&&ad(t,n),pf(t)):ad(os,n.stateNode));break;case 4:r=os,a=is,os=n.stateNode.containerInfo,is=!0,ls(e,t,n),os=r,is=a;break;case 0:case 11:case 14:case 15:Zl||Fl(2,n,t),Zl||Fl(4,n,t),ls(e,t,n);break;case 1:Zl||(Wl(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&$l(n,t,r)),ls(e,t,n);break;case 21:ls(e,t,n);break;case 22:Zl||Wl(n,t),Zl=(r=Zl)||null!==n.memoizedState,ls(e,t,n),Zl=r;break;default:ls(e,t,n)}}function cs(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{pf(e)}catch(e){nu(t,t.return,e)}}function us(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new es),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new es),t;default:throw Error(i(435,e.tag))}}(e);t.forEach((function(t){var r=lu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function ds(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r],o=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 27:case 5:os=s.stateNode,is=!1;break e;case 3:case 4:os=s.stateNode.containerInfo,is=!0;break e}s=s.return}if(null===os)throw Error(i(160));ss(o,l,a),os=null,is=!1,null!==(o=a.alternate)&&(o.return=null),a.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)ps(t,e),t=t.sibling}var fs=null;function ps(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:ds(t,e),hs(e),4&r&&(Fl(3,e,e.return),jl(3,e),Fl(5,e,e.return));break;case 1:ds(t,e),hs(e),512&r&&(Zl||null===n||Wl(n,n.return)),64&r&&Xl&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var a=fs;if(ds(t,e),hs(e),512&r&&(Zl||null===n||Wl(n,n.return)),4&r){var o=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,a=a.ownerDocument||a;t:switch(r){case"title":(!(o=a.getElementsByTagName("title")[0])||o[We]||o[Le]||"http://www.w3.org/2000/svg"===o.namespaceURI||o.hasAttribute("itemprop"))&&(o=a.createElement(r),a.head.insertBefore(o,a.querySelector("head > title"))),Vu(o,r,n),o[Le]=e,Ke(o),r=o;break e;case"link":var l=xd("link","href",a).get(r+(n.href||""));if(l)for(var s=0;s<l.length;s++)if((o=l[s]).getAttribute("href")===(null==n.href?null:n.href)&&o.getAttribute("rel")===(null==n.rel?null:n.rel)&&o.getAttribute("title")===(null==n.title?null:n.title)&&o.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){l.splice(s,1);break t}Vu(o=a.createElement(r),r,n),a.head.appendChild(o);break;case"meta":if(l=xd("meta","content",a).get(r+(n.content||"")))for(s=0;s<l.length;s++)if((o=l[s]).getAttribute("content")===(null==n.content?null:""+n.content)&&o.getAttribute("name")===(null==n.name?null:n.name)&&o.getAttribute("property")===(null==n.property?null:n.property)&&o.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&o.getAttribute("charset")===(null==n.charSet?null:n.charSet)){l.splice(s,1);break t}Vu(o=a.createElement(r),r,n),a.head.appendChild(o);break;default:throw Error(i(468,r))}o[Le]=e,Ke(o),r=o}e.stateNode=r}else Cd(a,e.type,e.stateNode);else e.stateNode=wd(a,r,e.memoizedProps);else o!==r?(null===o?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):o.count--,null===r?Cd(a,e.type,e.stateNode):wd(a,r,e.memoizedProps)):null===r&&null!==e.stateNode&&ql(e,e.memoizedProps,n.memoizedProps)}break;case 27:if(4&r&&null===e.alternate){a=e.stateNode,o=e.memoizedProps;try{for(var c=a.firstChild;c;){var u=c.nextSibling,d=c.nodeName;c[We]||"HEAD"===d||"BODY"===d||"SCRIPT"===d||"STYLE"===d||"LINK"===d&&"stylesheet"===c.rel.toLowerCase()||a.removeChild(c),c=u}for(var f=e.type,p=a.attributes;p.length;)a.removeAttributeNode(p[0]);Vu(a,f,o),a[Le]=e,a[Ie]=o}catch(t){nu(e,e.return,t)}}case 5:if(ds(t,e),hs(e),512&r&&(Zl||null===n||Wl(n,n.return)),32&e.flags){a=e.stateNode;try{wt(a,"")}catch(t){nu(e,e.return,t)}}4&r&&null!=e.stateNode&&ql(e,a=e.memoizedProps,null!==n?n.memoizedProps:a),1024&r&&(Jl=!0);break;case 6:if(ds(t,e),hs(e),4&r){if(null===e.stateNode)throw Error(i(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){nu(e,e.return,t)}}break;case 3:if(Sd=null,a=fs,fs=dd(t.containerInfo),ds(t,e),fs=a,hs(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{pf(t.containerInfo)}catch(t){nu(e,e.return,t)}Jl&&(Jl=!1,gs(e));break;case 4:r=fs,fs=dd(e.stateNode.containerInfo),ds(t,e),hs(e),fs=r;break;case 12:ds(t,e),hs(e);break;case 13:ds(t,e),hs(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(bc=le()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,us(e,r));break;case 22:if(512&r&&(Zl||null===n||Wl(n,n.return)),c=null!==e.memoizedState,u=null!==n&&null!==n.memoizedState,Xl=(d=Xl)||c,Zl=(f=Zl)||u,ds(t,e),Zl=f,Xl=d,hs(e),(t=e.stateNode)._current=e,t._visibility&=-3,t._visibility|=2&t._pendingVisibility,8192&r&&(t._visibility=c?-2&t._visibility:1|t._visibility,c&&(t=Xl||Zl,null===n||u||t||As(e)),null===e.memoizedProps||"manual"!==e.memoizedProps.mode))e:for(n=null,t=e;;){if(5===t.tag||26===t.tag||27===t.tag){if(null===n){u=n=t;try{if(a=u.stateNode,c)"function"==typeof(o=a.style).setProperty?o.setProperty("display","none","important"):o.display="none";else{l=u.stateNode;var h=null!=(s=u.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null;l.style.display=null==h||"boolean"==typeof h?"":(""+h).trim()}}catch(e){nu(u,u.return,e)}}}else if(6===t.tag){if(null===n){u=t;try{u.stateNode.nodeValue=c?"":u.memoizedProps}catch(e){nu(u,u.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,us(e,n));break;case 19:ds(t,e),hs(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,us(e,r));break;case 21:break;default:ds(t,e),hs(e)}}function hs(e){var t=e.flags;if(2&t){try{if(27!==e.tag){e:{for(var n=e.return;null!==n;){if(Ql(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 27:var a=r.stateNode;Kl(e,Gl(e),a);break;case 5:var o=r.stateNode;32&r.flags&&(wt(o,""),r.flags&=-33),Kl(e,Gl(e),o);break;case 3:case 4:var l=r.stateNode.containerInfo;Yl(e,Gl(e),l);break;default:throw Error(i(161))}}}catch(t){nu(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gs(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;gs(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function ms(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)rs(e,t.alternate,t),t=t.sibling}function As(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:Fl(4,t,t.return),As(t);break;case 1:Wl(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&$l(t,t.return,n),As(t);break;case 26:case 27:case 5:Wl(t,t.return),As(t);break;case 22:Wl(t,t.return),null===t.memoizedState&&As(t);break;default:As(t)}e=e.sibling}}function bs(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,a=e,o=t,i=o.flags;switch(o.tag){case 0:case 11:case 15:bs(a,o,n),jl(4,o);break;case 1:if(bs(a,o,n),"function"==typeof(a=(r=o).stateNode).componentDidMount)try{a.componentDidMount()}catch(e){nu(r,r.return,e)}if(null!==(a=(r=o).updateQueue)){var l=r.stateNode;try{var s=a.shared.hiddenCallbacks;if(null!==s)for(a.shared.hiddenCallbacks=null,a=0;a<s.length;a++)Ll(s[a],l)}catch(e){nu(r,r.return,e)}}n&&64&i&&Ul(o),Hl(o,o.return);break;case 26:case 27:case 5:bs(a,o,n),n&&null===r&&4&i&&Vl(o),Hl(o,o.return);break;case 12:default:bs(a,o,n);break;case 13:bs(a,o,n),n&&4&i&&cs(a,o);break;case 22:null===o.memoizedState&&bs(a,o,n),Hl(o,o.return)}t=t.sibling}}function ys(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Fa(n))}function _s(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Fa(e))}function ws(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)vs(e,t,n,r),t=t.sibling}function vs(e,t,n,r){var a=t.flags;switch(t.tag){case 0:case 11:case 15:ws(e,t,n,r),2048&a&&jl(9,t);break;case 3:ws(e,t,n,r),2048&a&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Fa(e)));break;case 12:if(2048&a){ws(e,t,n,r),e=t.stateNode;try{var o=t.memoizedProps,i=o.id,l=o.onPostCommit;"function"==typeof l&&l(i,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){nu(t,t.return,e)}}else ws(e,t,n,r);break;case 23:break;case 22:o=t.stateNode,null!==t.memoizedState?4&o._visibility?ws(e,t,n,r):ks(e,t):4&o._visibility?ws(e,t,n,r):(o._visibility|=4,Es(e,t,n,r,!!(10256&t.subtreeFlags))),2048&a&&ys(t.alternate,t);break;case 24:ws(e,t,n,r),2048&a&&_s(t.alternate,t);break;default:ws(e,t,n,r)}}function Es(e,t,n,r,a){for(a=a&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var o=e,i=t,l=n,s=r,c=i.flags;switch(i.tag){case 0:case 11:case 15:Es(o,i,l,s,a),jl(8,i);break;case 23:break;case 22:var u=i.stateNode;null!==i.memoizedState?4&u._visibility?Es(o,i,l,s,a):ks(o,i):(u._visibility|=4,Es(o,i,l,s,a)),a&&2048&c&&ys(i.alternate,i);break;case 24:Es(o,i,l,s,a),a&&2048&c&&_s(i.alternate,i);break;default:Es(o,i,l,s,a)}t=t.sibling}}function ks(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,a=r.flags;switch(r.tag){case 22:ks(n,r),2048&a&&ys(r.alternate,r);break;case 24:ks(n,r),2048&a&&_s(r.alternate,r);break;default:ks(n,r)}t=t.sibling}}var Ss=8192;function xs(e){if(e.subtreeFlags&Ss)for(e=e.child;null!==e;)Cs(e),e=e.sibling}function Cs(e){switch(e.tag){case 26:xs(e),e.flags&Ss&&null!==e.memoizedState&&function(e,t,n){if(null===Od)throw Error(i(475));var r=Od;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var a=md(n.href),o=e.querySelector(Ad(a));if(o)return null!==(e=o._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Pd.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=o,void Ke(o);o=e.ownerDocument||e,n=bd(n),(a=cd.get(a))&&Ed(n,a),Ke(o=o.createElement("link"));var l=o;l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),Vu(o,"link",n),t.instance=o}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=Pd.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(fs,e.memoizedState,e.memoizedProps);break;case 5:default:xs(e);break;case 3:case 4:var t=fs;fs=dd(e.stateNode.containerInfo),xs(e),fs=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=Ss,Ss=16777216,xs(e),Ss=t):xs(e))}}function Bs(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Os(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ts=r,zs(r,e)}Bs(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Ns(e),e=e.sibling}function Ns(e){switch(e.tag){case 0:case 11:case 15:Os(e),2048&e.flags&&Fl(9,e,e.return);break;case 3:case 12:default:Os(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&4&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-5,Ps(e)):Os(e)}}function Ps(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ts=r,zs(r,e)}Bs(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:Fl(8,t,t.return),Ps(t);break;case 22:4&(n=t.stateNode)._visibility&&(n._visibility&=-5,Ps(t));break;default:Ps(t)}e=e.sibling}}function zs(e,t){for(;null!==ts;){var n=ts;switch(n.tag){case 0:case 11:case 15:Fl(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Fa(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,ts=r;else e:for(n=e;null!==ts;){var a=(r=ts).sibling,o=r.return;if(as(r),r===n){ts=null;break e}if(null!==a){a.return=o,ts=a;break e}ts=o}}}function Rs(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ts(e,t,n,r){return new Rs(e,t,n,r)}function Ms(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ds(e,t){var n=e.alternate;return null===n?((n=Ts(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=31457280&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Ls(e,t){e.flags&=31457282;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function Is(e,t,n,r,a,o){var l=0;if(r=e,"function"==typeof e)Ms(e)&&(l=1);else if("string"==typeof e)l=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,G.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case u:return js(n.children,a,o,t);case d:l=8,a|=24;break;case f:return(e=Ts(12,n,t,2|a)).elementType=f,e.lanes=o,e;case A:return(e=Ts(13,n,t,a)).elementType=A,e.lanes=o,e;case b:return(e=Ts(19,n,t,a)).elementType=b,e.lanes=o,e;case w:return Fs(n,a,o,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case p:case g:l=10;break e;case h:l=9;break e;case m:l=11;break e;case y:l=14;break e;case _:l=16,r=null;break e}l=29,n=Error(i(130,null===e?"null":typeof e,"")),r=null}return(t=Ts(l,n,t,a)).elementType=e,t.type=r,t.lanes=o,t}function js(e,t,n,r){return(e=Ts(7,e,r,t)).lanes=n,e}function Fs(e,t,n,r){(e=Ts(22,e,r,t)).elementType=w,e.lanes=n;var a={_visibility:1,_pendingVisibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null,_current:null,detach:function(){var e=a._current;if(null===e)throw Error(i(456));if(!(2&a._pendingVisibility)){var t=Br(e,2);null!==t&&(a._pendingVisibility|=2,Pc(t,0,2))}},attach:function(){var e=a._current;if(null===e)throw Error(i(456));if(2&a._pendingVisibility){var t=Br(e,2);null!==t&&(a._pendingVisibility&=-3,Pc(t,0,2))}}};return e.stateNode=a,e}function Us(e,t,n){return(e=Ts(6,e,null,t)).lanes=n,e}function $s(e,t,n){return(t=Ts(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Hs(e){e.flags|=4}function Ws(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Bd(t)){if(null!==(t=Ca.current)&&((4194176&nc)===nc?null!==Ba:(62914560&nc)!==nc&&!(536870912&nc)||t!==Ba))throw da=la,ia;e.flags|=8192}}function Vs(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?Oe():536870912,e.lanes|=t,hc|=t)}function qs(e,t){if(!Yr)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Qs(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=31457280&a.subtreeFlags,r|=31457280&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Gs(e,t,n){var r=t.pendingProps;switch(qr(t),t.tag){case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return Qs(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),bl(Ia),J(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(na(t)?Hs(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==Kr&&(Rc(Kr),Kr=null))),Qs(t),null;case 26:return n=t.memoizedState,null===e?(Hs(t),null!==n?(Qs(t),Ws(t,n)):(Qs(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Hs(t),Qs(t),Ws(t,n)):(Qs(t),t.flags&=-16777217):(e.memoizedProps!==r&&Hs(t),Qs(t),t.flags&=-16777217),null;case 27:te(t),n=K.current;var a=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Hs(t);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Qs(t),null}e=G.current,na(t)?ea(t):(e=sd(a,r,n),t.stateNode=e,Hs(t))}return Qs(t),null;case 5:if(te(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Hs(t);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Qs(t),null}if(e=G.current,na(t))ea(t);else{switch(a=Gu(K.current),e){case 1:e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=a.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?a.createElement("select",{is:r.is}):a.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?a.createElement(n,{is:r.is}):a.createElement(n)}}e[Le]=t,e[Ie]=r;e:for(a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&27!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break e;for(;null===a.sibling;){if(null===a.return||a.return===t)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}t.stateNode=e;e:switch(Vu(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Hs(t)}}return Qs(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Hs(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(e=K.current,na(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(a=Qr))switch(a.tag){case 27:case 5:r=a.memoizedProps}e[Le]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Uu(e.nodeValue,n)))||Jr(t)}else(e=Gu(e).createTextNode(r))[Le]=t,t.stateNode=e}return Qs(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(a=na(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(i(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(i(317));a[Le]=t}else ra(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Qs(t),a=!1}else null!==Kr&&(Rc(Kr),Kr=null),a=!0;if(!a)return 256&t.flags?(za(t),t):(za(t),null)}if(za(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){a=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(a=r.alternate.memoizedState.cachePool.pool);var o=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(o=r.memoizedState.cachePool.pool),o!==a&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),Vs(t,t.updateQueue),Qs(t),null;case 4:return J(),null===e&&Pu(t.stateNode.containerInfo),Qs(t),null;case 10:return bl(t.type),Qs(t),null;case 19:if(q(Ra),null===(a=t.memoizedState))return Qs(t),null;if(r=!!(128&t.flags),null===(o=a.rendering))if(r)qs(a,!1);else{if(0!==cc||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(o=Ta(e))){for(t.flags|=128,qs(a,!1),e=o.updateQueue,t.updateQueue=e,Vs(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Ls(n,e),n=n.sibling;return Q(Ra,1&Ra.current|2),t.child}e=e.sibling}null!==a.tail&&le()>yc&&(t.flags|=128,r=!0,qs(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=Ta(o))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,Vs(t,e),qs(a,!0),null===a.tail&&"hidden"===a.tailMode&&!o.alternate&&!Yr)return Qs(t),null}else 2*le()-a.renderingStartTime>yc&&536870912!==n&&(t.flags|=128,r=!0,qs(a,!1),t.lanes=4194304);a.isBackwards?(o.sibling=t.child,t.child=o):(null!==(e=a.last)?e.sibling=o:t.child=o,a.last=o)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=le(),t.sibling=null,e=Ra.current,Q(Ra,r?1&e|2:1&e),t):(Qs(t),null);case 22:case 23:return za(t),xa(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(Qs(t),6&t.subtreeFlags&&(t.flags|=8192)):Qs(t),null!==(n=t.updateQueue)&&Vs(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&q(Qa),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),bl(Ia),Qs(t),null;case 25:return null}throw Error(i(156,t.tag))}function Ys(e,t){switch(qr(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return bl(Ia),J(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return te(t),null;case 13:if(za(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));ra()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return q(Ra),null;case 4:return J(),null;case 10:return bl(t.type),null;case 22:case 23:return za(t),xa(),null!==e&&q(Qa),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return bl(Ia),null;default:return null}}function Ks(e,t){switch(qr(t),t.tag){case 3:bl(Ia),J();break;case 26:case 27:case 5:te(t);break;case 4:J();break;case 13:za(t);break;case 19:q(Ra);break;case 10:bl(t.type);break;case 22:case 23:za(t),xa(),null!==e&&q(Qa);break;case 24:bl(Ia)}}var Xs={getCacheForType:function(e){var t=kl(Ia),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},Zs="function"==typeof WeakMap?WeakMap:Map,Js=0,ec=null,tc=null,nc=0,rc=0,ac=null,oc=!1,ic=!1,lc=!1,sc=0,cc=0,uc=0,dc=0,fc=0,pc=0,hc=0,gc=null,mc=null,Ac=!1,bc=0,yc=1/0,_c=null,wc=null,vc=!1,Ec=null,kc=0,Sc=0,xc=null,Cc=0,Bc=null;function Oc(){return 2&Js&&0!==nc?nc&-nc:null!==O.T?0!==Ha?Ha:_u():Me()}function Nc(){0===pc&&(pc=536870912&nc&&!Yr?536870912:Be());var e=Ca.current;return null!==e&&(e.flags|=32),pc}function Pc(e,t,n){(e===ec&&2===rc||null!==e.cancelPendingCommit)&&(jc(e,0),Dc(e,nc,pc,!1)),Pe(e,n),2&Js&&e===ec||(e===ec&&(!(2&Js)&&(dc|=n),4===cc&&Dc(e,nc,pc,!1)),hu(e))}function zc(e,t,n){if(6&Js)throw Error(i(327));for(var r=!n&&!(60&t)&&!(t&e.expiredLanes)||xe(e,t),a=r?function(e,t){var n=Js;Js|=2;var r=Uc(),a=$c();ec!==e||nc!==t?(_c=null,yc=le()+500,jc(e,t)):ic=xe(e,t);e:for(;;)try{if(0!==rc&&null!==tc){t=tc;var o=ac;t:switch(rc){case 1:rc=0,ac=null,Yc(e,t,o,1);break;case 2:if(sa(o)){rc=0,ac=null,Gc(t);break}t=function(){2===rc&&ec===e&&(rc=7),hu(e)},o.then(t,t);break e;case 3:rc=7;break e;case 4:rc=5;break e;case 7:sa(o)?(rc=0,ac=null,Gc(t)):(rc=0,ac=null,Yc(e,t,o,7));break;case 5:var l=null;switch(tc.tag){case 26:l=tc.memoizedState;case 5:case 27:var s=tc;if(!l||Bd(l)){rc=0,ac=null;var c=s.sibling;if(null!==c)tc=c;else{var u=s.return;null!==u?(tc=u,Kc(u)):tc=null}break t}}rc=0,ac=null,Yc(e,t,o,5);break;case 6:rc=0,ac=null,Yc(e,t,o,6);break;case 8:Ic(),cc=6;break e;default:throw Error(i(462))}}qc();break}catch(t){Fc(e,t)}return ml=gl=null,O.H=r,O.A=a,Js=n,null!==tc?0:(ec=null,nc=0,Sr(),cc)}(e,t):Wc(e,t,!0),o=r;;){if(0===a){ic&&!r&&Dc(e,t,0,!1);break}if(6===a)Dc(e,t,0,!oc);else{if(n=e.current.alternate,o&&!Mc(n)){a=Wc(e,t,!1),o=!1;continue}if(2===a){if(o=t,e.errorRecoveryDisabledLanes&o)var l=0;else l=0!=(l=-536870913&e.pendingLanes)?l:536870912&l?536870912:0;if(0!==l){t=l;e:{var s=e;a=gc;var c=s.current.memoizedState.isDehydrated;if(c&&(jc(s,l).flags|=256),2!==(l=Wc(s,l,!1))){if(lc&&!c){s.errorRecoveryDisabledLanes|=o,dc|=o,a=4;break e}o=mc,mc=a,null!==o&&Rc(o)}a=l}if(o=!1,2!==a)continue}}if(1===a){jc(e,0),Dc(e,t,0,!0);break}e:{switch(r=e,a){case 0:case 1:throw Error(i(345));case 4:if((4194176&t)===t){Dc(r,t,pc,!oc);break e}break;case 2:mc=null;break;case 3:case 5:break;default:throw Error(i(329))}if(r.finishedWork=n,r.finishedLanes=t,(62914560&t)===t&&10<(o=bc+300-le())){if(Dc(r,t,pc,!oc),0!==Se(r,0))break e;r.timeoutHandle=Ju(Tc.bind(null,r,n,mc,_c,Ac,t,pc,dc,hc,oc,2,-0,0),o)}else Tc(r,n,mc,_c,Ac,t,pc,dc,hc,oc,0,-0,0)}}break}hu(e)}function Rc(e){null===mc?mc=e:mc.push.apply(mc,e)}function Tc(e,t,n,r,a,o,l,s,c,u,d,f,p){var h=t.subtreeFlags;if((8192&h||!(16785408&~h))&&(Od={stylesheets:null,count:0,unsuspend:Nd},Cs(t),null!==(t=function(){if(null===Od)throw Error(i(475));var e=Od;return e.stylesheets&&0===e.count&&Rd(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&Rd(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=t(Zc.bind(null,e,n,r,a,l,s,c,1,f,p)),void Dc(e,o,l,!u);Zc(e,n,r,a,l,s,c)}function Mc(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!Qn(o(),a))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Dc(e,t,n,r){t&=~fc,t&=~dc,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var a=t;0<a;){var o=31-ye(a),i=1<<o;r[o]=-1,a&=~i}0!==n&&ze(e,n,t)}function Lc(){return!!(6&Js)||(gu(0,!1),!1)}function Ic(){if(null!==tc){if(0===rc)var e=tc.return;else ml=gl=null,Ao(e=tc),pa=null,ha=0,e=tc;for(;null!==e;)Ks(e.alternate,e),e=e.return;tc=null}}function jc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,ed(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Ic(),ec=e,tc=n=Ds(e.current,null),nc=t,rc=0,ac=null,oc=!1,ic=xe(e,t),lc=!1,hc=pc=fc=dc=uc=cc=0,mc=gc=null,Ac=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var a=31-ye(r),o=1<<a;t|=e[a],r&=~o}return sc=t,Sr(),n}function Fc(e,t){Za=null,O.H=ki,t===oa?(t=fa(),rc=3):t===ia?(t=fa(),rc=4):rc=t===$i?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,ac=t,null===tc&&(cc=1,Li(e,Rr(t,e.current)))}function Uc(){var e=O.H;return O.H=ki,null===e?ki:e}function $c(){var e=O.A;return O.A=Xs,e}function Hc(){cc=4,oc||(4194176&nc)!==nc&&null!==Ca.current||(ic=!0),!(134217727&uc)&&!(134217727&dc)||null===ec||Dc(ec,nc,pc,!1)}function Wc(e,t,n){var r=Js;Js|=2;var a=Uc(),o=$c();ec===e&&nc===t||(_c=null,jc(e,t)),t=!1;var i=cc;e:for(;;)try{if(0!==rc&&null!==tc){var l=tc,s=ac;switch(rc){case 8:Ic(),i=6;break e;case 3:case 2:case 6:null===Ca.current&&(t=!0);var c=rc;if(rc=0,ac=null,Yc(e,l,s,c),n&&ic){i=0;break e}break;default:c=rc,rc=0,ac=null,Yc(e,l,s,c)}}Vc(),i=cc;break}catch(t){Fc(e,t)}return t&&e.shellSuspendCounter++,ml=gl=null,Js=r,O.H=a,O.A=o,null===tc&&(ec=null,nc=0,Sr()),i}function Vc(){for(;null!==tc;)Qc(tc)}function qc(){for(;null!==tc&&!oe();)Qc(tc)}function Qc(e){var t=pl(e.alternate,e,sc);e.memoizedProps=e.pendingProps,null===t?Kc(e):tc=t}function Gc(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Zi(n,t,t.pendingProps,t.type,void 0,nc);break;case 11:t=Zi(n,t,t.pendingProps,t.type.render,t.ref,nc);break;case 5:Ao(t);default:Ks(n,t),t=pl(n,t=tc=Ls(t,sc),sc)}e.memoizedProps=e.pendingProps,null===t?Kc(e):tc=t}function Yc(e,t,n,r){ml=gl=null,Ao(t),pa=null,ha=0;var a=t.return;try{if(function(e,t,n,r,a){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&wl(t,n,a,!0),null!==(n=Ca.current)){switch(n.tag){case 13:return null===Ba?Hc():null===n.alternate&&0===cc&&(cc=3),n.flags&=-257,n.flags|=65536,n.lanes=a,r===la?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),ru(e,r,a)),!1;case 22:return n.flags|=65536,r===la?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),ru(e,r,a)),!1}throw Error(i(435,n.tag))}return ru(e,r,a),Hc(),!1}if(Yr)return null!==(t=Ca.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=a,r!==Zr&&aa(Rr(e=Error(i(422),{cause:r}),n))):(r!==Zr&&aa(Rr(t=Error(i(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,a&=-a,e.lanes|=a,r=Rr(r,n),Rl(e,a=ji(e.stateNode,r,a)),4!==cc&&(cc=2)),!1;var o=Error(i(520),{cause:r});if(o=Rr(o,n),null===gc?gc=[o]:gc.push(o),4!==cc&&(cc=2),null===t)return!0;r=Rr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=a&-a,n.lanes|=e,Rl(n,e=ji(n.stateNode,r,e)),!1;case 1:if(t=n.type,o=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===o||"function"!=typeof o.componentDidCatch||null!==wc&&wc.has(o))))return n.flags|=65536,a&=-a,n.lanes|=a,Ui(a=Fi(a),e,n,r),Rl(n,a),!1}n=n.return}while(null!==n);return!1}(e,a,t,n,nc))return cc=1,Li(e,Rr(n,e.current)),void(tc=null)}catch(t){if(null!==a)throw tc=a,t;return cc=1,Li(e,Rr(n,e.current)),void(tc=null)}32768&t.flags?(Yr||1===r?e=!0:ic||536870912&nc?e=!1:(oc=e=!0,(2===r||3===r||6===r)&&null!==(r=Ca.current)&&13===r.tag&&(r.flags|=16384)),Xc(t,e)):Kc(t)}function Kc(e){var t=e;do{if(32768&t.flags)return void Xc(t,oc);e=t.return;var n=Gs(t.alternate,t,sc);if(null!==n)return void(tc=n);if(null!==(t=t.sibling))return void(tc=t);tc=t=e}while(null!==t);0===cc&&(cc=5)}function Xc(e,t){do{var n=Ys(e.alternate,e);if(null!==n)return n.flags&=32767,void(tc=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(tc=e);tc=e=n}while(null!==e);cc=6,tc=null}function Zc(e,t,n,r,a,o,l,s,c,u){var d=O.T,f=U.p;try{U.p=2,O.T=null,function(e,t,n,r,a,o,l,s){do{eu()}while(null!==Ec);if(6&Js)throw Error(i(327));var c=e.finishedWork;if(r=e.finishedLanes,null===c)return null;if(e.finishedWork=null,e.finishedLanes=0,c===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0,e.cancelPendingCommit=null;var u=c.lanes|c.childLanes;if(function(e,t,n,r,a,o){var i=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var l=e.entanglements,s=e.expirationTimes,c=e.hiddenUpdates;for(n=i&~n;0<n;){var u=31-ye(n),d=1<<u;l[u]=0,s[u]=-1;var f=c[u];if(null!==f)for(c[u]=null,u=0;u<f.length;u++){var p=f[u];null!==p&&(p.lane&=-536870913)}n&=~d}0!==r&&ze(e,r,0),0!==o&&0===a&&0!==e.tag&&(e.suspendedLanes|=o&~(i&~t))}(e,r,u|=kr,o,l,s),e===ec&&(tc=ec=null,nc=0),!(10256&c.subtreeFlags)&&!(10256&c.flags)||vc||(vc=!0,Sc=u,xc=n,re(de,(function(){return eu(),null}))),n=!!(15990&c.flags),15990&c.subtreeFlags||n?(n=O.T,O.T=null,o=U.p,U.p=2,l=Js,Js|=4,function(e,t){if(e=e.containerInfo,qu=Ud,Jn(e=Zn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch(e){n=null;break e}var l=0,s=-1,c=-1,u=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==a&&3!==f.nodeType||(s=l+a),f!==o||0!==r&&3!==f.nodeType||(c=l+r),3===f.nodeType&&(l+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++u===a&&(s=l),p===o&&++d===r&&(c=l),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===s||-1===c?null:{start:s,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(Qu={focusedElem:e,selectionRange:n},Ud=!1,ts=t;null!==ts;)if(e=(t=ts).child,1028&t.subtreeFlags&&null!==e)e.return=t,ts=e;else for(;null!==ts;){switch(o=(t=ts).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==o){e=void 0,n=t,a=o.memoizedProps,o=o.memoizedState,r=n.stateNode;try{var g=zi(n.type,a,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(g,o),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){nu(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))od(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":od(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(i(163))}if(null!==(e=t.sibling)){e.return=t.return,ts=e;break}ts=t.return}g=ns,ns=!1}(e,c),ps(c,e),er(Qu,e.containerInfo),Ud=!!qu,Qu=qu=null,e.current=c,rs(e,c.alternate,c),ie(),Js=l,U.p=o,O.T=n):e.current=c,vc?(vc=!1,Ec=e,kc=r):Jc(e,u),0===(u=e.pendingLanes)&&(wc=null),function(e){if(Ae&&"function"==typeof Ae.onCommitFiberRoot)try{Ae.onCommitFiberRoot(me,e,void 0,!(128&~e.current.flags))}catch(e){}}(c.stateNode),hu(e),null!==t)for(a=e.onRecoverableError,c=0;c<t.length;c++)a((u=t[c]).value,{componentStack:u.stack});!!(3&kc)&&eu(),u=e.pendingLanes,4194218&r&&42&u?e===Bc?Cc++:(Cc=0,Bc=e):Cc=0,gu(0,!1)}(e,t,n,r,f,a,o,l)}finally{O.T=d,U.p=f}}function Jc(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Fa(t))}function eu(){if(null!==Ec){var e=Ec,t=Sc;Sc=0;var n=Te(kc),r=O.T,a=U.p;try{if(U.p=32>n?32:n,O.T=null,null===Ec)var o=!1;else{n=xc,xc=null;var l=Ec,s=kc;if(Ec=null,kc=0,6&Js)throw Error(i(331));var c=Js;if(Js|=4,Ns(l.current),vs(l,l.current,s,n),Js=c,gu(0,!1),Ae&&"function"==typeof Ae.onPostCommitFiberRoot)try{Ae.onPostCommitFiberRoot(me,l)}catch(e){}o=!0}return o}finally{U.p=a,O.T=r,Jc(e,t)}}return!1}function tu(e,t,n){t=Rr(n,t),null!==(e=Pl(e,t=ji(e.stateNode,t,2),2))&&(Pe(e,2),hu(e))}function nu(e,t,n){if(3===e.tag)tu(e,e,n);else for(;null!==t;){if(3===t.tag){tu(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===wc||!wc.has(r))){e=Rr(n,e),null!==(r=Pl(t,n=Fi(2),2))&&(Ui(n,r,t,e),Pe(r,2),hu(r));break}}t=t.return}}function ru(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new Zs;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(lc=!0,a.add(n),e=au.bind(null,e,t,n),t.then(e,e))}function au(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,ec===e&&(nc&n)===n&&(4===cc||3===cc&&(62914560&nc)===nc&&300>le()-bc?!(2&Js)&&jc(e,0):fc|=n,hc===nc&&(hc=0)),hu(e)}function ou(e,t){0===t&&(t=Oe()),null!==(e=Br(e,t))&&(Pe(e,t),hu(e))}function iu(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),ou(e,n)}function lu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(i(314))}null!==r&&r.delete(t),ou(e,n)}var su=null,cu=null,uu=!1,du=!1,fu=!1,pu=0;function hu(e){var t;e!==cu&&null===e.next&&(null===cu?su=cu=e:cu=cu.next=e),du=!0,uu||(uu=!0,t=mu,nd((function(){6&Js?re(ce,t):t()})))}function gu(e,t){if(!fu&&du){fu=!0;do{for(var n=!1,r=su;null!==r;){if(!t)if(0!==e){var a=r.pendingLanes;if(0===a)var o=0;else{var i=r.suspendedLanes,l=r.pingedLanes;o=(1<<31-ye(42|e)+1)-1,o=201326677&(o&=a&~(i&~l))?201326677&o|1:o?2|o:0}0!==o&&(n=!0,yu(r,o))}else o=nc,!(3&(o=Se(r,r===ec?o:0)))||xe(r,o)||(n=!0,yu(r,o));r=r.next}}while(n);fu=!1}}function mu(){du=uu=!1;var e,t=0;0!==pu&&(((e=window.event)&&"popstate"===e.type?e!==Zu&&(Zu=e,!0):(Zu=null,!1))&&(t=pu),pu=0);for(var n=le(),r=null,a=su;null!==a;){var o=a.next,i=Au(a,n);0===i?(a.next=null,null===r?su=o:r.next=o,null===o&&(cu=r)):(r=a,(0!==t||3&i)&&(du=!0)),a=o}gu(t,!1)}function Au(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=-62914561&e.pendingLanes;0<o;){var i=31-ye(o),l=1<<i,s=a[i];-1===s?l&n&&!(l&r)||(a[i]=Ce(l,t)):s<=t&&(e.expiredLanes|=l),o&=~l}if(n=nc,n=Se(e,e===(t=ec)?n:0),r=e.callbackNode,0===n||e===t&&2===rc||null!==e.cancelPendingCommit)return null!==r&&null!==r&&ae(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||xe(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&ae(r),Te(n)){case 2:case 8:n=ue;break;case 32:default:n=de;break;case 268435456:n=pe}return r=bu.bind(null,e),n=re(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&ae(r),e.callbackPriority=2,e.callbackNode=null,2}function bu(e,t){var n=e.callbackNode;if(eu()&&e.callbackNode!==n)return null;var r=nc;return 0===(r=Se(e,e===ec?r:0))?null:(zc(e,r,t),Au(e,le()),null!=e.callbackNode&&e.callbackNode===n?bu.bind(null,e):null)}function yu(e,t){if(eu())return null;zc(e,t,!0)}function _u(){return 0===pu&&(pu=Be()),pu}function wu(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Bt(""+e)}function vu(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Eu=0;Eu<_r.length;Eu++){var ku=_r[Eu];wr(ku.toLowerCase(),"on"+(ku[0].toUpperCase()+ku.slice(1)))}wr(fr,"onAnimationEnd"),wr(pr,"onAnimationIteration"),wr(hr,"onAnimationStart"),wr("dblclick","onDoubleClick"),wr("focusin","onFocus"),wr("focusout","onBlur"),wr(gr,"onTransitionRun"),wr(mr,"onTransitionStart"),wr(Ar,"onTransitionCancel"),wr(br,"onTransitionEnd"),et("onMouseEnter",["mouseout","mouseover"]),et("onMouseLeave",["mouseout","mouseover"]),et("onPointerEnter",["pointerout","pointerover"]),et("onPointerLeave",["pointerout","pointerover"]),Je("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Je("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Je("onBeforeInput",["compositionend","keypress","textInput","paste"]),Je("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Je("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Je("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Su="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),xu=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Su));function Cu(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,c=l.currentTarget;if(l=l.listener,s!==o&&a.isPropagationStopped())break e;o=l,a.currentTarget=c;try{o(a)}catch(e){Ri(e)}a.currentTarget=null,o=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,c=l.currentTarget,l=l.listener,s!==o&&a.isPropagationStopped())break e;o=l,a.currentTarget=c;try{o(a)}catch(e){Ri(e)}a.currentTarget=null,o=s}}}}function Bu(e,t){var n=t[Fe];void 0===n&&(n=t[Fe]=new Set);var r=e+"__bubble";n.has(r)||(zu(t,e,2,!1),n.add(r))}function Ou(e,t,n){var r=0;t&&(r|=4),zu(n,e,r,t)}var Nu="_reactListening"+Math.random().toString(36).slice(2);function Pu(e){if(!e[Nu]){e[Nu]=!0,Xe.forEach((function(t){"selectionchange"!==t&&(xu.has(t)||Ou(t,!1,e),Ou(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Nu]||(t[Nu]=!0,Ou("selectionchange",!1,t))}}function zu(e,t,n,r){switch(Gd(t)){case 2:var a=$d;break;case 8:a=Hd;break;default:a=Wd}n=a.bind(null,t,n,e),a=void 0,!Lt||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Ru(e,t,n,r,a){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=qe(l)))return;if(5===(s=i.tag)||6===s||26===s||27===s){r=o=i;continue e}l=l.parentNode}}r=r.return}Mt((function(){var r=o,a=Nt(n),i=[];e:{var l=yr.get(e);if(void 0!==l){var s=Xt,c=e;switch(e){case"keypress":if(0===Ht(n))break e;case"keydown":case"keyup":s=pn;break;case"focusin":c="focus",s=rn;break;case"focusout":c="blur",s=rn;break;case"beforeblur":case"afterblur":s=rn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=nn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=gn;break;case fr:case pr:case hr:s=an;break;case br:s=mn;break;case"scroll":case"scrollend":s=Jt;break;case"wheel":s=An;break;case"copy":case"cut":case"paste":s=on;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=hn;break;case"toggle":case"beforetoggle":s=bn}var u=!!(4&t),d=!u&&("scroll"===e||"scrollend"===e),f=u?null!==l?l+"Capture":null:l;u=[];for(var p,h=r;null!==h;){var g=h;if(p=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===p||null===f||null!=(g=Dt(h,f))&&u.push(Tu(h,g,p)),d)break;h=h.return}0<u.length&&(l=new s(l,c,null,n,a),i.push({event:l,listeners:u}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===Ot||!(c=n.relatedTarget||n.fromElement)||!qe(c)&&!c[je])&&(s||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(c=(c=n.relatedTarget||n.toElement)?qe(c):null)&&(d=D(c),u=c.tag,c!==d||5!==u&&27!==u&&6!==u)&&(c=null)):(s=null,c=r),s!==c)){if(u=tn,g="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(u=hn,g="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==s?l:Ge(s),p=null==c?l:Ge(c),(l=new u(g,h+"leave",s,n,a)).target=d,l.relatedTarget=p,g=null,qe(a)===r&&((u=new u(f,h+"enter",c,n,a)).target=p,u.relatedTarget=d,g=u),d=g,s&&c)e:{for(f=c,h=0,p=u=s;p;p=Du(p))h++;for(p=0,g=f;g;g=Du(g))p++;for(;0<h-p;)u=Du(u),h--;for(;0<p-h;)f=Du(f),p--;for(;h--;){if(u===f||null!==f&&u===f.alternate)break e;u=Du(u),f=Du(f)}u=null}else u=null;null!==s&&Lu(i,l,s,u,!1),null!==c&&null!==d&&Lu(i,d,c,u,!0)}if("select"===(s=(l=r?Ge(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var m=Dn;else if(Nn(l))if(Ln)m=qn;else{m=Wn;var A=Hn}else!(s=l.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==l.type&&"radio"!==l.type?r&&St(r.elementType)&&(m=Dn):m=Vn;switch(m&&(m=m(e,r))?Pn(i,m,n,a):(A&&A(e,l,r),"focusout"===e&&r&&"number"===l.type&&null!=r.memoizedProps.value&&At(l,"number",l.value)),A=r?Ge(r):window,e){case"focusin":(Nn(A)||"true"===A.contentEditable)&&(nr=A,rr=r,ar=null);break;case"focusout":ar=rr=nr=null;break;case"mousedown":or=!0;break;case"contextmenu":case"mouseup":case"dragend":or=!1,ir(i,n,a);break;case"selectionchange":if(tr)break;case"keydown":case"keyup":ir(i,n,a)}var b;if(_n)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Bn?xn(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(En&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==y?"onCompositionEnd"===y&&Bn&&(b=$t()):(Ft="value"in(jt=a)?jt.value:jt.textContent,Bn=!0)),0<(A=Mu(r,y)).length&&(y=new ln(y,e,null,n,a),i.push({event:y,listeners:A}),(b||null!==(b=Cn(n)))&&(y.data=b))),(b=vn?function(e,t){switch(e){case"compositionend":return Cn(t);case"keypress":return 32!==t.which?null:(Sn=!0,kn);case"textInput":return(e=t.data)===kn&&Sn?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!_n&&xn(e,t)?(e=$t(),Ut=Ft=jt=null,Bn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return En&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(y=Mu(r,"onBeforeInput")).length&&(A=new ln("onBeforeInput","beforeinput",null,n,a),i.push({event:A,listeners:y}),A.data=b),function(e,t,n,r,a){if("submit"===t&&n&&n.stateNode===a){var o=wu((a[Ie]||null).action),i=r.submitter;i&&null!==(t=(t=i[Ie]||null)?wu(t.formAction):i.getAttribute("formAction"))&&(o=t,i=null);var l=new Xt("action","action",null,r,a);e.push({event:l,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==pu){var e=i?vu(a,i):new FormData(a);ui(n,{pending:!0,data:e,method:a.method,action:o},null,e)}}else"function"==typeof o&&(l.preventDefault(),e=i?vu(a,i):new FormData(a),ui(n,{pending:!0,data:e,method:a.method,action:o},o,e))},currentTarget:a}]})}}(i,e,r,n,a)}Cu(i,t)}))}function Tu(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Mu(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5!==(a=a.tag)&&26!==a&&27!==a||null===o||(null!=(a=Dt(e,n))&&r.unshift(Tu(e,a,o)),null!=(a=Dt(e,t))&&r.push(Tu(e,a,o))),e=e.return}return r}function Du(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Lu(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,c=l.stateNode;if(l=l.tag,null!==s&&s===r)break;5!==l&&26!==l&&27!==l||null===c||(s=c,a?null!=(c=Dt(n,o))&&i.unshift(Tu(n,c,s)):a||null!=(c=Dt(n,o))&&i.push(Tu(n,c,s))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Iu=/\r\n?/g,ju=/\u0000|\uFFFD/g;function Fu(e){return("string"==typeof e?e:""+e).replace(Iu,"\n").replace(ju,"")}function Uu(e,t){return t=Fu(t),Fu(e)===t}function $u(){}function Hu(e,t,n,r,a,o){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||wt(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&wt(e,""+r);break;case"className":it(e,"class",r);break;case"tabIndex":it(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":it(e,n,r);break;case"style":kt(e,r,o);break;case"data":if("object"!==t){it(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Bt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof o&&("formAction"===n?("input"!==t&&Hu(e,t,"name",a.name,a,null),Hu(e,t,"formEncType",a.formEncType,a,null),Hu(e,t,"formMethod",a.formMethod,a,null),Hu(e,t,"formTarget",a.formTarget,a,null)):(Hu(e,t,"encType",a.encType,a,null),Hu(e,t,"method",a.method,a,null),Hu(e,t,"target",a.target,a,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Bt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=$u);break;case"onScroll":null!=r&&Bu("scroll",e);break;case"onScrollEnd":null!=r&&Bu("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(i(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Bt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Bu("beforetoggle",e),Bu("toggle",e),ot(e,"popover",r);break;case"xlinkActuate":lt(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":lt(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":lt(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":lt(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":lt(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":lt(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":lt(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":lt(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":lt(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":ot(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&ot(e,n=xt.get(n)||n,r)}}function Wu(e,t,n,r,a,o){switch(n){case"style":kt(e,r,o);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(i(60));e.innerHTML=n}}break;case"children":"string"==typeof r?wt(e,r):("number"==typeof r||"bigint"==typeof r)&&wt(e,""+r);break;case"onScroll":null!=r&&Bu("scroll",e);break;case"onScrollEnd":null!=r&&Bu("scrollend",e);break;case"onClick":null!=r&&(e.onclick=$u);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Ze.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(a=n.endsWith("Capture"),t=n.slice(2,a?n.length-7:void 0),"function"==typeof(o=null!=(o=e[Ie]||null)?o[n]:null)&&e.removeEventListener(t,o,a),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):ot(e,n,r):("function"!=typeof o&&null!==o&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,a)))}}function Vu(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Bu("error",e),Bu("load",e);var r,a=!1,o=!1;for(r in n)if(n.hasOwnProperty(r)){var l=n[r];if(null!=l)switch(r){case"src":a=!0;break;case"srcSet":o=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(i(137,t));default:Hu(e,t,r,l,n,null)}}return o&&Hu(e,t,"srcSet",n.srcSet,n,null),void(a&&Hu(e,t,"src",n.src,n,null));case"input":Bu("invalid",e);var s=r=l=o=null,c=null,u=null;for(a in n)if(n.hasOwnProperty(a)){var d=n[a];if(null!=d)switch(a){case"name":o=d;break;case"type":l=d;break;case"checked":c=d;break;case"defaultChecked":u=d;break;case"value":r=d;break;case"defaultValue":s=d;break;case"children":case"dangerouslySetInnerHTML":if(null!=d)throw Error(i(137,t));break;default:Hu(e,t,a,d,n,null)}}return mt(e,r,s,c,u,l,o,!1),void ut(e);case"select":for(o in Bu("invalid",e),a=l=r=null,n)if(n.hasOwnProperty(o)&&null!=(s=n[o]))switch(o){case"value":r=s;break;case"defaultValue":l=s;break;case"multiple":a=s;default:Hu(e,t,o,s,n,null)}return t=r,n=l,e.multiple=!!a,void(null!=t?bt(e,!!a,t,!1):null!=n&&bt(e,!!a,n,!0));case"textarea":for(l in Bu("invalid",e),r=o=a=null,n)if(n.hasOwnProperty(l)&&null!=(s=n[l]))switch(l){case"value":a=s;break;case"defaultValue":o=s;break;case"children":r=s;break;case"dangerouslySetInnerHTML":if(null!=s)throw Error(i(91));break;default:Hu(e,t,l,s,n,null)}return _t(e,a,o,r),void ut(e);case"option":for(c in n)n.hasOwnProperty(c)&&null!=(a=n[c])&&("selected"===c?e.selected=a&&"function"!=typeof a&&"symbol"!=typeof a:Hu(e,t,c,a,n,null));return;case"dialog":Bu("cancel",e),Bu("close",e);break;case"iframe":case"object":Bu("load",e);break;case"video":case"audio":for(a=0;a<Su.length;a++)Bu(Su[a],e);break;case"image":Bu("error",e),Bu("load",e);break;case"details":Bu("toggle",e);break;case"embed":case"source":case"link":Bu("error",e),Bu("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(u in n)if(n.hasOwnProperty(u)&&null!=(a=n[u]))switch(u){case"children":case"dangerouslySetInnerHTML":throw Error(i(137,t));default:Hu(e,t,u,a,n,null)}return;default:if(St(t)){for(d in n)n.hasOwnProperty(d)&&void 0!==(a=n[d])&&Wu(e,t,d,a,n,void 0);return}}for(s in n)n.hasOwnProperty(s)&&null!=(a=n[s])&&Hu(e,t,s,a,n,null)}var qu=null,Qu=null;function Gu(e){return 9===e.nodeType?e:e.ownerDocument}function Yu(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function Ku(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function Xu(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Zu=null,Ju="function"==typeof setTimeout?setTimeout:void 0,ed="function"==typeof clearTimeout?clearTimeout:void 0,td="function"==typeof Promise?Promise:void 0,nd="function"==typeof queueMicrotask?queueMicrotask:void 0!==td?function(e){return td.resolve(null).then(e).catch(rd)}:Ju;function rd(e){setTimeout((function(){throw e}))}function ad(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void pf(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);pf(t)}function od(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":od(n),Ve(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function id(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}function ld(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function sd(e,t,n){switch(t=Gu(n),e){case"html":if(!(e=t.documentElement))throw Error(i(452));return e;case"head":if(!(e=t.head))throw Error(i(453));return e;case"body":if(!(e=t.body))throw Error(i(454));return e;default:throw Error(i(451))}}var cd=new Map,ud=new Set;function dd(e){return"function"==typeof e.getRootNode?e.getRootNode():e.ownerDocument}var fd=U.d;U.d={f:function(){var e=fd.f(),t=Lc();return e||t},r:function(e){var t=Qe(e);null!==t&&5===t.tag&&"form"===t.type?fi(t):fd.r(e)},D:function(e){fd.D(e),hd("dns-prefetch",e,null)},C:function(e,t){fd.C(e,t),hd("preconnect",e,t)},L:function(e,t,n){fd.L(e,t,n);var r=pd;if(r&&e&&t){var a='link[rel="preload"][as="'+ht(t)+'"]';"image"===t&&n&&n.imageSrcSet?(a+='[imagesrcset="'+ht(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(a+='[imagesizes="'+ht(n.imageSizes)+'"]')):a+='[href="'+ht(e)+'"]';var o=a;switch(t){case"style":o=md(e);break;case"script":o=yd(e)}cd.has(o)||(e=N({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),cd.set(o,e),null!==r.querySelector(a)||"style"===t&&r.querySelector(Ad(o))||"script"===t&&r.querySelector(_d(o))||(Vu(t=r.createElement("link"),"link",e),Ke(t),r.head.appendChild(t)))}},m:function(e,t){fd.m(e,t);var n=pd;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",a='link[rel="modulepreload"][as="'+ht(r)+'"][href="'+ht(e)+'"]',o=a;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":o=yd(e)}if(!cd.has(o)&&(e=N({rel:"modulepreload",href:e},t),cd.set(o,e),null===n.querySelector(a))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(_d(o)))return}Vu(r=n.createElement("link"),"link",e),Ke(r),n.head.appendChild(r)}}},X:function(e,t){fd.X(e,t);var n=pd;if(n&&e){var r=Ye(n).hoistableScripts,a=yd(e),o=r.get(a);o||((o=n.querySelector(_d(a)))||(e=N({src:e,async:!0},t),(t=cd.get(a))&&kd(e,t),Ke(o=n.createElement("script")),Vu(o,"link",e),n.head.appendChild(o)),o={type:"script",instance:o,count:1,state:null},r.set(a,o))}},S:function(e,t,n){fd.S(e,t,n);var r=pd;if(r&&e){var a=Ye(r).hoistableStyles,o=md(e);t=t||"default";var i=a.get(o);if(!i){var l={loading:0,preload:null};if(i=r.querySelector(Ad(o)))l.loading=5;else{e=N({rel:"stylesheet",href:e,"data-precedence":t},n),(n=cd.get(o))&&Ed(e,n);var s=i=r.createElement("link");Ke(s),Vu(s,"link",e),s._p=new Promise((function(e,t){s.onload=e,s.onerror=t})),s.addEventListener("load",(function(){l.loading|=1})),s.addEventListener("error",(function(){l.loading|=2})),l.loading|=4,vd(i,t,r)}i={type:"stylesheet",instance:i,count:1,state:l},a.set(o,i)}}},M:function(e,t){fd.M(e,t);var n=pd;if(n&&e){var r=Ye(n).hoistableScripts,a=yd(e),o=r.get(a);o||((o=n.querySelector(_d(a)))||(e=N({src:e,async:!0,type:"module"},t),(t=cd.get(a))&&kd(e,t),Ke(o=n.createElement("script")),Vu(o,"link",e),n.head.appendChild(o)),o={type:"script",instance:o,count:1,state:null},r.set(a,o))}}};var pd="undefined"==typeof document?null:document;function hd(e,t,n){var r=pd;if(r&&"string"==typeof t&&t){var a=ht(t);a='link[rel="'+e+'"][href="'+a+'"]',"string"==typeof n&&(a+='[crossorigin="'+n+'"]'),ud.has(a)||(ud.add(a),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(a)&&(Vu(t=r.createElement("link"),"link",e),Ke(t),r.head.appendChild(t)))}}function gd(e,t,n,r){var a,o,l,s,c=(c=K.current)?dd(c):null;if(!c)throw Error(i(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=md(n.href),(r=(n=Ye(c).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=md(n.href);var u=Ye(c).hoistableStyles,d=u.get(e);if(d||(c=c.ownerDocument||c,d={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},u.set(e,d),(u=c.querySelector(Ad(e)))&&!u._p&&(d.instance=u,d.state.loading=5),cd.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},cd.set(e,n),u||(a=c,o=e,l=n,s=d.state,a.querySelector('link[rel="preload"][as="style"]['+o+"]")?s.loading=1:(o=a.createElement("link"),s.preload=o,o.addEventListener("load",(function(){return s.loading|=1})),o.addEventListener("error",(function(){return s.loading|=2})),Vu(o,"link",l),Ke(o),a.head.appendChild(o))))),t&&null===r)throw Error(i(528,""));return d}if(t&&null!==r)throw Error(i(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=yd(n),(r=(n=Ye(c).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(i(444,e))}}function md(e){return'href="'+ht(e)+'"'}function Ad(e){return'link[rel="stylesheet"]['+e+"]"}function bd(e){return N({},e,{"data-precedence":e.precedence,precedence:null})}function yd(e){return'[src="'+ht(e)+'"]'}function _d(e){return"script[async]"+e}function wd(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+ht(n.href)+'"]');if(r)return t.instance=r,Ke(r),r;var a=N({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return Ke(r=(e.ownerDocument||e).createElement("style")),Vu(r,"style",a),vd(r,n.precedence,e),t.instance=r;case"stylesheet":a=md(n.href);var o=e.querySelector(Ad(a));if(o)return t.state.loading|=4,t.instance=o,Ke(o),o;r=bd(n),(a=cd.get(a))&&Ed(r,a),Ke(o=(e.ownerDocument||e).createElement("link"));var l=o;return l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),Vu(o,"link",r),t.state.loading|=4,vd(o,n.precedence,e),t.instance=o;case"script":return o=yd(n.src),(a=e.querySelector(_d(o)))?(t.instance=a,Ke(a),a):(r=n,(a=cd.get(o))&&kd(r=N({},n),a),Ke(a=(e=e.ownerDocument||e).createElement("script")),Vu(a,"link",r),e.head.appendChild(a),t.instance=a);case"void":return null;default:throw Error(i(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,vd(r,n.precedence,e));return t.instance}function vd(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),a=r.length?r[r.length-1]:null,o=a,i=0;i<r.length;i++){var l=r[i];if(l.dataset.precedence===t)o=l;else if(o!==a)break}o?o.parentNode.insertBefore(e,o.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Ed(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function kd(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var Sd=null;function xd(e,t,n){if(null===Sd){var r=new Map,a=Sd=new Map;a.set(n,r)}else(r=(a=Sd).get(n))||(r=new Map,a.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),a=0;a<n.length;a++){var o=n[a];if(!(o[We]||o[Le]||"link"===e&&"stylesheet"===o.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==o.namespaceURI){var i=o.getAttribute(t)||"";i=e+i;var l=r.get(i);l?l.push(o):r.set(i,[o])}}return r}function Cd(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Bd(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Od=null;function Nd(){}function Pd(){if(this.count--,0===this.count)if(this.stylesheets)Rd(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var zd=null;function Rd(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,zd=new Map,t.forEach(Td,e),zd=null,Pd.call(e))}function Td(e,t){if(!(4&t.state.loading)){var n=zd.get(e);if(n)var r=n.get(null);else{n=new Map,zd.set(e,n);for(var a=e.querySelectorAll("link[data-precedence],style[data-precedence]"),o=0;o<a.length;o++){var i=a[o];"LINK"!==i.nodeName&&"not all"===i.getAttribute("media")||(n.set(i.dataset.precedence,i),r=i)}r&&n.set(null,r)}i=(a=t.instance).getAttribute("data-precedence"),(o=n.get(i)||r)===r&&n.set(null,a),n.set(i,a),this.count++,r=Pd.bind(this),a.addEventListener("load",r),a.addEventListener("error",r),o?o.parentNode.insertBefore(a,o.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(a,e.firstChild),t.state.loading|=4}}var Md={$$typeof:g,Provider:null,Consumer:null,_currentValue:$,_currentValue2:$,_threadCount:0};function Dd(e,t,n,r,a,o,i,l){this.tag=1,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Ne(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.finishedLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ne(0),this.hiddenUpdates=Ne(null),this.identifierPrefix=r,this.onUncaughtError=a,this.onCaughtError=o,this.onRecoverableError=i,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=l,this.incompleteTransitions=new Map}function Ld(e,t,n,r,a,o){a=function(e){return e?e=Pr:Pr}(a),null===r.context?r.context=a:r.pendingContext=a,(r=Nl(t)).payload={element:n},null!==(o=void 0===o?null:o)&&(r.callback=o),null!==(n=Pl(e,r,t))&&(Pc(n,0,t),zl(n,e,t))}function Id(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function jd(e,t){Id(e,t),(e=e.alternate)&&Id(e,t)}function Fd(e){if(13===e.tag){var t=Br(e,67108864);null!==t&&Pc(t,0,67108864),jd(e,67108864)}}var Ud=!0;function $d(e,t,n,r){var a=O.T;O.T=null;var o=U.p;try{U.p=2,Wd(e,t,n,r)}finally{U.p=o,O.T=a}}function Hd(e,t,n,r){var a=O.T;O.T=null;var o=U.p;try{U.p=8,Wd(e,t,n,r)}finally{U.p=o,O.T=a}}function Wd(e,t,n,r){if(Ud){var a=Vd(r);if(null===a)Ru(e,t,r,qd,n),rf(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Kd=af(Kd,e,t,n,r,a),!0;case"dragenter":return Xd=af(Xd,e,t,n,r,a),!0;case"mouseover":return Zd=af(Zd,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Jd.set(o,af(Jd.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,ef.set(o,af(ef.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(rf(e,r),4&t&&-1<nf.indexOf(e)){for(;null!==a;){var o=Qe(a);if(null!==o)switch(o.tag){case 3:if((o=o.stateNode).current.memoizedState.isDehydrated){var i=ke(o.pendingLanes);if(0!==i){var l=o;for(l.pendingLanes|=2,l.entangledLanes|=2;i;){var s=1<<31-ye(i);l.entanglements[1]|=s,i&=~s}hu(o),!(6&Js)&&(yc=le()+500,gu(0,!1))}}break;case 13:null!==(l=Br(o,2))&&Pc(l,0,2),Lc(),jd(o,2)}if(null===(o=Vd(r))&&Ru(e,t,r,qd,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Ru(e,t,r,null,n)}}function Vd(e){return Qd(e=Nt(e))}var qd=null;function Qd(e){if(qd=null,null!==(e=qe(e))){var t=D(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=L(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return qd=e,null}function Gd(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(se()){case ce:return 2;case ue:return 8;case de:case fe:return 32;case pe:return 268435456;default:return 32}default:return 32}}var Yd=!1,Kd=null,Xd=null,Zd=null,Jd=new Map,ef=new Map,tf=[],nf="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function rf(e,t){switch(e){case"focusin":case"focusout":Kd=null;break;case"dragenter":case"dragleave":Xd=null;break;case"mouseover":case"mouseout":Zd=null;break;case"pointerover":case"pointerout":Jd.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ef.delete(t.pointerId)}}function af(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=Qe(t))&&Fd(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function of(e){var t=qe(e.target);if(null!==t){var n=D(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=L(n)))return e.blockedOn=t,void function(e){var t=U.p;try{return U.p=e,function(){if(13===n.tag){var e=Oc(),t=Br(n,e);null!==t&&Pc(t,0,e),jd(n,e)}}()}finally{U.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function lf(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Vd(e.nativeEvent);if(null!==n)return null!==(t=Qe(n))&&Fd(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Ot=r,n.target.dispatchEvent(r),Ot=null,t.shift()}return!0}function sf(e,t,n){lf(e)&&n.delete(t)}function cf(){Yd=!1,null!==Kd&&lf(Kd)&&(Kd=null),null!==Xd&&lf(Xd)&&(Xd=null),null!==Zd&&lf(Zd)&&(Zd=null),Jd.forEach(sf),ef.forEach(sf)}function uf(e,t){e.blockedOn===t&&(e.blockedOn=null,Yd||(Yd=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,cf)))}var df=null;function ff(e){df!==e&&(df=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){df===e&&(df=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],a=e[t+2];if("function"!=typeof r){if(null===Qd(r||n))continue;break}var o=Qe(n);null!==o&&(e.splice(t,3),t-=3,ui(o,{pending:!0,data:a,method:n.method,action:r},r,a))}})))}function pf(e){function t(t){return uf(t,e)}null!==Kd&&uf(Kd,e),null!==Xd&&uf(Xd,e),null!==Zd&&uf(Zd,e),Jd.forEach(t),ef.forEach(t);for(var n=0;n<tf.length;n++){var r=tf[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<tf.length&&null===(n=tf[0]).blockedOn;)of(n),null===n.blockedOn&&tf.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var a=n[r],o=n[r+1],i=a[Ie]||null;if("function"==typeof o)i||ff(n);else if(i){var l=null;if(o&&o.hasAttribute("formAction")){if(a=o,i=o[Ie]||null)l=i.formAction;else if(null!==Qd(a))continue}else l=i.action;"function"==typeof l?n[r+1]=l:(n.splice(r,3),r-=3),ff(n)}}}function hf(e){this._internalRoot=e}function gf(e){this._internalRoot=e}gf.prototype.render=hf.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));Ld(t.current,Oc(),e,t,null,null)},gf.prototype.unmount=hf.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;0===e.tag&&eu(),Ld(e.current,2,null,e,null,null),Lc(),t[je]=null}},gf.prototype.unstable_scheduleHydration=function(e){if(e){var t=Me();e={blockedOn:null,target:e,priority:t};for(var n=0;n<tf.length&&0!==t&&t<tf[n].priority;n++);tf.splice(n,0,e),0===n&&of(e)}};var mf=a.version;if("19.0.0"!==mf)throw Error(i(527,mf,"19.0.0"));U.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=D(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return I(a),e;if(o===r)return I(a),t;o=o.sibling}throw Error(i(188))}if(n.return!==r.return)n=a,r=o;else{for(var l=!1,s=a.child;s;){if(s===n){l=!0,n=a,r=o;break}if(s===r){l=!0,r=a,n=o;break}s=s.sibling}if(!l){for(s=o.child;s;){if(s===n){l=!0,n=o,r=a;break}if(s===r){l=!0,r=o,n=a;break}s=s.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?j(e):null)?null:e.stateNode};var Af={bundleType:0,version:"19.0.0",rendererPackageName:"react-dom",currentDispatcherRef:O,findFiberByHostInstance:qe,reconcilerVersion:"19.0.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var bf=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!bf.isDisabled&&bf.supportsFiber)try{me=bf.inject(Af),Ae=bf}catch(e){}}t.createRoot=function(e,t){if(!(n=e)||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)throw Error(i(299));var n,r=!1,a="",o=Ti,l=Mi,s=Di;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(a=t.identifierPrefix),void 0!==t.onUncaughtError&&(o=t.onUncaughtError),void 0!==t.onCaughtError&&(l=t.onCaughtError),void 0!==t.onRecoverableError&&(s=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=function(e,t,n,r,a,o,i,l,s,c,u,d){return e=new Dd(e,t,n,i,l,s,c,d),t=1,!0===o&&(t|=24),o=Ts(3,null,null,t),e.current=o,o.stateNode=e,(t=ja()).refCount++,e.pooledCache=t,t.refCount++,o.memoizedState={element:r,isDehydrated:n,cache:t},Bl(o),e}(e,1,!1,null,0,r,a,o,l,s,0,null),e[je]=t.current,Pu(8===e.nodeType?e.parentNode:e),new hf(t)}},298:(e,t,n)=>{n.d(t,{Bv:()=>d,I8:()=>c,SN:()=>o,Xl:()=>s,Zn:()=>l,_P:()=>a,a$:()=>f,c4:()=>r,je:()=>u,up:()=>i});const r=Symbol.for("_am_meta"),a=Symbol.for("_am_trace"),o=Symbol.for("_am_objectId"),i=Symbol.for("_am_isProxy"),l=Symbol.for("_am_clearCache"),s=Symbol.for("_am_uint"),c=Symbol.for("_am_int"),u=Symbol.for("_am_f64"),d=Symbol.for("_am_counter"),f=Symbol.for("_am_text")},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),t.push(u))}},t}},316:(e,t,n)=>{n(651),n(740);var r=n(915);n(595),r.jz},338:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},477:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,s=e[l],c=l+1,u=e[c];if(0>o(s,n))c<a&&0>o(u,s)?(e[r]=u,e[c]=n,r=c):(e[r]=s,e[l]=n,r=l);else{if(!(c<a&&0>o(u,n)))break e;e[r]=u,e[c]=n,r=c}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var c=[],u=[],d=1,f=null,p=3,h=!1,g=!1,m=!1,A="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function _(e){for(var t=r(u);null!==t;){if(null===t.callback)a(u);else{if(!(t.startTime<=e))break;a(u),t.sortIndex=t.expirationTime,n(c,t)}t=r(u)}}function w(e){if(m=!1,_(e),!g)if(null!==r(c))g=!0,P();else{var t=r(u);null!==t&&z(w,t.startTime-e)}}var v,E=!1,k=-1,S=5,x=-1;function C(){return!(t.unstable_now()-x<S)}function B(){if(E){var e=t.unstable_now();x=e;var n=!0;try{e:{g=!1,m&&(m=!1,b(k),k=-1),h=!0;var o=p;try{t:{for(_(e),f=r(c);null!==f&&!(f.expirationTime>e&&C());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var l=i(f.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof l){f.callback=l,_(e),n=!0;break t}f===r(c)&&a(c),_(e)}else a(c);f=r(c)}if(null!==f)n=!0;else{var s=r(u);null!==s&&z(w,s.startTime-e),n=!1}}break e}finally{f=null,p=o,h=!1}n=void 0}}finally{n?v():E=!1}}}if("function"==typeof y)v=function(){y(B)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,N=O.port2;O.port1.onmessage=B,v=function(){N.postMessage(null)}}else v=function(){A(B,0)};function P(){E||(E=!0,v())}function z(e,n){k=A((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){g||h||(g=!0,P())},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):S=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,n(u,e),null===r(c)&&e===r(u)&&(m?(b(k),k=-1):m=!0,z(w,o-i))):(e.sortIndex=l,n(c,e),g||h||(g=!0,P())),e},t.unstable_shouldYield=C,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},479:(e,t,n)=>{n.d(t,{jm:()=>A});var r=n(592),a=n(679),o=n(298),i=n(245);function l(e){if("string"==typeof e&&/^[0-9]+$/.test(e)&&(e=parseInt(e,10)),"number"!=typeof e)return e;if(e<0||isNaN(e)||e===1/0||e===-1/0)throw new RangeError("A list index must be positive, but you passed "+e);return e}function s(e,t){const{context:n,objectId:r,path:o,textV2:i}=e,l=n.getWithType(r,t);if(null===l)return;const s=l[0],c=l[1];switch(s){case void 0:return;case"map":return h(n,c,i,[...o,t]);case"list":return g(n,c,i,[...o,t]);case"text":return i?n.text(c):m(n,c,[...o,t]);case"str":case"uint":case"int":case"f64":case"boolean":return c;case"null":return null;case"bytes":case"timestamp":return c;case"counter":return(0,a.M)(c,n,o,r,t);default:throw RangeError(`datatype ${s} unimplemented`)}}function c(e,t,n,a){const l=typeof e;switch(l){case"object":if(null==e)return[null,"null"];if(e[o.Xl])return[e.value,"uint"];if(e[o.I8])return[e.value,"int"];if(e[o.je])return[e.value,"f64"];if(e[o.Bv])return[e.value,"counter"];if(e instanceof Date)return[e.getTime(),"timestamp"];if(e instanceof i.Q)return[e.toString(),"str"];if(e instanceof r.E)return[e,"text"];if(e instanceof Uint8Array)return[e,"bytes"];if(e instanceof Array)return[e,"list"];if("[object Object]"===Object.prototype.toString.call(e))return[e,"map"];throw u(e,a)?new RangeError("Cannot create a reference to an existing document object"):new RangeError(`Cannot assign unknown object: ${e}`);case"boolean":return[e,"boolean"];case"number":return Number.isInteger(e)?[e,"int"]:[e,"f64"];case"string":return t?[e,"text"]:[e,"str"];case"undefined":throw new RangeError([`Cannot assign undefined value at ${w(n)}, `,"because `undefined` is not a valid JSON data type. ","You might consider setting the property's value to `null`, ","or using `delete` to remove it altogether."].join(""));default:throw new RangeError([`Cannot assign ${l} value at ${w(n)}. `,"All JSON primitive datatypes (object, array, string, number, boolean, null) ",`are supported in an Automerge document; ${l} values are not. `].join(""))}}function u(e,t){var n,r;return!(e instanceof Date||!e||(null===(r=null===(n=e[o.c4])||void 0===n?void 0:n.handle)||void 0===r?void 0:r.__wbg_ptr)!==t.__wbg_ptr)}const d={get(e,t){const{context:n,objectId:r,cache:a}=e;return t===Symbol.toStringTag?e[Symbol.toStringTag]:t===o.SN?r:t===o.up||(t===o._P?e.trace:t===o.c4?{handle:n,textV2:e.textV2}:(a[t]||(a[t]=s(e,t)),a[t]))},set(e,t,n){const{context:r,objectId:a,path:i,textV2:l}=e;if(e.cache={},u(n,r))throw new RangeError("Cannot create a reference to an existing document object");if(t===o._P)return e.trace=n,!0;if(t===o.Zn)return!0;const[s,d]=c(n,l,[...i,t],r);switch(d){case"list":{const e=r.putObject(a,t,[]),n=g(r,e,l,[...i,t]);for(let e=0;e<s.length;e++)n[e]=s[e];break}case"text":if(l)_(s),r.putObject(a,t,s);else{y(s);const e=r.putObject(a,t,"");m(r,e,[...i,t]).splice(0,0,...s)}break;case"map":{const e=r.putObject(a,t,{}),n=h(r,e,l,[...i,t]);for(const e in s)n[e]=s[e];break}default:r.put(a,t,s,d)}return!0},deleteProperty(e,t){const{context:n,objectId:r}=e;return e.cache={},n.delete(r,t),!0},has(e,t){return void 0!==this.get(e,t)},getOwnPropertyDescriptor(e,t){const n=this.get(e,t);if(void 0!==n)return{configurable:!0,enumerable:!0,value:n}},ownKeys(e){const{context:t,objectId:n}=e,r=t.keys(n);return[...new Set(r)]}},f={get(e,t){const{context:n,objectId:r}=e;return(t=l(t))===Symbol.hasInstance?e=>Array.isArray(e):t===Symbol.toStringTag?e[Symbol.toStringTag]:t===o.SN?r:t===o.up||(t===o._P?e.trace:t===o.c4?{handle:n}:"length"===t?n.length(r):"number"==typeof t?s(e,t):b(e)[t])},set(e,t,n){const{context:r,objectId:a,path:i,textV2:s}=e;if(t=l(t),u(n,r))throw new RangeError("Cannot create a reference to an existing document object");if(t===o.Zn)return!0;if(t===o._P)return e.trace=n,!0;if("string"==typeof t)throw new RangeError("list index must be a number");const[d,f]=c(n,s,[...i,t],r);switch(f){case"list":{let e;e=t>=r.length(a)?r.insertObject(a,t,[]):r.putObject(a,t,[]),g(r,e,s,[...i,t]).splice(0,0,...d);break}case"text":if(s)_(d),t>=r.length(a)?r.insertObject(a,t,d):r.putObject(a,t,d);else{let e;y(d),e=t>=r.length(a)?r.insertObject(a,t,""):r.putObject(a,t,""),m(r,e,[...i,t]).splice(0,0,...d)}break;case"map":{let e;e=t>=r.length(a)?r.insertObject(a,t,{}):r.putObject(a,t,{});const n=h(r,e,s,[...i,t]);for(const e in d)n[e]=d[e];break}default:t>=r.length(a)?r.insert(a,t,d,f):r.put(a,t,d,f)}return!0},deleteProperty(e,t){const{context:n,objectId:r}=e;t=l(t);const a=n.get(r,t);if(null!=a&&"counter"==a[0])throw new TypeError("Unsupported operation: deleting a counter from a list");return n.delete(r,t),!0},has(e,t){const{context:n,objectId:r}=e;return"number"==typeof(t=l(t))?t<n.length(r):"length"===t},getOwnPropertyDescriptor(e,t){const{context:n,objectId:r}=e;return"length"===t?{writable:!0,value:n.length(r)}:t===o.SN?{configurable:!1,enumerable:!1,value:r}:{configurable:!0,enumerable:!0,value:s(e,t=l(t))}},getPrototypeOf:e=>Object.getPrototypeOf(e),ownKeys(){const e=[];return e.push("length"),e}},p=Object.assign({},f,{get(e,t){const{context:n,objectId:r}=e;return(t=l(t))===Symbol.hasInstance?e=>Array.isArray(e):t===Symbol.toStringTag?e[Symbol.toStringTag]:t===o.SN?r:t===o.up||(t===o._P?e.trace:t===o.c4?{handle:n}:"length"===t?n.length(r):"number"==typeof t?s(e,t):function(e){const{context:t,objectId:n}=e,r={set(e,t){return this[e]=t},get(e){return this[e]},toString:()=>t.text(n).replace(/￼/g,""),toSpans(){const e=[];let r="";const a=t.length(n);for(let t=0;t<a;t++){const n=this[t];"string"==typeof n?r+=n:(r.length>0&&(e.push(r),r=""),e.push(n))}return r.length>0&&e.push(r),e},toJSON(){return this.toString()},indexOf:(e,r=0)=>t.text(n).indexOf(e,r),insertAt(r,...a){a.every((e=>"string"==typeof e))?t.splice(n,r,0,a.join("")):b(e).insertAt(r,...a)}};return r}(e)[t]||b(e)[t])},getPrototypeOf:()=>Object.getPrototypeOf(new r.E)});function h(e,t,n,r){const a={context:e,objectId:t,path:r||[],cache:{},textV2:n},o={};return Object.assign(o,a),new Proxy(o,d)}function g(e,t,n,r){const a={context:e,objectId:t,path:r||[],cache:{},textV2:n},o=[];return Object.assign(o,a),new Proxy(o,f)}function m(e,t,n){const r={context:e,objectId:t,path:n||[],cache:{},textV2:!1},a={};return Object.assign(a,r),new Proxy(a,p)}function A(e,t){return h(e,"_root",t,[])}function b(e){const{context:t,objectId:n,path:r,textV2:a}=e;return{deleteAt(e,r){return"number"==typeof r?t.splice(n,e,r):t.delete(n,e),this},fill(e,o,i){const[s,u]=c(e,a,[...r,o],t),d=t.length(n);o=l(o||0),i=l(i||d);for(let e=o;e<Math.min(i,d);e++)if("list"===u||"map"===u)t.putObject(n,e,s);else if("text"===u)if(a)_(s),t.putObject(n,e,s);else{y(s);const a=t.putObject(n,e,""),o=m(t,a,[...r,e]);for(let e=0;e<s.length;e++)o[e]=s.get(e)}else t.put(n,e,s,u);return this},indexOf(e,r=0){const a=t.length(n);for(let i=r;i<a;i++){const r=t.getWithType(n,i);if(r&&(r[1]===e[o.SN]||r[1]===e))return i}return-1},insertAt(e,...t){return this.splice(e,0,...t),this},pop(){const r=t.length(n);if(0==r)return;const a=s(e,r-1);return t.delete(n,r-1),a},push(...e){const r=t.length(n);return this.splice(r,0,...e),t.length(n)},shift(){if(0==t.length(n))return;const r=s(e,0);return t.delete(n,0),r},splice(o,i,...d){o=l(o),"number"!=typeof i&&(i=t.length(n)-o),i=l(i);for(const e of d)if(u(e,t))throw new RangeError("Cannot create a reference to an existing document object");const f=[];for(let r=0;r<i;r++){const r=s(e,o);void 0!==r&&f.push(r),t.delete(n,o)}const p=d.map(((e,n)=>{try{return c(e,a,[...r],t)}catch(e){throw e instanceof RangeError?new RangeError(`${e.message} (at index ${n} in the input)`):e}}));for(const[e,i]of p){switch(i){case"list":{const i=t.insertObject(n,o,[]);g(t,i,a,[...r,o]).splice(0,0,...e);break}case"text":if(a)_(e),t.insertObject(n,o,e);else{const a=t.insertObject(n,o,"");m(t,a,[...r,o]).splice(0,0,...e)}break;case"map":{const i=t.insertObject(n,o,{}),l=h(t,i,a,[...r,o]);for(const t in e)l[t]=e[t];break}default:t.insert(n,o,e,i)}o+=1}return f},unshift(...e){return this.splice(0,0,...e),t.length(n)},entries(){let t=0;return{next:()=>{const n=s(e,t);return void 0===n?{value:void 0,done:!0}:{value:[t++,n],done:!1}},[Symbol.iterator](){return this}}},keys(){let e=0;const r=t.length(n);return{next:()=>e<r?{value:e++,done:!1}:{value:void 0,done:!0},[Symbol.iterator](){return this}}},values(){let t=0;return{next:()=>{const n=s(e,t++);return void 0===n?{value:void 0,done:!0}:{value:n,done:!1}},[Symbol.iterator](){return this}}},toArray(){const t=[];let n;do{n=s(e,t.length),void 0!==n&&t.push(n)}while(void 0!==n);return t},map(e){return this.toArray().map(e)},toString(){return this.toArray().toString()},toLocaleString(){return this.toArray().toLocaleString()},forEach(e){return this.toArray().forEach(e)},concat(e){return this.toArray().concat(e)},every(e){return this.toArray().every(e)},filter(e){return this.toArray().filter(e)},find(e){let t=0;for(const n of this){if(e(n,t))return n;t+=1}},findIndex(e){let t=0;for(const n of this){if(e(n,t))return t;t+=1}return-1},includes(e){return void 0!==this.find((t=>t===e))},join(e){return this.toArray().join(e)},reduce(e,t){return this.toArray().reduce(e,t)},reduceRight(e,t){return this.toArray().reduceRight(e,t)},lastIndexOf(e,t=1/0){return this.toArray().lastIndexOf(e,t)},slice(e,t){return this.toArray().slice(e,t)},some(e){let t=0;for(const n of this){if(e(n,t))return!0;t+=1}return!1},[Symbol.iterator]:function*(){let t=0,n=s(e,t);for(;void 0!==n;)yield n,t+=1,n=s(e,t)}}}function y(e){if(!(e instanceof r.E))throw new Error("value was not a Text instance")}function _(e){if("string"!=typeof e)throw new Error("value was not a string")}function w(e){const t=e.map((e=>"number"==typeof e?e.toString():"string"==typeof e?e.replace(/~/g,"~0").replace(/\//g,"~1"):void 0));return 0===e.length?"":"/"+t.join("/")}},511:(e,t,n)=>{n.d(t,{v:()=>l});var r=n(540);const a=e=>{let t;const n=new Set,r=(e,r)=>{const a="function"==typeof e?e(t):e;if(!Object.is(a,t)){const e=t;t=(null!=r?r:"object"!=typeof a||null===a)?a:Object.assign({},t,a),n.forEach((n=>n(t,e)))}},a=()=>t,o={setState:r,getState:a,getInitialState:()=>i,subscribe:e=>(n.add(e),()=>n.delete(e))},i=t=e(r,a,o);return o},o=e=>e,i=e=>{const t=(e=>e?a(e):a)(e),n=e=>function(e,t=o){const n=r.useSyncExternalStore(e.subscribe,(()=>t(e.getState())),(()=>t(e.getInitialState())));return r.useDebugValue(n),n}(t,e);return Object.assign(n,t),n},l=e=>e?i(e):i},540:(e,t,n)=>{e.exports=n(869)},560:(e,t,n)=>{n.a(e,(async(e,r)=>{try{n.d(t,{dL:()=>o.d,fn:()=>a.A,ux:()=>i.u});var a=n(170),o=n(120),i=n(51),l=e([o,i]);[o,i]=l.then?(await l)():l,r()}catch(e){r(e)}}))},566:(e,t,n)=>{n.a(e,(async(e,r)=>{try{n.d(t,{A:()=>c});var a=n(540),o=n(767),i=n(560),l=n(78),s=e([i,l]);[i,l]=s.then?(await s)():s;const c=()=>((0,a.useEffect)((()=>{(0,l.sW)({url:"ws://localhost:4080",name:"PlantWateringTracker",onSync:e=>console.log(`Document ${e} synced`),onError:e=>console.error("Sync error:",e)})}),[]),a.createElement(o.BV,null,a.createElement(o.qh,{path:"/",element:a.createElement(i.dL,null)}),a.createElement(o.qh,{path:"/history",element:a.createElement(i.ux,null)}),a.createElement(o.qh,{path:"/hello",element:a.createElement(i.fn,null)})));r()}catch(e){r(e)}}))},588:(e,t,n)=>{function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}var a;n.d(t,{AO:()=>d,Gh:()=>P,HS:()=>z,Oi:()=>l,Rr:()=>f,pX:()=>L,pb:()=>B,rc:()=>a,tH:()=>D,ue:()=>h,yD:()=>N,zR:()=>i}),function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(a||(a={}));const o="popstate";function i(e){return void 0===e&&(e={}),function(e,t,n,i){void 0===i&&(i={});let{window:s=document.defaultView,v5Compat:f=!1}=i,p=s.history,h=a.Pop,g=null,m=A();function A(){return(p.state||{idx:null}).idx}function b(){h=a.Pop;let e=A(),t=null==e?null:e-m;m=e,g&&g({action:h,location:_.location,delta:t})}function y(e){let t="null"!==s.location.origin?s.location.origin:s.location.href,n="string"==typeof e?e:d(e);return n=n.replace(/ $/,"%20"),l(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==m&&(m=0,p.replaceState(r({},p.state,{idx:m}),""));let _={get action(){return h},get location(){return e(s,p)},listen(e){if(g)throw new Error("A history only accepts one active listener");return s.addEventListener(o,b),g=e,()=>{s.removeEventListener(o,b),g=null}},createHref:e=>t(s,e),createURL:y,encodeLocation(e){let t=y(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){h=a.Push;let r=u(_.location,e,t);n&&n(r,e),m=A()+1;let o=c(r,m),i=_.createHref(r);try{p.pushState(o,"",i)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;s.location.assign(i)}f&&g&&g({action:h,location:_.location,delta:1})},replace:function(e,t){h=a.Replace;let r=u(_.location,e,t);n&&n(r,e),m=A();let o=c(r,m),i=_.createHref(r);p.replaceState(o,"",i),f&&g&&g({action:h,location:_.location,delta:0})},go:e=>p.go(e)};return _}((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return u("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:d(t)}),null,e)}function l(e,t){if(!1===e||null==e)throw new Error(t)}function s(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function c(e,t){return{usr:e.state,key:e.key,idx:t}}function u(e,t,n,a){return void 0===n&&(n=null),r({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?f(t):t,{state:n,key:t&&t.key||a||Math.random().toString(36).substr(2,8)})}function d(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function f(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var p;function h(e,t,n){return void 0===n&&(n="/"),function(e,t,n,r){let a=B(("string"==typeof t?f(t):t).pathname||"/",n);if(null==a)return null;let o=g(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e){let t=C(a);i=S(o[e],t,r)}return i}(e,t,n,!1)}function g(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,o)=>{let i={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};i.relativePath.startsWith("/")&&(l(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let s=z([r,i.relativePath]),c=n.concat(i);e.children&&e.children.length>0&&(l(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+s+'".'),g(e.children,t,c,s)),(null!=e.path||e.index)&&t.push({path:s,score:k(s,e.index),routesMeta:c})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of m(e.path))a(e,t,n);else a(e,t)})),t}function m(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let i=m(r.join("/")),l=[];return l.push(...i.map((e=>""===e?o:[o,e].join("/")))),a&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(p||(p={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const A=/^:[\w-]+$/,b=3,y=2,_=1,w=10,v=-2,E=e=>"*"===e;function k(e,t){let n=e.split("/"),r=n.length;return n.some(E)&&(r+=v),t&&(r+=y),n.filter((e=>!E(e))).reduce(((e,t)=>e+(A.test(t)?b:""===t?_:w)),r)}function S(e,t,n){void 0===n&&(n=!1);let{routesMeta:r}=e,a={},o="/",i=[];for(let e=0;e<r.length;++e){let l=r[e],s=e===r.length-1,c="/"===o?t:t.slice(o.length)||"/",u=x({path:l.relativePath,caseSensitive:l.caseSensitive,end:s},c),d=l.route;if(!u&&s&&n&&!r[r.length-1].route.index&&(u=x({path:l.relativePath,caseSensitive:l.caseSensitive,end:!1},c)),!u)return null;Object.assign(a,u.params),i.push({params:a,pathname:z([o,u.pathname]),pathnameBase:R(z([o,u.pathnameBase])),route:d}),"/"!==u.pathnameBase&&(o=z([o,u.pathnameBase]))}return i}function x(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),s("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),l=a.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:a}=t;if("*"===r){let e=l[n]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const s=l[n];return e[r]=a&&!s?void 0:(s||"").replace(/%2F/g,"/"),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function C(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return s(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function B(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function O(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function N(e,t){let n=function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(e);return t?n.map(((e,t)=>t===n.length-1?e.pathname:e.pathnameBase)):n.map((e=>e.pathnameBase))}function P(e,t,n,a){let o;void 0===a&&(a=!1),"string"==typeof e?o=f(e):(o=r({},e),l(!o.pathname||!o.pathname.includes("?"),O("?","pathname","search",o)),l(!o.pathname||!o.pathname.includes("#"),O("#","pathname","hash",o)),l(!o.search||!o.search.includes("#"),O("#","search","hash",o)));let i,s=""===e||""===o.pathname,c=s?"/":o.pathname;if(null==c)i=n;else{let e=t.length-1;if(!a&&c.startsWith("..")){let t=c.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}i=e>=0?t[e]:"/"}let u=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?f(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:T(r),hash:M(a)}}(o,i),d=c&&"/"!==c&&c.endsWith("/"),p=(s||"."===c)&&n.endsWith("/");return u.pathname.endsWith("/")||!d&&!p||(u.pathname+="/"),u}const z=e=>e.join("/").replace(/\/\/+/g,"/"),R=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),T=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",M=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";class D extends Error{}function L(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const I=["post","put","patch","delete"],j=(new Set(I),["get",...I]);new Set(j),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred")},592:(e,t,n)=>{n.d(t,{E:()=>a});var r=n(298);class a{constructor(e){if("string"==typeof e)this.elems=[...e];else if(Array.isArray(e))this.elems=e;else{if(void 0!==e)throw new TypeError(`Unsupported initial value for Text: ${e}`);this.elems=[]}Reflect.defineProperty(this,r.a$,{value:!0})}get length(){return this.elems.length}get(e){return this.elems[e]}[Symbol.iterator](){const e=this.elems;let t=-1;return{next:()=>(t+=1,t<e.length?{done:!1,value:e[t]}:{done:!0})}}toString(){if(!this.str){this.str="";for(const e of this.elems)this.str+="string"==typeof e?e:"￼"}return this.str}toSpans(){if(!this.spans){this.spans=[];let e="";for(const t of this.elems)"string"==typeof t?e+=t:(e.length>0&&(this.spans.push(e),e=""),this.spans.push(t));e.length>0&&this.spans.push(e)}return this.spans}toJSON(){return this.toString()}set(e,t){if(this[r.c4])throw new RangeError("object cannot be modified outside of a change block");this.elems[e]=t}insertAt(e,...t){if(this[r.c4])throw new RangeError("object cannot be modified outside of a change block");t.every((e=>"string"==typeof e))?this.elems.splice(e,0,...t.join("")):this.elems.splice(e,0,...t)}deleteAt(e,t=1){if(this[r.c4])throw new RangeError("object cannot be modified outside of a change block");this.elems.splice(e,t)}map(e){this.elems.map(e)}lastIndexOf(e,t){this.elems.lastIndexOf(e,t)}concat(e){return new a(this.elems.concat(e.elems))}every(e){return this.elems.every(e)}filter(e){return new a(this.elems.filter(e))}find(e){return this.elems.find(e)}findIndex(e){return this.elems.findIndex(e)}forEach(e){this.elems.forEach(e)}includes(e){return this.elems.includes(e)}indexOf(e){return this.elems.indexOf(e)}join(e){return this.elems.join(e)}reduce(e){this.elems.reduce(e)}reduceRight(e){this.elems.reduceRight(e)}slice(e,t){return new a(this.elems.slice(e,t))}some(e){return this.elems.some(e)}toLocaleString(){this.toString()}}},595:(e,t,n)=>{n.d(t,{hY:()=>o,rC:()=>a});var r=n(298);function a(e,t=!0){if("object"!=typeof e)throw new RangeError("must be the document root");const n=Reflect.get(e,r.c4);if(void 0===n||null==n||t&&"_root"!==function(e){return"object"!=typeof e||null===e?null:Reflect.get(e,r.SN)}(e))throw new RangeError("must be the document root");return n}function o(e){return!!Reflect.get(e,r.up)}},647:(e,t,n)=>{var r=n(72),a=n.n(r),o=n(825),i=n.n(o),l=n(659),s=n.n(l),c=n(56),u=n.n(c),d=n(159),f=n.n(d),p=n(113),h=n.n(p),g=n(972),m={};m.styleTagTransform=h(),m.setAttributes=u(),m.insert=s().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=f(),a()(g.A,m),g.A&&g.A.locals&&g.A.locals},651:(e,t,n)=>{n.d(t,{ph:()=>r.p}),n(592);var r=n(679);n(298)},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},679:(e,t,n)=>{n.d(t,{M:()=>i,p:()=>a});var r=n(298);class a{constructor(e){this.value=e||0,Reflect.defineProperty(this,r.Bv,{value:!0})}valueOf(){return this.value}toString(){return this.valueOf().toString()}toJSON(){return this.value}increment(e){throw new Error("Counters should not be incremented outside of a change callback")}decrement(e){throw new Error("Counters should not be decremented outside of a change callback")}}class o extends a{constructor(e,t,n,r,a){super(e),this.context=t,this.path=n,this.objectId=r,this.key=a}increment(e){return e="number"==typeof e?e:1,this.context.increment(this.objectId,this.key,e),this.value+=e,this.value}decrement(e){return this.increment("number"==typeof e?-e:-1)}}function i(e,t,n,r,a){return new o(e,t,n,r,a)}},690:(e,t,n)=>{n.a(e,(async(e,r)=>{try{n.d(t,{AX:()=>i.AX,HO:()=>i.HO,HT:()=>i.HT,Hh:()=>i.Hh,Ts:()=>i.Ts,UB:()=>i.UB,UN:()=>i.UN,Ze:()=>i.Ze,Zg:()=>i.Zg,o8:()=>i.o8});var a=n(175),o=n(759),i=n(915),l=(n(316),e([o]));o=(l.then?(await l)():l)[0],(0,a.Q$)(o),r()}catch(e){r(e)}}))},740:(e,t,n)=>{n(651),n(592),n(479)},759:(e,t,n)=>{n.a(e,(async(e,r)=>{try{n.r(t),n.d(t,{Automerge:()=>o.M6,SyncState:()=>o.Lm,TextRepresentation:()=>o.Jj,__wbg_String_91fba7ded13ba54c:()=>o.qB,__wbg_apply_0a5aa603881e6d79:()=>o.Ii,__wbg_assign_496d2d14fecafbcf:()=>o.MT,__wbg_buffer_12d079cc21e14bdb:()=>o.Fm,__wbg_call_27c0f87801dedf93:()=>o.cq,__wbg_call_b3ca7c6051f9bec1:()=>o._m,__wbg_concat_3de229fe4fe90fea:()=>o.B_,__wbg_crypto_1d1f22824a6a080c:()=>o.h_,__wbg_defineProperty_cc00e2de8a0f5141:()=>o.$$,__wbg_deleteProperty_13e721a56f19e842:()=>o.nd,__wbg_done_298b57d23c0fc80c:()=>o.uL,__wbg_entries_95cc2c823b285a09:()=>o.OZ,__wbg_error_f851667af71bcfc6:()=>o.Xu,__wbg_for_27c67e2dbdce22f6:()=>o.Oh,__wbg_freeze_cc6bc19f75299986:()=>o.uE,__wbg_from_89e3fc3ba5e6fb48:()=>o.vb,__wbg_getRandomValues_3aa56aa6edec874c:()=>o.VF,__wbg_getTime_2bc4375165f02d15:()=>o.Ym,__wbg_get_bd8e338fbd5f5cc8:()=>o.g_,__wbg_get_e3c254076557e348:()=>o.XB,__wbg_globalThis_d1e6af4856ba331b:()=>o.Kc,__wbg_global_207b558942527489:()=>o.vA,__wbg_instanceof_ArrayBuffer_836825be07d4c9d2:()=>o.B7,__wbg_instanceof_Date_f65cf97fb83fc369:()=>o.G_,__wbg_instanceof_Object_71ca3c0a59266746:()=>o.DG,__wbg_instanceof_Uint8Array_2b3bbecd033d19f6:()=>o.QD,__wbg_isArray_2ab64d95e09ea0ae:()=>o.f3,__wbg_iterator_2cee6dadfd956dfa:()=>o.GR,__wbg_keys_91e412b4b222659f:()=>o.rn,__wbg_length_c20a40f15020d68a:()=>o.qY,__wbg_length_cd7af8117672b8b8:()=>o.O$,__wbg_length_dee433d4c85c9387:()=>o.Fx,__wbg_log_1746d5c75ec89963:()=>o.Og,__wbg_log_5bb5f88f245d7762:()=>o.A9,__wbg_msCrypto_eb05e62b530a1508:()=>o.cl,__wbg_new_16b304a2cfa7ff4a:()=>o.M2,__wbg_new_28c511d9baebfa89:()=>o.mC,__wbg_new_63b92bc8671ed464:()=>o.$Z,__wbg_new_72fb9a18b5ae2624:()=>o.ot,__wbg_new_abda76e883ba8a5f:()=>o.V5,__wbg_new_cf3ec55744a78578:()=>o.qD,__wbg_new_dd6a5dd7b538af21:()=>o.KR,__wbg_newnoargs_e258087cd0daa0ea:()=>o.Pf,__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb:()=>o.Lo,__wbg_newwithlength_e9b4878cebadb3d3:()=>o.v6,__wbg_next_196c84450b364254:()=>o.iS,__wbg_next_40fc327bfc8770e6:()=>o.Xo,__wbg_node_104a2ff8d6ea03a2:()=>o.NL,__wbg_ownKeys_658942b7f28d1fe9:()=>o.hB,__wbg_process_4a72847cc503995b:()=>o.cA,__wbg_push_a5b05aedc7234f9f:()=>o.co,__wbg_randomFillSync_5c9c955aa56b6049:()=>o.hW,__wbg_require_cca90b1a94a0255b:()=>o.s,__wbg_self_ce0dbfc45cf2f5be:()=>o.cX,__wbg_set_1f9b04f170055d33:()=>o.j,__wbg_set_20cbc34131e76824:()=>o.H0,__wbg_set_a47bac70306a19a7:()=>o.Wv,__wbg_set_d4638f722068f043:()=>o.QU,__wbg_set_wasm:()=>o.lI,__wbg_slice_52fb626ffdc8da8f:()=>o.s1,__wbg_stack_658279fe44541cf6:()=>o.u$,__wbg_subarray_a1f73cd4b5b42fe1:()=>o.if,__wbg_toString_7df3c77999517c20:()=>o.nC,__wbg_unshift_e22df4b34bcf5070:()=>o.db,__wbg_value_d93c65011f51a456:()=>o.qT,__wbg_values_9c75e6e2bfbdb70d:()=>o.Ak,__wbg_versions_f686565e586dd935:()=>o.D1,__wbg_window_c6fb939a7f436783:()=>o.kh,__wbindgen_bigint_from_i64:()=>o.ce,__wbindgen_bigint_from_u64:()=>o.Qg,__wbindgen_boolean_get:()=>o.Nh,__wbindgen_debug_string:()=>o.rl,__wbindgen_error_new:()=>o.Rj,__wbindgen_is_array:()=>o.Cz,__wbindgen_is_function:()=>o.PR,__wbindgen_is_null:()=>o.QR,__wbindgen_is_object:()=>o.qv,__wbindgen_is_string:()=>o.Gu,__wbindgen_is_undefined:()=>o.vU,__wbindgen_json_serialize:()=>o.dz,__wbindgen_jsval_loose_eq:()=>o.U8,__wbindgen_memory:()=>o.Py,__wbindgen_number_get:()=>o.sW,__wbindgen_number_new:()=>o.N8,__wbindgen_object_clone_ref:()=>o.BZ,__wbindgen_object_drop_ref:()=>o.bk,__wbindgen_string_get:()=>o.qN,__wbindgen_string_new:()=>o.yc,__wbindgen_throw:()=>o.Qn,create:()=>o.vt,decodeChange:()=>o.zm,decodeSyncMessage:()=>o.dN,decodeSyncState:()=>o.lQ,encodeChange:()=>o.NJ,encodeSyncMessage:()=>o.XE,encodeSyncState:()=>o.ZI,exportSyncState:()=>o.Pd,importSyncState:()=>o._g,initSyncState:()=>o.Ze,load:()=>o.Hh});var a=n(172),o=n(777),i=e([a]);a=(i.then?(await i)():i)[0],(0,o.lI)(a),r()}catch(e){r(e)}}))},767:(e,t,n)=>{var r;n.d(t,{$P:()=>p,BV:()=>z,Ix:()=>P,V8:()=>O,Zp:()=>A,jb:()=>c,qh:()=>N,x$:()=>b,zy:()=>g});var a=n(540),o=n(588);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}const l=a.createContext(null),s=a.createContext(null),c=a.createContext(null),u=a.createContext(null),d=a.createContext({outlet:null,matches:[],isDataRoute:!1}),f=a.createContext(null);function p(e,t){let{relative:n}=void 0===t?{}:t;h()||(0,o.Oi)(!1);let{basename:r,navigator:i}=a.useContext(c),{hash:l,pathname:s,search:u}=b(e,{relative:n}),d=s;return"/"!==r&&(d="/"===s?r:(0,o.HS)([r,s])),i.createHref({pathname:d,search:u,hash:l})}function h(){return null!=a.useContext(u)}function g(){return h()||(0,o.Oi)(!1),a.useContext(u).location}function m(e){a.useContext(c).static||a.useLayoutEffect(e)}function A(){let{isDataRoute:e}=a.useContext(d);return e?function(){let{router:e}=function(){let e=a.useContext(l);return e||(0,o.Oi)(!1),e}(k.UseNavigateStable),t=x(S.UseNavigateStable),n=a.useRef(!1);return m((()=>{n.current=!0})),a.useCallback((function(r,a){void 0===a&&(a={}),n.current&&("number"==typeof r?e.navigate(r):e.navigate(r,i({fromRouteId:t},a)))}),[e,t])}():function(){h()||(0,o.Oi)(!1);let e=a.useContext(l),{basename:t,future:n,navigator:r}=a.useContext(c),{matches:i}=a.useContext(d),{pathname:s}=g(),u=JSON.stringify((0,o.yD)(i,n.v7_relativeSplatPath)),f=a.useRef(!1);return m((()=>{f.current=!0})),a.useCallback((function(n,a){if(void 0===a&&(a={}),!f.current)return;if("number"==typeof n)return void r.go(n);let i=(0,o.Gh)(n,JSON.parse(u),s,"path"===a.relative);null==e&&"/"!==t&&(i.pathname="/"===i.pathname?t:(0,o.HS)([t,i.pathname])),(a.replace?r.replace:r.push)(i,a.state,a)}),[t,r,u,s,e])}()}function b(e,t){let{relative:n}=void 0===t?{}:t,{future:r}=a.useContext(c),{matches:i}=a.useContext(d),{pathname:l}=g(),s=JSON.stringify((0,o.yD)(i,r.v7_relativeSplatPath));return a.useMemo((()=>(0,o.Gh)(e,JSON.parse(s),l,"path"===n)),[e,s,l,n])}function y(e,t,n,r){h()||(0,o.Oi)(!1);let{navigator:l,static:s}=a.useContext(c),{matches:f}=a.useContext(d),p=f[f.length-1],m=p?p.params:{},A=(p&&p.pathname,p?p.pathnameBase:"/");p&&p.route;let b,y=g();if(t){var _;let e="string"==typeof t?(0,o.Rr)(t):t;"/"===A||(null==(_=e.pathname)?void 0:_.startsWith(A))||(0,o.Oi)(!1),b=e}else b=y;let k=b.pathname||"/",S=k;if("/"!==A){let e=A.replace(/^\//,"").split("/");S="/"+k.replace(/^\//,"").split("/").slice(e.length).join("/")}let x=!s&&n&&n.matches&&n.matches.length>0?n.matches:(0,o.ue)(e,{pathname:S}),B=function(e,t,n,r){var i;if(void 0===t&&(t=[]),void 0===n&&(n=null),void 0===r&&(r=null),null==e){var l;if(!n)return null;if(n.errors)e=n.matches;else{if(!(null!=(l=r)&&l.v7_partialHydration&&0===t.length&&!n.initialized&&n.matches.length>0))return null;e=n.matches}}let s=e,c=null==(i=n)?void 0:i.errors;if(null!=c){let e=s.findIndex((e=>e.route.id&&void 0!==(null==c?void 0:c[e.route.id])));e>=0||(0,o.Oi)(!1),s=s.slice(0,Math.min(s.length,e+1))}let u=!1,d=-1;if(n&&r&&r.v7_partialHydration)for(let e=0;e<s.length;e++){let t=s[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(d=e),t.route.id){let{loaderData:e,errors:r}=n,a=t.route.loader&&void 0===e[t.route.id]&&(!r||void 0===r[t.route.id]);if(t.route.lazy||a){u=!0,s=d>=0?s.slice(0,d+1):[s[0]];break}}}return s.reduceRight(((e,r,o)=>{let i,l=!1,f=null,p=null;var h;n&&(i=c&&r.route.id?c[r.route.id]:void 0,f=r.route.errorElement||w,u&&(d<0&&0===o?(C[h="route-fallback"]||(C[h]=!0),l=!0,p=null):d===o&&(l=!0,p=r.route.hydrateFallbackElement||null)));let g=t.concat(s.slice(0,o+1)),m=()=>{let t;return t=i?f:l?p:r.route.Component?a.createElement(r.route.Component,null):r.route.element?r.route.element:e,a.createElement(E,{match:r,routeContext:{outlet:e,matches:g,isDataRoute:null!=n},children:t})};return n&&(r.route.ErrorBoundary||r.route.errorElement||0===o)?a.createElement(v,{location:n.location,revalidation:n.revalidation,component:f,error:i,children:m(),routeContext:{outlet:null,matches:g,isDataRoute:!0}}):m()}),null)}(x&&x.map((e=>Object.assign({},e,{params:Object.assign({},m,e.params),pathname:(0,o.HS)([A,l.encodeLocation?l.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?A:(0,o.HS)([A,l.encodeLocation?l.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),f,n,r);return t&&B?a.createElement(u.Provider,{value:{location:i({pathname:"/",search:"",hash:"",state:null,key:"default"},b),navigationType:o.rc.Pop}},B):B}function _(){let e=function(){var e;let t=a.useContext(f),n=function(){let e=a.useContext(s);return e||(0,o.Oi)(!1),e}(S.UseRouteError),r=x(S.UseRouteError);return void 0!==t?t:null==(e=n.errors)?void 0:e[r]}(),t=(0,o.pX)(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return a.createElement(a.Fragment,null,a.createElement("h2",null,"Unexpected Application Error!"),a.createElement("h3",{style:{fontStyle:"italic"}},t),n?a.createElement("pre",{style:r},n):null,null)}const w=a.createElement(_,null);class v extends a.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?a.createElement(d.Provider,{value:this.props.routeContext},a.createElement(f.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function E(e){let{routeContext:t,match:n,children:r}=e,o=a.useContext(l);return o&&o.static&&o.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=n.route.id),a.createElement(d.Provider,{value:t},r)}var k=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(k||{}),S=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(S||{});function x(e){let t=function(){let e=a.useContext(d);return e||(0,o.Oi)(!1),e}(),n=t.matches[t.matches.length-1];return n.route.id||(0,o.Oi)(!1),n.route.id}const C={},B=(e,t,n)=>{};function O(e,t){void 0===(null==e?void 0:e.v7_startTransition)&&B("v7_startTransition","React Router will begin wrapping state updates in `React.startTransition` in v7","https://reactrouter.com/v6/upgrading/future#v7_starttransition"),void 0!==(null==e?void 0:e.v7_relativeSplatPath)||t&&t.v7_relativeSplatPath||B("v7_relativeSplatPath","Relative route resolution within Splat routes is changing in v7","https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath"),t&&(void 0===t.v7_fetcherPersist&&B("v7_fetcherPersist","The persistence behavior of fetchers is changing in v7","https://reactrouter.com/v6/upgrading/future#v7_fetcherpersist"),void 0===t.v7_normalizeFormMethod&&B("v7_normalizeFormMethod","Casing of `formMethod` fields is being normalized to uppercase in v7","https://reactrouter.com/v6/upgrading/future#v7_normalizeformmethod"),void 0===t.v7_partialHydration&&B("v7_partialHydration","`RouterProvider` hydration behavior is changing in v7","https://reactrouter.com/v6/upgrading/future#v7_partialhydration"),void 0===t.v7_skipActionErrorRevalidation&&B("v7_skipActionErrorRevalidation","The revalidation behavior after 4xx/5xx `action` responses is changing in v7","https://reactrouter.com/v6/upgrading/future#v7_skipactionerrorrevalidation"))}function N(e){(0,o.Oi)(!1)}function P(e){let{basename:t="/",children:n=null,location:r,navigationType:l=o.rc.Pop,navigator:s,static:d=!1,future:f}=e;h()&&(0,o.Oi)(!1);let p=t.replace(/^\/*/,"/"),g=a.useMemo((()=>({basename:p,navigator:s,static:d,future:i({v7_relativeSplatPath:!1},f)})),[p,f,s,d]);"string"==typeof r&&(r=(0,o.Rr)(r));let{pathname:m="/",search:A="",hash:b="",state:y=null,key:_="default"}=r,w=a.useMemo((()=>{let e=(0,o.pb)(m,p);return null==e?null:{location:{pathname:e,search:A,hash:b,state:y,key:_},navigationType:l}}),[p,m,A,b,y,_,l]);return null==w?null:a.createElement(c.Provider,{value:g},a.createElement(u.Provider,{children:n,value:w}))}function z(e){let{children:t,location:n}=e;return y(R(t),n)}function R(e,t){void 0===t&&(t=[]);let n=[];return a.Children.forEach(e,((e,r)=>{if(!a.isValidElement(e))return;let i=[...t,r];if(e.type===a.Fragment)return void n.push.apply(n,R(e.props.children,i));e.type!==N&&(0,o.Oi)(!1),e.props.index&&e.props.children&&(0,o.Oi)(!1);let l={id:e.props.id||i.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(l.children=R(e.props.children,i)),n.push(l)})),n}(r||(r=n.t(a,2))).startTransition,new Promise((()=>{})),a.Component},775:(e,t,n)=>{n.a(e,(async(e,r)=>{try{n.d(t,{s:()=>l});var a=n(540),o=n(944),i=e([o]);o=(i.then?(await i)():i)[0];const l=()=>{const{wateringHistory:e,waterers:t,addWaterer:n,removeWaterer:r,deleteWateringEntry:i}=(0,o.g)(),[l,s]=(0,a.useState)(""),[c,u]=(0,a.useState)(null),[d,f]=(0,a.useState)(null),[p,h]=(0,a.useState)(!0);(0,a.useEffect)((()=>{const e=setTimeout((()=>{h(!1)}),1500);return()=>clearTimeout(e)}),[]);const g=()=>{c&&c.new.trim()&&c.new!==c.original&&!t.includes(c.new.trim())&&(n(c.new.trim()),r(c.original)),u(null)};return a.createElement("div",{className:"max-w-md mx-auto p-6"},a.createElement("h1",{className:"text-2xl font-bold mb-6"},"Watering History"),p?a.createElement("div",null,a.createElement("h2",{className:"text-xl font-semibold mb-4"},"Remembering",a.createElement("span",{className:"ml-1 animate-pulse"},"."),a.createElement("span",{className:"ml-1 animate-pulse animation-delay-200"},"."),a.createElement("span",{className:"ml-1 animate-pulse animation-delay-400"},".")),a.createElement("div",{className:"mt-8 bg-gray-100 rounded-md p-4 animate-pulse"},a.createElement("div",{className:"h-6 bg-gray-200 rounded w-3/4 mb-4"}),a.createElement("div",{className:"h-6 bg-gray-200 rounded w-1/2"})),a.createElement("div",{className:"mt-4 bg-gray-100 rounded-md p-4 animate-pulse"},a.createElement("div",{className:"h-6 bg-gray-200 rounded w-2/3 mb-4"}),a.createElement("div",{className:"h-6 bg-gray-200 rounded w-1/3"}))):a.createElement("div",{className:"fade-in"},a.createElement("div",{className:"mb-8"},a.createElement("h2",{className:"text-xl font-semibold mb-4"},"Waterers"),a.createElement("div",{className:"flex flex-wrap gap-2 mb-4"},t.map((e=>a.createElement("div",{key:e,className:"flex items-center bg-amber-100 rounded-full px-3 py-1"},c&&c.original===e?a.createElement(a.Fragment,null,a.createElement("input",{type:"text",value:c.new,onChange:e=>u({...c,new:e.target.value}),className:"w-24 bg-transparent border-b border-amber-800 focus:outline-none",autoFocus:!0}),a.createElement("button",{className:"ml-2 text-green-600 hover:text-green-800",onClick:g},"✓")):a.createElement(a.Fragment,null,a.createElement("span",null,e),a.createElement("div",{className:"ml-2 flex items-center"},a.createElement("button",{className:"text-amber-800 hover:text-amber-950 mr-1",onClick:()=>(e=>{u({original:e,new:e})})(e),title:"Rename"},"✏️"),a.createElement("button",{className:"text-red-500 hover:text-red-700",onClick:()=>r(e),title:"Delete"},"❌"))))))),a.createElement("div",{className:"flex"},a.createElement("input",{type:"text",value:l,onChange:e=>s(e.target.value),placeholder:"Add new waterer",className:"flex-1 border rounded-l px-3 py-2"}),a.createElement("button",{onClick:()=>{l.trim()&&!t.includes(l.trim())&&(n(l.trim()),s(""))},className:"bg-green-600 text-white px-4 py-2 rounded-r"},"Add"))),a.createElement("div",null,a.createElement("h2",{className:"text-xl font-semibold mb-4"},"History"),0===e.length?a.createElement("p",null,"No watering history yet."):a.createElement("ul",{className:"space-y-3"},e.map(((e,t)=>a.createElement("li",{key:t,className:"border-b pb-2 relative"},a.createElement("div",{className:"font-medium flex justify-between items-center"},a.createElement("span",null,e.person),a.createElement("button",{className:"text-red-500 hover:text-red-700 text-sm",onClick:()=>f(t),title:"Delete entry"},"❌")),a.createElement("div",{className:"text-sm text-gray-600"},(e=>{const t=new Date(e);return t.toLocaleDateString()+" "+t.toLocaleTimeString()})(e.timestamp)),d===t&&a.createElement("div",{className:"absolute right-0 top-0 bg-white shadow-md rounded p-2 z-10 border"},a.createElement("p",{className:"text-sm mb-2"},"Delete this entry?"),a.createElement("div",{className:"flex gap-2"},a.createElement("button",{className:"px-2 py-1 bg-red-500 text-white text-xs rounded",onClick:()=>(e=>{i(e),f(null)})(t)},"Yes"),a.createElement("button",{className:"px-2 py-1 bg-gray-200 text-xs rounded",onClick:()=>f(null)},"No"))))))))))};r()}catch(e){r(e)}}))},777:(e,t,n)=>{let r;function a(e){r=e}n.d(t,{$$:()=>Qe,$Z:()=>pt,A9:()=>ye,Ak:()=>Xe,B7:()=>je,BZ:()=>Q,B_:()=>at,Cz:()=>te,D1:()=>ge,DG:()=>Ve,Fm:()=>rt,Fx:()=>Re,GR:()=>Oe,G_:()=>$e,Gu:()=>Z,H0:()=>ue,Hh:()=>x,Ii:()=>Je,Jj:()=>L,KR:()=>Ze,Kc:()=>ut,Lm:()=>U,Lo:()=>ft,M2:()=>Ee,M6:()=>j,MT:()=>qe,N8:()=>q,NJ:()=>C,NL:()=>me,Nh:()=>K,O$:()=>ve,OZ:()=>Ge,Og:()=>_e,Oh:()=>it,PR:()=>J,Pd:()=>P,Pf:()=>ke,Py:()=>wt,QD:()=>mt,QR:()=>X,QU:()=>Te,Qg:()=>ce,Qn:()=>_t,Rj:()=>W,U8:()=>ie,V5:()=>re,VF:()=>de,Wv:()=>ht,XB:()=>Ne,XE:()=>z,Xo:()=>Se,Xu:()=>oe,Ym:()=>He,ZI:()=>T,Ze:()=>O,_g:()=>N,_m:()=>Ue,bk:()=>$,cA:()=>he,cX:()=>st,ce:()=>se,cl:()=>be,co:()=>Le,cq:()=>Pe,dN:()=>R,db:()=>Ie,dz:()=>ne,f3:()=>De,g_:()=>we,hB:()=>tt,hW:()=>fe,h_:()=>pe,iS:()=>xe,if:()=>bt,j:()=>nt,kh:()=>ct,lI:()=>a,lQ:()=>M,mC:()=>Fe,nC:()=>lt,nd:()=>et,ot:()=>ze,qB:()=>le,qD:()=>We,qN:()=>H,qT:()=>Be,qY:()=>gt,qv:()=>ee,rl:()=>yt,rn:()=>Ke,s:()=>Ae,s1:()=>ot,sW:()=>G,u$:()=>ae,uE:()=>Ye,uL:()=>Ce,v6:()=>At,vA:()=>dt,vU:()=>Y,vb:()=>Me,vt:()=>S,yc:()=>V,zm:()=>B});const o=new Array(128).fill(void 0);function i(e){return o[e]}o.push(void 0,null,!0,!1);let l=o.length;function s(e){const t=i(e);return function(e){e<132||(o[e]=l,l=e)}(e),t}let c=0,u=null;function d(){return null!==u&&0!==u.byteLength||(u=new Uint8Array(r.memory.buffer)),u}let f=new("undefined"==typeof TextEncoder?(0,module.require)("util").TextEncoder:TextEncoder)("utf-8");const p="function"==typeof f.encodeInto?function(e,t){return f.encodeInto(e,t)}:function(e,t){const n=f.encode(e);return t.set(n),{read:e.length,written:n.length}};function h(e,t,n){if(void 0===n){const n=f.encode(e),r=t(n.length,1)>>>0;return d().subarray(r,r+n.length).set(n),c=n.length,r}let r=e.length,a=t(r,1)>>>0;const o=d();let i=0;for(;i<r;i++){const t=e.charCodeAt(i);if(t>127)break;o[a+i]=t}if(i!==r){0!==i&&(e=e.slice(i)),a=n(a,r,r=i+3*e.length,1)>>>0;const t=d().subarray(a+i,a+r);i+=p(e,t).written,a=n(a,r,i,1)>>>0}return c=i,a}function g(e){return null==e}let m=null;function A(){return null!==m&&0!==m.byteLength||(m=new Int32Array(r.memory.buffer)),m}let b=new("undefined"==typeof TextDecoder?(0,module.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});function y(e,t){return e>>>=0,b.decode(d().subarray(e,e+t))}function _(e){l===o.length&&o.push(o.length+1);const t=l;return l=o[t],o[t]=e,t}b.decode();let w=null;function v(){return null!==w&&0!==w.byteLength||(w=new Float64Array(r.memory.buffer)),w}function E(e){const t=typeof e;if("number"==t||"boolean"==t||null==e)return`${e}`;if("string"==t)return`"${e}"`;if("symbol"==t){const t=e.description;return null==t?"Symbol":`Symbol(${t})`}if("function"==t){const t=e.name;return"string"==typeof t&&t.length>0?`Function(${t})`:"Function"}if(Array.isArray(e)){const t=e.length;let n="[";t>0&&(n+=E(e[0]));for(let r=1;r<t;r++)n+=", "+E(e[r]);return n+="]",n}const n=/\[object ([^\]]+)\]/.exec(toString.call(e));let r;if(!(n.length>1))return toString.call(e);if(r=n[1],"Object"==r)try{return"Object("+JSON.stringify(e)+")"}catch(e){return"Object"}return e instanceof Error?`${e.name}: ${e.message}\n${e.stack}`:r}function k(e,t){if(!(e instanceof t))throw new Error(`expected instance of ${t.name}`);return e.ptr}function S(e){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.create(a,_(e));var t=A()[a/4+0],n=A()[a/4+1];if(A()[a/4+2])throw s(n);return j.__wrap(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}function x(e,t){try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.load(o,_(e),_(t));var n=A()[o/4+0],a=A()[o/4+1];if(A()[o/4+2])throw s(a);return j.__wrap(n)}finally{r.__wbindgen_add_to_stack_pointer(16)}}function C(e){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.encodeChange(a,_(e));var t=A()[a/4+0],n=A()[a/4+1];if(A()[a/4+2])throw s(n);return s(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}function B(e){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.decodeChange(a,_(e));var t=A()[a/4+0],n=A()[a/4+1];if(A()[a/4+2])throw s(n);return s(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}function O(){const e=r.initSyncState();return U.__wrap(e)}function N(e){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.importSyncState(a,_(e));var t=A()[a/4+0],n=A()[a/4+1];if(A()[a/4+2])throw s(n);return U.__wrap(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}function P(e){return k(e,U),s(r.exportSyncState(e.__wbg_ptr))}function z(e){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.encodeSyncMessage(a,_(e));var t=A()[a/4+0],n=A()[a/4+1];if(A()[a/4+2])throw s(n);return s(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}function R(e){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.decodeSyncMessage(a,_(e));var t=A()[a/4+0],n=A()[a/4+1];if(A()[a/4+2])throw s(n);return s(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}function T(e){return k(e,U),s(r.encodeSyncState(e.__wbg_ptr))}function M(e){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.decodeSyncState(a,_(e));var t=A()[a/4+0],n=A()[a/4+1];if(A()[a/4+2])throw s(n);return U.__wrap(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}function D(e,t){try{return e.apply(this,t)}catch(e){r.__wbindgen_exn_store(_(e))}}const L=Object.freeze({Array:0,0:"Array",String:1,1:"String"}),I="undefined"==typeof FinalizationRegistry?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry((e=>r.__wbg_automerge_free(e>>>0)));class j{static __wrap(e){e>>>=0;const t=Object.create(j.prototype);return t.__wbg_ptr=e,I.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,I.unregister(this),e}free(){const e=this.__destroy_into_raw();r.__wbg_automerge_free(e)}static new(e,t){try{const l=r.__wbindgen_add_to_stack_pointer(-16);var n=g(e)?0:h(e,r.__wbindgen_malloc,r.__wbindgen_realloc),a=c;r.automerge_new(l,n,a,t);var o=A()[l/4+0],i=A()[l/4+1];if(A()[l/4+2])throw s(i);return j.__wrap(o)}finally{r.__wbindgen_add_to_stack_pointer(16)}}clone(e){try{const i=r.__wbindgen_add_to_stack_pointer(-16);var t=g(e)?0:h(e,r.__wbindgen_malloc,r.__wbindgen_realloc),n=c;r.automerge_clone(i,this.__wbg_ptr,t,n);var a=A()[i/4+0],o=A()[i/4+1];if(A()[i/4+2])throw s(o);return j.__wrap(a)}finally{r.__wbindgen_add_to_stack_pointer(16)}}fork(e,t){try{const l=r.__wbindgen_add_to_stack_pointer(-16);var n=g(e)?0:h(e,r.__wbindgen_malloc,r.__wbindgen_realloc),a=c;r.automerge_fork(l,this.__wbg_ptr,n,a,_(t));var o=A()[l/4+0],i=A()[l/4+1];if(A()[l/4+2])throw s(i);return j.__wrap(o)}finally{r.__wbindgen_add_to_stack_pointer(16)}}pendingOps(){return s(r.automerge_pendingOps(this.__wbg_ptr))}commit(e,t){var n=g(e)?0:h(e,r.__wbindgen_malloc,r.__wbindgen_realloc),a=c;return s(r.automerge_commit(this.__wbg_ptr,n,a,!g(t),g(t)?0:t))}merge(e){try{const a=r.__wbindgen_add_to_stack_pointer(-16);k(e,j),r.automerge_merge(a,this.__wbg_ptr,e.__wbg_ptr);var t=A()[a/4+0],n=A()[a/4+1];if(A()[a/4+2])throw s(n);return s(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}rollback(){return r.automerge_rollback(this.__wbg_ptr)}keys(e,t){try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_keys(o,this.__wbg_ptr,_(e),g(t)?0:_(t));var n=A()[o/4+0],a=A()[o/4+1];if(A()[o/4+2])throw s(a);return s(n)}finally{r.__wbindgen_add_to_stack_pointer(16)}}text(e,t){let n,a;try{const f=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_text(f,this.__wbg_ptr,_(e),g(t)?0:_(t));var o=A()[f/4+0],i=A()[f/4+1],l=A()[f/4+2],c=A()[f/4+3],u=o,d=i;if(c)throw u=0,d=0,s(l);return n=u,a=d,y(u,d)}finally{r.__wbindgen_add_to_stack_pointer(16),r.__wbindgen_free(n,a,1)}}spans(e,t){try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_spans(o,this.__wbg_ptr,_(e),g(t)?0:_(t));var n=A()[o/4+0],a=A()[o/4+1];if(A()[o/4+2])throw s(a);return s(n)}finally{r.__wbindgen_add_to_stack_pointer(16)}}splice(e,t,n,a){try{const i=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_splice(i,this.__wbg_ptr,_(e),t,n,_(a));var o=A()[i/4+0];if(A()[i/4+1])throw s(o)}finally{r.__wbindgen_add_to_stack_pointer(16)}}updateText(e,t){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_updateText(a,this.__wbg_ptr,_(e),_(t));var n=A()[a/4+0];if(A()[a/4+1])throw s(n)}finally{r.__wbindgen_add_to_stack_pointer(16)}}updateSpans(e,t){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_updateSpans(a,this.__wbg_ptr,_(e),_(t));var n=A()[a/4+0];if(A()[a/4+1])throw s(n)}finally{r.__wbindgen_add_to_stack_pointer(16)}}push(e,t,n){try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_push(o,this.__wbg_ptr,_(e),_(t),_(n));var a=A()[o/4+0];if(A()[o/4+1])throw s(a)}finally{r.__wbindgen_add_to_stack_pointer(16)}}pushObject(e,t){try{const i=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_pushObject(i,this.__wbg_ptr,_(e),_(t));var n=A()[i/4+0],a=A()[i/4+1],o=A()[i/4+2];if(A()[i/4+3])throw s(o);let l;return 0!==n&&(l=y(n,a).slice(),r.__wbindgen_free(n,1*a,1)),l}finally{r.__wbindgen_add_to_stack_pointer(16)}}insert(e,t,n,a){try{const i=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_insert(i,this.__wbg_ptr,_(e),t,_(n),_(a));var o=A()[i/4+0];if(A()[i/4+1])throw s(o)}finally{r.__wbindgen_add_to_stack_pointer(16)}}splitBlock(e,t,n){try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_splitBlock(o,this.__wbg_ptr,_(e),t,_(n));var a=A()[o/4+0];if(A()[o/4+1])throw s(a)}finally{r.__wbindgen_add_to_stack_pointer(16)}}joinBlock(e,t){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_joinBlock(a,this.__wbg_ptr,_(e),t);var n=A()[a/4+0];if(A()[a/4+1])throw s(n)}finally{r.__wbindgen_add_to_stack_pointer(16)}}updateBlock(e,t,n){try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_updateBlock(o,this.__wbg_ptr,_(e),t,_(n));var a=A()[o/4+0];if(A()[o/4+1])throw s(a)}finally{r.__wbindgen_add_to_stack_pointer(16)}}getBlock(e,t,n){try{const i=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_getBlock(i,this.__wbg_ptr,_(e),t,g(n)?0:_(n));var a=A()[i/4+0],o=A()[i/4+1];if(A()[i/4+2])throw s(o);return s(a)}finally{r.__wbindgen_add_to_stack_pointer(16)}}insertObject(e,t,n){try{const l=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_insertObject(l,this.__wbg_ptr,_(e),t,_(n));var a=A()[l/4+0],o=A()[l/4+1],i=A()[l/4+2];if(A()[l/4+3])throw s(i);let c;return 0!==a&&(c=y(a,o).slice(),r.__wbindgen_free(a,1*o,1)),c}finally{r.__wbindgen_add_to_stack_pointer(16)}}put(e,t,n,a){try{const i=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_put(i,this.__wbg_ptr,_(e),_(t),_(n),_(a));var o=A()[i/4+0];if(A()[i/4+1])throw s(o)}finally{r.__wbindgen_add_to_stack_pointer(16)}}putObject(e,t,n){try{const i=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_putObject(i,this.__wbg_ptr,_(e),_(t),_(n));var a=A()[i/4+0],o=A()[i/4+1];if(A()[i/4+2])throw s(o);return s(a)}finally{r.__wbindgen_add_to_stack_pointer(16)}}increment(e,t,n){try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_increment(o,this.__wbg_ptr,_(e),_(t),_(n));var a=A()[o/4+0];if(A()[o/4+1])throw s(a)}finally{r.__wbindgen_add_to_stack_pointer(16)}}get(e,t,n){try{const i=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_get(i,this.__wbg_ptr,_(e),_(t),g(n)?0:_(n));var a=A()[i/4+0],o=A()[i/4+1];if(A()[i/4+2])throw s(o);return s(a)}finally{r.__wbindgen_add_to_stack_pointer(16)}}getWithType(e,t,n){try{const i=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_getWithType(i,this.__wbg_ptr,_(e),_(t),g(n)?0:_(n));var a=A()[i/4+0],o=A()[i/4+1];if(A()[i/4+2])throw s(o);return s(a)}finally{r.__wbindgen_add_to_stack_pointer(16)}}objInfo(e,t){try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_objInfo(o,this.__wbg_ptr,_(e),g(t)?0:_(t));var n=A()[o/4+0],a=A()[o/4+1];if(A()[o/4+2])throw s(a);return s(n)}finally{r.__wbindgen_add_to_stack_pointer(16)}}getAll(e,t,n){try{const i=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_getAll(i,this.__wbg_ptr,_(e),_(t),g(n)?0:_(n));var a=A()[i/4+0],o=A()[i/4+1];if(A()[i/4+2])throw s(o);return s(a)}finally{r.__wbindgen_add_to_stack_pointer(16)}}enableFreeze(e){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_enableFreeze(a,this.__wbg_ptr,_(e));var t=A()[a/4+0],n=A()[a/4+1];if(A()[a/4+2])throw s(n);return s(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}registerDatatype(e,t,n){try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_registerDatatype(o,this.__wbg_ptr,_(e),_(t),_(n));var a=A()[o/4+0];if(A()[o/4+1])throw s(a)}finally{r.__wbindgen_add_to_stack_pointer(16)}}applyPatches(e,t){try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_applyPatches(o,this.__wbg_ptr,_(e),_(t));var n=A()[o/4+0],a=A()[o/4+1];if(A()[o/4+2])throw s(a);return s(n)}finally{r.__wbindgen_add_to_stack_pointer(16)}}applyAndReturnPatches(e,t){try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_applyAndReturnPatches(o,this.__wbg_ptr,_(e),_(t));var n=A()[o/4+0],a=A()[o/4+1];if(A()[o/4+2])throw s(a);return s(n)}finally{r.__wbindgen_add_to_stack_pointer(16)}}diffIncremental(){try{const n=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_diffIncremental(n,this.__wbg_ptr);var e=A()[n/4+0],t=A()[n/4+1];if(A()[n/4+2])throw s(t);return s(e)}finally{r.__wbindgen_add_to_stack_pointer(16)}}updateDiffCursor(){r.automerge_updateDiffCursor(this.__wbg_ptr)}resetDiffCursor(){r.automerge_resetDiffCursor(this.__wbg_ptr)}diff(e,t){try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_diff(o,this.__wbg_ptr,_(e),_(t));var n=A()[o/4+0],a=A()[o/4+1];if(A()[o/4+2])throw s(a);return s(n)}finally{r.__wbindgen_add_to_stack_pointer(16)}}isolate(e){try{const n=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_isolate(n,this.__wbg_ptr,_(e));var t=A()[n/4+0];if(A()[n/4+1])throw s(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}integrate(){r.automerge_integrate(this.__wbg_ptr)}length(e,t){try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_length(o,this.__wbg_ptr,_(e),g(t)?0:_(t));var n=v()[o/8+0],a=A()[o/4+2];if(A()[o/4+3])throw s(a);return n}finally{r.__wbindgen_add_to_stack_pointer(16)}}delete(e,t){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_delete(a,this.__wbg_ptr,_(e),_(t));var n=A()[a/4+0];if(A()[a/4+1])throw s(n)}finally{r.__wbindgen_add_to_stack_pointer(16)}}save(){return s(r.automerge_save(this.__wbg_ptr))}saveIncremental(){return s(r.automerge_saveIncremental(this.__wbg_ptr))}saveSince(e){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_saveSince(a,this.__wbg_ptr,_(e));var t=A()[a/4+0],n=A()[a/4+1];if(A()[a/4+2])throw s(n);return s(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}saveNoCompress(){return s(r.automerge_saveNoCompress(this.__wbg_ptr))}saveAndVerify(){try{const n=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_saveAndVerify(n,this.__wbg_ptr);var e=A()[n/4+0],t=A()[n/4+1];if(A()[n/4+2])throw s(t);return s(e)}finally{r.__wbindgen_add_to_stack_pointer(16)}}loadIncremental(e){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_loadIncremental(a,this.__wbg_ptr,_(e));var t=v()[a/8+0],n=A()[a/4+2];if(A()[a/4+3])throw s(n);return t}finally{r.__wbindgen_add_to_stack_pointer(16)}}applyChanges(e){try{const n=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_applyChanges(n,this.__wbg_ptr,_(e));var t=A()[n/4+0];if(A()[n/4+1])throw s(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}getChanges(e){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_getChanges(a,this.__wbg_ptr,_(e));var t=A()[a/4+0],n=A()[a/4+1];if(A()[a/4+2])throw s(n);return s(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}getChangeByHash(e){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_getChangeByHash(a,this.__wbg_ptr,_(e));var t=A()[a/4+0],n=A()[a/4+1];if(A()[a/4+2])throw s(n);return s(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}getDecodedChangeByHash(e){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_getDecodedChangeByHash(a,this.__wbg_ptr,_(e));var t=A()[a/4+0],n=A()[a/4+1];if(A()[a/4+2])throw s(n);return s(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}getChangesAdded(e){return k(e,j),s(r.automerge_getChangesAdded(this.__wbg_ptr,e.__wbg_ptr))}getHeads(){return s(r.automerge_getHeads(this.__wbg_ptr))}getActorId(){let e,t;try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_getActorId(o,this.__wbg_ptr);var n=A()[o/4+0],a=A()[o/4+1];return e=n,t=a,y(n,a)}finally{r.__wbindgen_add_to_stack_pointer(16),r.__wbindgen_free(e,t,1)}}getLastLocalChange(){return s(r.automerge_getLastLocalChange(this.__wbg_ptr))}dump(){r.automerge_dump(this.__wbg_ptr)}getMissingDeps(e){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_getMissingDeps(a,this.__wbg_ptr,g(e)?0:_(e));var t=A()[a/4+0],n=A()[a/4+1];if(A()[a/4+2])throw s(n);return s(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}receiveSyncMessage(e,t){try{const a=r.__wbindgen_add_to_stack_pointer(-16);k(e,U),r.automerge_receiveSyncMessage(a,this.__wbg_ptr,e.__wbg_ptr,_(t));var n=A()[a/4+0];if(A()[a/4+1])throw s(n)}finally{r.__wbindgen_add_to_stack_pointer(16)}}generateSyncMessage(e){return k(e,U),s(r.automerge_generateSyncMessage(this.__wbg_ptr,e.__wbg_ptr))}toJS(e){try{const a=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_toJS(a,this.__wbg_ptr,_(e));var t=A()[a/4+0],n=A()[a/4+1];if(A()[a/4+2])throw s(n);return s(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}materialize(e,t,n){try{const i=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_materialize(i,this.__wbg_ptr,_(e),g(t)?0:_(t),_(n));var a=A()[i/4+0],o=A()[i/4+1];if(A()[i/4+2])throw s(o);return s(a)}finally{r.__wbindgen_add_to_stack_pointer(16)}}getCursor(e,t,n){let a,o;try{const p=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_getCursor(p,this.__wbg_ptr,_(e),t,g(n)?0:_(n));var i=A()[p/4+0],l=A()[p/4+1],c=A()[p/4+2],u=A()[p/4+3],d=i,f=l;if(u)throw d=0,f=0,s(c);return a=d,o=f,y(d,f)}finally{r.__wbindgen_add_to_stack_pointer(16),r.__wbindgen_free(a,o,1)}}getCursorPosition(e,t,n){try{const i=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_getCursorPosition(i,this.__wbg_ptr,_(e),_(t),g(n)?0:_(n));var a=v()[i/8+0],o=A()[i/4+2];if(A()[i/4+3])throw s(o);return a}finally{r.__wbindgen_add_to_stack_pointer(16)}}emptyChange(e,t){var n=g(e)?0:h(e,r.__wbindgen_malloc,r.__wbindgen_realloc),a=c;return s(r.automerge_emptyChange(this.__wbg_ptr,n,a,!g(t),g(t)?0:t))}mark(e,t,n,a,o){try{const l=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_mark(l,this.__wbg_ptr,_(e),_(t),_(n),_(a),_(o));var i=A()[l/4+0];if(A()[l/4+1])throw s(i)}finally{r.__wbindgen_add_to_stack_pointer(16)}}unmark(e,t,n){try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_unmark(o,this.__wbg_ptr,_(e),_(t),_(n));var a=A()[o/4+0];if(A()[o/4+1])throw s(a)}finally{r.__wbindgen_add_to_stack_pointer(16)}}marks(e,t){try{const o=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_marks(o,this.__wbg_ptr,_(e),g(t)?0:_(t));var n=A()[o/4+0],a=A()[o/4+1];if(A()[o/4+2])throw s(a);return s(n)}finally{r.__wbindgen_add_to_stack_pointer(16)}}marksAt(e,t,n){try{const i=r.__wbindgen_add_to_stack_pointer(-16);r.automerge_marksAt(i,this.__wbg_ptr,_(e),t,g(n)?0:_(n));var a=A()[i/4+0],o=A()[i/4+1];if(A()[i/4+2])throw s(o);return s(a)}finally{r.__wbindgen_add_to_stack_pointer(16)}}hasOurChanges(e){return k(e,U),s(r.automerge_hasOurChanges(this.__wbg_ptr,e.__wbg_ptr))}topoHistoryTraversal(){return s(r.automerge_topoHistoryTraversal(this.__wbg_ptr))}stats(){return s(r.automerge_stats(this.__wbg_ptr))}}const F="undefined"==typeof FinalizationRegistry?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry((e=>r.__wbg_syncstate_free(e>>>0)));class U{static __wrap(e){e>>>=0;const t=Object.create(U.prototype);return t.__wbg_ptr=e,F.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,F.unregister(this),e}free(){const e=this.__destroy_into_raw();r.__wbg_syncstate_free(e)}get sharedHeads(){return s(r.syncstate_sharedHeads(this.__wbg_ptr))}get lastSentHeads(){return s(r.syncstate_lastSentHeads(this.__wbg_ptr))}set lastSentHeads(e){try{const n=r.__wbindgen_add_to_stack_pointer(-16);r.syncstate_set_lastSentHeads(n,this.__wbg_ptr,_(e));var t=A()[n/4+0];if(A()[n/4+1])throw s(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}set sentHashes(e){try{const n=r.__wbindgen_add_to_stack_pointer(-16);r.syncstate_set_sentHashes(n,this.__wbg_ptr,_(e));var t=A()[n/4+0];if(A()[n/4+1])throw s(t)}finally{r.__wbindgen_add_to_stack_pointer(16)}}clone(){const e=r.syncstate_clone(this.__wbg_ptr);return U.__wrap(e)}}function $(e){s(e)}function H(e,t){const n=i(t),a="string"==typeof n?n:void 0;var o=g(a)?0:h(a,r.__wbindgen_malloc,r.__wbindgen_realloc),l=c;A()[e/4+1]=l,A()[e/4+0]=o}function W(e,t){return _(new Error(y(e,t)))}function V(e,t){return _(y(e,t))}function q(e){return _(e)}function Q(e){return _(i(e))}function G(e,t){const n=i(t),r="number"==typeof n?n:void 0;v()[e/8+1]=g(r)?0:r,A()[e/4+0]=!g(r)}function Y(e){return void 0===i(e)}function K(e){const t=i(e);return"boolean"==typeof t?t?1:0:2}function X(e){return null===i(e)}function Z(e){return"string"==typeof i(e)}function J(e){return"function"==typeof i(e)}function ee(e){const t=i(e);return"object"==typeof t&&null!==t}function te(e){return Array.isArray(i(e))}function ne(e,t){const n=i(t),a=h(JSON.stringify(void 0===n?null:n),r.__wbindgen_malloc,r.__wbindgen_realloc),o=c;A()[e/4+1]=o,A()[e/4+0]=a}function re(){return _(new Error)}function ae(e,t){const n=h(i(t).stack,r.__wbindgen_malloc,r.__wbindgen_realloc),a=c;A()[e/4+1]=a,A()[e/4+0]=n}function oe(e,t){let n,a;try{n=e,a=t,console.error(y(e,t))}finally{r.__wbindgen_free(n,a,1)}}function ie(e,t){return i(e)==i(t)}function le(e,t){const n=h(String(i(t)),r.__wbindgen_malloc,r.__wbindgen_realloc),a=c;A()[e/4+1]=a,A()[e/4+0]=n}function se(e){return _(e)}function ce(e){return _(BigInt.asUintN(64,e))}function ue(e,t,n){i(e)[s(t)]=s(n)}function de(){return D((function(e,t){i(e).getRandomValues(i(t))}),arguments)}function fe(){return D((function(e,t){i(e).randomFillSync(s(t))}),arguments)}function pe(e){return _(i(e).crypto)}function he(e){return _(i(e).process)}function ge(e){return _(i(e).versions)}function me(e){return _(i(e).node)}function Ae(){return D((function(){return _(module.require)}),arguments)}function be(e){return _(i(e).msCrypto)}function ye(e){console.log(i(e))}function _e(e,t){console.log(i(e),i(t))}function we(e,t){return _(i(e)[t>>>0])}function ve(e){return i(e).length}function Ee(){return _(new Array)}function ke(e,t){return _(new Function(y(e,t)))}function Se(e){return _(i(e).next)}function xe(){return D((function(e){return _(i(e).next())}),arguments)}function Ce(e){return i(e).done}function Be(e){return _(i(e).value)}function Oe(){return _(Symbol.iterator)}function Ne(){return D((function(e,t){return _(Reflect.get(i(e),i(t)))}),arguments)}function Pe(){return D((function(e,t){return _(i(e).call(i(t)))}),arguments)}function ze(){return _(new Object)}function Re(e){return i(e).length}function Te(e,t,n){i(e)[t>>>0]=s(n)}function Me(e){return _(Array.from(i(e)))}function De(e){return Array.isArray(i(e))}function Le(e,t){return i(e).push(i(t))}function Ie(e,t){return i(e).unshift(i(t))}function je(e){let t;try{t=i(e)instanceof ArrayBuffer}catch(e){t=!1}return t}function Fe(e,t){return _(new Error(y(e,t)))}function Ue(){return D((function(e,t,n){return _(i(e).call(i(t),i(n)))}),arguments)}function $e(e){let t;try{t=i(e)instanceof Date}catch(e){t=!1}return t}function He(e){return i(e).getTime()}function We(e){return _(new Date(i(e)))}function Ve(e){let t;try{t=i(e)instanceof Object}catch(e){t=!1}return t}function qe(e,t){return _(Object.assign(i(e),i(t)))}function Qe(e,t,n){return _(Object.defineProperty(i(e),i(t),i(n)))}function Ge(e){return _(Object.entries(i(e)))}function Ye(e){return _(Object.freeze(i(e)))}function Ke(e){return _(Object.keys(i(e)))}function Xe(e){return _(Object.values(i(e)))}function Ze(e,t){return _(new RangeError(y(e,t)))}function Je(){return D((function(e,t,n){return _(Reflect.apply(i(e),i(t),i(n)))}),arguments)}function et(){return D((function(e,t){return Reflect.deleteProperty(i(e),i(t))}),arguments)}function tt(){return D((function(e){return _(Reflect.ownKeys(i(e)))}),arguments)}function nt(){return D((function(e,t,n){return Reflect.set(i(e),i(t),i(n))}),arguments)}function rt(e){return _(i(e).buffer)}function at(e,t){return _(i(e).concat(i(t)))}function ot(e,t,n){return _(i(e).slice(t>>>0,n>>>0))}function it(e,t){return _(Symbol.for(y(e,t)))}function lt(e){return _(i(e).toString())}function st(){return D((function(){return _(self.self)}),arguments)}function ct(){return D((function(){return _(window.window)}),arguments)}function ut(){return D((function(){return _(globalThis.globalThis)}),arguments)}function dt(){return D((function(){return _(global.global)}),arguments)}function ft(e,t,n){return _(new Uint8Array(i(e),t>>>0,n>>>0))}function pt(e){return _(new Uint8Array(i(e)))}function ht(e,t,n){i(e).set(i(t),n>>>0)}function gt(e){return i(e).length}function mt(e){let t;try{t=i(e)instanceof Uint8Array}catch(e){t=!1}return t}function At(e){return _(new Uint8Array(e>>>0))}function bt(e,t,n){return _(i(e).subarray(t>>>0,n>>>0))}function yt(e,t){const n=h(E(i(t)),r.__wbindgen_malloc,r.__wbindgen_realloc),a=c;A()[e/4+1]=a,A()[e/4+0]=n}function _t(e,t){throw new Error(y(e,t))}function wt(){return _(r.memory)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},869:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.consumer"),s=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function A(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function b(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}A.prototype.isReactComponent={},A.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},A.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=A.prototype;var _=y.prototype=new b;_.constructor=y,g(_,A.prototype),_.isPureReactComponent=!0;var w=Array.isArray,v={H:null,A:null,T:null,S:null},E=Object.prototype.hasOwnProperty;function k(e,t,r,a,o,i){return r=i.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:i}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var x=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function B(){}function O(e,t,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s,c,u=!1;if(null===e)u=!0;else switch(l){case"bigint":case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0;break;case f:return O((u=e._init)(e._payload),t,a,o,i)}}if(u)return i=i(e),u=""===o?"."+C(e,0):o,w(i)?(a="",null!=u&&(a=u.replace(x,"$&/")+"/"),O(i,t,a,"",(function(e){return e}))):null!=i&&(S(i)&&(s=i,c=a+(null==i.key||e&&e.key===i.key?"":(""+i.key).replace(x,"$&/")+"/")+u,i=k(s.type,c,void 0,0,0,s.props)),t.push(i)),1;u=0;var d,h=""===o?".":o+":";if(w(e))for(var g=0;g<e.length;g++)u+=O(o=e[g],t,a,l=h+C(o,g),i);else if("function"==typeof(g=null===(d=e)||"object"!=typeof d?null:"function"==typeof(d=p&&d[p]||d["@@iterator"])?d:null))for(e=g.call(e),g=0;!(o=e.next()).done;)u+=O(o=o.value,t,a,l=h+C(o,g++),i);else if("object"===l){if("function"==typeof e.then)return O(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(B,B):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,a,o,i);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return u}function N(e,t,n){if(null==e)return e;var r=[],a=0;return O(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function P(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var z="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function R(){}t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=A,t.Fragment=a,t.Profiler=i,t.PureComponent=y,t.StrictMode=o,t.Suspense=u,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=v,t.act=function(){throw Error("act(...) is not supported in production builds of React.")},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=g({},e.props),a=e.key;if(null!=t)for(o in t.ref,void 0!==t.key&&(a=""+t.key),t)!E.call(t,o)||"key"===o||"__self"===o||"__source"===o||"ref"===o&&void 0===t.ref||(r[o]=t[o]);var o=arguments.length-2;if(1===o)r.children=n;else if(1<o){for(var i=Array(o),l=0;l<o;l++)i[l]=arguments[l+2];r.children=i}return k(e.type,a,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:l,_context:e},e},t.createElement=function(e,t,n){var r,a={},o=null;if(null!=t)for(r in void 0!==t.key&&(o=""+t.key),t)E.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(a[r]=t[r]);var i=arguments.length-2;if(1===i)a.children=n;else if(1<i){for(var l=Array(i),s=0;s<i;s++)l[s]=arguments[s+2];a.children=l}if(e&&e.defaultProps)for(r in i=e.defaultProps)void 0===a[r]&&(a[r]=i[r]);return k(e,o,void 0,0,0,a)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=v.T,n={};v.T=n;try{var r=e(),a=v.S;null!==a&&a(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(R,z)}catch(e){z(e)}finally{v.T=t}},t.unstable_useCacheRefresh=function(){return v.H.useCacheRefresh()},t.use=function(e){return v.H.use(e)},t.useActionState=function(e,t,n){return v.H.useActionState(e,t,n)},t.useCallback=function(e,t){return v.H.useCallback(e,t)},t.useContext=function(e){return v.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return v.H.useDeferredValue(e,t)},t.useEffect=function(e,t){return v.H.useEffect(e,t)},t.useId=function(){return v.H.useId()},t.useImperativeHandle=function(e,t,n){return v.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return v.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return v.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return v.H.useMemo(e,t)},t.useOptimistic=function(e,t){return v.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return v.H.useReducer(e,t,n)},t.useRef=function(e){return v.H.useRef(e)},t.useState=function(e){return v.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return v.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return v.H.useTransition()},t.version="19.0.0"},879:(e,t,n)=>{n.a(e,(async(e,t)=>{try{var r=n(540),a=(n(647),n(338)),o=n(976),i=n(566),l=n(78),s=n(61),c=e([i,l]);[i,l]=c.then?(await c)():c,(0,s.L)();const u=`${"https:"===window.location.protocol?"wss:":"ws:"}//${window.location.host}/sync`;(0,l.sW)({url:u,onSync:e=>console.log(`Document ${e} synced`),onError:e=>console.error("Sync error:",e)});const d=document.getElementById("root");if(!d)throw new Error("Failed to find the root element");(0,a.createRoot)(d).render(r.createElement(r.StrictMode,null,r.createElement(o.Kd,null,r.createElement(i.A,null)))),t()}catch(e){t(e)}}))},915:(e,t,n)=>{n.d(t,{Zg:()=>k,o8:()=>v,HT:()=>E,AX:()=>O,jz:()=>y,Ts:()=>w,Ze:()=>P,Hh:()=>C,UB:()=>N,UN:()=>B,HO:()=>z});const r={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let a;const o=new Uint8Array(16);function i(){if(!a&&(a="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!a))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return a(o)}const l=[];for(let e=0;e<256;++e)l.push((e+256).toString(16).slice(1));const s=function(e,t,n){if(r.randomUUID&&!t&&!e)return r.randomUUID();const a=(e=e||{}).random||(e.rng||i)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=a[e];return t}return function(e,t=0){return l[e[t+0]]+l[e[t+1]]+l[e[t+2]]+l[e[t+3]]+"-"+l[e[t+4]]+l[e[t+5]]+"-"+l[e[t+6]]+l[e[t+7]]+"-"+l[e[t+8]]+l[e[t+9]]+"-"+l[e[t+10]]+l[e[t+11]]+l[e[t+12]]+l[e[t+13]]+l[e[t+14]]+l[e[t+15]]}(a)};function c(){return s().replace(/-/g,"")}let u=c;const d=()=>u();d.setFactory=e=>{u=e},d.reset=()=>{u=c};var f=n(479),p=(n(298),n(651)),h=n(592),g=n(175),m=n(245),A=n(595),b=(n(740),function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n});function y(e){return(0,A.rC)(e).handle}function _(e){return"object"==typeof e?e:{actor:e}}function w(e){const t=_(e),n=!!t.freeze,r=t.patchCallback,a=!t.enableTextV2,o=t.actor,i=g.$v.create({actor:o,text_v1:a});i.enableFreeze(!!t.freeze);const l=t.enableTextV2||!1;return R(i,l),i.materialize("/",void 0,{handle:i,heads:void 0,freeze:n,patchCallback:r,textV2:l})}function v(e,t){const n=(0,A.rC)(e),r=n.heads,a=_(t),o=n.handle.fork(a.actor,r);o.updateDiffCursor();const{heads:i}=n,l=b(n,["heads"]);return l.patchCallback=a.patchCallback,o.applyPatches(e,Object.assign(Object.assign({},l),{handle:o}))}function E(e,t){return x(w(t),"from",{},(t=>Object.assign(t,e))).newDoc}function k(e,t,n){if("function"==typeof t)return x(e,"change",{},t).newDoc;if("function"==typeof n)return"string"==typeof t&&(t={message:t}),x(e,"change",t,n).newDoc;throw RangeError("Invalid args for change")}function S(e,t,n,r){if(null==n)return e;const a=(0,A.rC)(e),o=Object.assign(Object.assign({},a),{heads:void 0}),{value:i,patches:l}=a.handle.applyAndReturnPatches(e,o);if(l.length>0){null!=r&&r(l,{before:e,after:i,source:t});const n=(0,A.rC)(i);n.mostRecentPatch={before:(0,A.rC)(e).heads,after:n.handle.getHeads(),patches:l}}return a.heads=n,i}function x(e,t,n,r,a){if("function"!=typeof r)throw new RangeError("invalid change function");const o=(0,A.rC)(e);if(void 0===e||void 0===o)throw new RangeError("must be the document root");if(o.heads)throw new RangeError("Attempting to change an outdated document.  Use Automerge.clone() if you wish to make a writable copy.");if((0,A.hY)(e))throw new RangeError("Calls to Automerge.change cannot be nested");let i=o.handle.getHeads();a&&function(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(a,i)&&(a=void 0),a&&(o.handle.isolate(a),i=a),"time"in n||(n.time=Math.floor(Date.now()/1e3));try{if(o.heads=i,r((0,f.jm)(o.handle,o.textV2)),0===o.handle.pendingOps())return o.heads=void 0,a&&o.handle.integrate(),{newDoc:e,newHeads:null};{const r=o.handle.commit(n.message,n.time);return o.handle.integrate(),{newDoc:S(e,t,i,n.patchCallback||o.patchCallback),newHeads:null!=r?[r]:null}}}catch(e){throw o.heads=void 0,o.handle.rollback(),e}}function C(e,t){const n=_(t),r=n.actor,a=n.patchCallback,o=!n.enableTextV2,i=n.unchecked||!1,l=n.allowMissingChanges||!1,s=n.convertRawStringsToText||!1,c=g.$v.load(e,{text_v1:o,actor:r,unchecked:i,allowMissingDeps:l,convertRawStringsToText:s});c.enableFreeze(!!n.freeze);const u=n.enableTextV2||!1;return R(c,u),c.materialize("/",void 0,{handle:c,heads:void 0,patchCallback:a,textV2:u})}function B(e){return(0,A.rC)(e).handle.save()}function O(e,t){const n=(0,A.rC)(e),r=g.$v.importSyncState(t),a=n.handle.generateSyncMessage(r);return[g.$v.exportSyncState(r),a]}function N(e,t,n,r){const a=g.$v.importSyncState(t);r||(r={});const o=(0,A.rC)(e);if(o.heads)throw new RangeError("Attempting to change an outdated document.  Use Automerge.clone() if you wish to make a writable copy.");if((0,A.hY)(e))throw new RangeError("Calls to Automerge.change cannot be nested");const i=o.handle.getHeads();o.handle.receiveSyncMessage(a,n);const l=g.$v.exportSyncState(a);return[S(e,"receiveSyncMessage",i,r.patchCallback||o.patchCallback),l,null]}function P(){return g.$v.exportSyncState(g.$v.initSyncState())}function z(e){const t=(0,A.rC)(e),n=t.handle.enableFreeze(!1),r=t.handle.materialize();return t.handle.enableFreeze(n),r}function R(e,t){e.registerDatatype("counter",(e=>new p.ph(e)),(e=>{if(e instanceof p.ph)return e.value})),t?e.registerDatatype("str",(e=>new m.Q(e)),(e=>{if(e instanceof m.Q)return e.val})):e.registerDatatype("text",(e=>new h.E(e)),(e=>{if(e instanceof h.E)return e.join("")}))}Symbol("_syncstate")},941:(e,t,n)=>{n.a(e,(async(e,r)=>{try{n.d(t,{e:()=>l});var a=n(540),o=n(944),i=e([o]);o=(i.then?(await i)():i)[0];const l=()=>{const{lastWatering:e,waterPlant:t,waterers:n,addWaterer:r,getDaysSinceWatering:i}=(0,o.g)(),[l,s]=(0,a.useState)(!1),[c,u]=(0,a.useState)(""),[d,f]=(0,a.useState)("text-amber-800"),[p,h]=(0,a.useState)(!0),g=i();return(0,a.useEffect)((()=>{const e=setTimeout((()=>{h(!1)}),1500);return()=>clearTimeout(e)}),[]),(0,a.useEffect)((()=>{f(g>=4?"text-red-600":g>=3.5?"text-red-400":"text-amber-800")}),[g]),a.createElement("div",{className:"flex flex-col items-center justify-center h-full"},a.createElement("div",{className:"text-9xl mb-8 transition-opacity duration-600 cursor-pointer",style:{opacity:p?.5:1},onClick:p?void 0:()=>{l||s(!0)}},"🪴"),p?a.createElement("div",{className:"text-center text-xl font-medium text-amber-800"},a.createElement("p",{className:"flex items-center"},"Remembering",a.createElement("span",{className:"ml-1 animate-pulse"},"."),a.createElement("span",{className:"ml-1 animate-pulse animation-delay-200"},"."),a.createElement("span",{className:"ml-1 animate-pulse animation-delay-400"},"."))):a.createElement("div",{className:`text-center text-xl font-medium ${d} transition-colors duration-500 fade-in`},"Last watered: ",e?g<1?"Today":g<2?"Yesterday":`${Math.floor(g)} days ago`:"Never watered"),l&&a.createElement("div",{className:"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-10"},a.createElement("div",{className:"bg-white rounded-lg p-6 max-w-sm w-full"},a.createElement("h2",{className:"text-xl font-bold mb-4"},"Who's watering the plant?"),n.length>0&&a.createElement("div",{className:"space-y-2 mb-4"},n.map((e=>a.createElement("button",{key:e,className:"block w-full text-left px-4 py-2 rounded hover:bg-gray-100",onClick:()=>(e=>{t(e),s(!1)})(e)},e)))),a.createElement("div",{className:"mt-4 border-t pt-4"},a.createElement("h3",{className:"font-medium mb-2"},"Add a new waterer:"),a.createElement("div",{className:"flex mb-4"},a.createElement("input",{type:"text",value:c,onChange:e=>u(e.target.value),placeholder:"Enter name",className:"flex-1 border rounded-l px-3 py-2"}),a.createElement("button",{onClick:()=>{if(c.trim()){const e=c.trim();r(e),t(e),u(""),s(!1)}},className:"bg-green-600 text-white px-4 py-2 rounded-r",disabled:!c.trim()},"Add & Water"))),a.createElement("button",{className:"mt-2 w-full py-2 bg-gray-200 rounded hover:bg-gray-300",onClick:()=>s(!1)},"Cancel"))))};r()}catch(e){r(e)}}))},944:(e,t,n)=>{n.a(e,(async(e,r)=>{try{n.d(t,{g:()=>l});var a=n(511),o=n(78),i=e([o]);o=(i.then?(await i)():i)[0];const l=(0,a.v)((0,o.OH)(((e,t)=>({lastWatering:null,wateringHistory:[],waterers:[],waterPlant:t=>{const n=Date.now();e((e=>({lastWatering:n,wateringHistory:[{timestamp:n,person:t},...e.wateringHistory]})))},addWaterer:t=>{e((e=>({waterers:[...e.waterers,t]})))},removeWaterer:t=>{e((e=>({waterers:e.waterers.filter((e=>e!==t))})))},deleteWateringEntry:t=>{e((e=>{const n=[...e.wateringHistory];return n.splice(t,1),{wateringHistory:n,lastWatering:n.length>0?n[0].timestamp:null}}))},getDaysSinceWatering:()=>{const{lastWatering:e}=t();return e?(Date.now()-e)/864e5:1/0}})),{docId:"plant-watering-tracker"}));r()}catch(e){r(e)}}))},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},972:(e,t,n)=>{n.d(t,{A:()=>l});var r=n(354),a=n.n(r),o=n(314),i=n.n(o)()(a());i.push([e.id,"*, ::before, ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position:  ;\n  --tw-gradient-via-position:  ;\n  --tw-gradient-to-position:  ;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n  --tw-contain-size:  ;\n  --tw-contain-layout:  ;\n  --tw-contain-paint:  ;\n  --tw-contain-style:  ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position:  ;\n  --tw-gradient-via-position:  ;\n  --tw-gradient-to-position:  ;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n  --tw-contain-size:  ;\n  --tw-contain-layout:  ;\n  --tw-contain-paint:  ;\n  --tw-contain-style:  ;\n}/*\n! tailwindcss v3.4.17 | MIT License | https://tailwindcss.com\n*//*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: #e5e7eb; /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: '';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user's configured `sans` font-family by default.\n5. Use the user's configured `sans` font-feature-settings by default.\n6. Use the user's configured `sans` font-variation-settings by default.\n7. Disable tap highlights on iOS\n*/\n\nhtml,\n:host {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"; /* 4 */\n  font-feature-settings: normal; /* 5 */\n  font-variation-settings: normal; /* 6 */\n  -webkit-tap-highlight-color: transparent; /* 7 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user's configured `mono` font-family by default.\n2. Use the user's configured `mono` font-feature-settings by default.\n3. Use the user's configured `mono` font-variation-settings by default.\n4. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace; /* 1 */\n  font-feature-settings: normal; /* 2 */\n  font-variation-settings: normal; /* 3 */\n  font-size: 1em; /* 4 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-feature-settings: inherit; /* 1 */\n  font-variation-settings: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  font-weight: inherit; /* 1 */\n  line-height: inherit; /* 1 */\n  letter-spacing: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\ninput:where([type='button']),\ninput:where([type='reset']),\ninput:where([type='submit']) {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type='search'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nReset default styling for dialogs.\n*/\ndialog {\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user's configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role=\"button\"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don't get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n[hidden]:where(:not([hidden=\"until-found\"])) {\n  display: none;\n}\n.\\!container {\n  width: 100% !important;\n}\n.container {\n  width: 100%;\n}\n@media (min-width: 640px) {\n\n  .\\!container {\n    max-width: 640px !important;\n  }\n\n  .container {\n    max-width: 640px;\n  }\n}\n@media (min-width: 768px) {\n\n  .\\!container {\n    max-width: 768px !important;\n  }\n\n  .container {\n    max-width: 768px;\n  }\n}\n@media (min-width: 1024px) {\n\n  .\\!container {\n    max-width: 1024px !important;\n  }\n\n  .container {\n    max-width: 1024px;\n  }\n}\n@media (min-width: 1280px) {\n\n  .\\!container {\n    max-width: 1280px !important;\n  }\n\n  .container {\n    max-width: 1280px;\n  }\n}\n@media (min-width: 1536px) {\n\n  .\\!container {\n    max-width: 1536px !important;\n  }\n\n  .container {\n    max-width: 1536px;\n  }\n}\n.visible {\n  visibility: visible;\n}\n.fixed {\n  position: fixed;\n}\n.absolute {\n  position: absolute;\n}\n.relative {\n  position: relative;\n}\n.inset-0 {\n  inset: 0px;\n}\n.right-0 {\n  right: 0px;\n}\n.top-0 {\n  top: 0px;\n}\n.z-10 {\n  z-index: 10;\n}\n.mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n.mb-2 {\n  margin-bottom: 0.5rem;\n}\n.mb-4 {\n  margin-bottom: 1rem;\n}\n.mb-6 {\n  margin-bottom: 1.5rem;\n}\n.mb-8 {\n  margin-bottom: 2rem;\n}\n.ml-1 {\n  margin-left: 0.25rem;\n}\n.ml-2 {\n  margin-left: 0.5rem;\n}\n.mr-1 {\n  margin-right: 0.25rem;\n}\n.mt-2 {\n  margin-top: 0.5rem;\n}\n.mt-4 {\n  margin-top: 1rem;\n}\n.mt-8 {\n  margin-top: 2rem;\n}\n.block {\n  display: block;\n}\n.inline-block {\n  display: inline-block;\n}\n.flex {\n  display: flex;\n}\n.h-6 {\n  height: 1.5rem;\n}\n.h-full {\n  height: 100%;\n}\n.min-h-screen {\n  min-height: 100vh;\n}\n.w-1\\/2 {\n  width: 50%;\n}\n.w-1\\/3 {\n  width: 33.333333%;\n}\n.w-2\\/3 {\n  width: 66.666667%;\n}\n.w-24 {\n  width: 6rem;\n}\n.w-3\\/4 {\n  width: 75%;\n}\n.w-full {\n  width: 100%;\n}\n.max-w-2xl {\n  max-width: 42rem;\n}\n.max-w-md {\n  max-width: 28rem;\n}\n.max-w-sm {\n  max-width: 24rem;\n}\n.flex-1 {\n  flex: 1 1 0%;\n}\n.flex-grow {\n  flex-grow: 1;\n}\n@keyframes pulse {\n\n  50% {\n    opacity: .5;\n  }\n}\n.animate-pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n.cursor-pointer {\n  cursor: pointer;\n}\n.flex-col {\n  flex-direction: column;\n}\n.flex-wrap {\n  flex-wrap: wrap;\n}\n.items-center {\n  align-items: center;\n}\n.justify-center {\n  justify-content: center;\n}\n.justify-between {\n  justify-content: space-between;\n}\n.gap-2 {\n  gap: 0.5rem;\n}\n.space-y-2 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(0.5rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(0.5rem * var(--tw-space-y-reverse));\n}\n.space-y-3 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(0.75rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(0.75rem * var(--tw-space-y-reverse));\n}\n.rounded {\n  border-radius: 0.25rem;\n}\n.rounded-full {\n  border-radius: 9999px;\n}\n.rounded-lg {\n  border-radius: 0.5rem;\n}\n.rounded-md {\n  border-radius: 0.375rem;\n}\n.rounded-l {\n  border-top-left-radius: 0.25rem;\n  border-bottom-left-radius: 0.25rem;\n}\n.rounded-r {\n  border-top-right-radius: 0.25rem;\n  border-bottom-right-radius: 0.25rem;\n}\n.border {\n  border-width: 1px;\n}\n.border-b {\n  border-bottom-width: 1px;\n}\n.border-t {\n  border-top-width: 1px;\n}\n.border-amber-800 {\n  --tw-border-opacity: 1;\n  border-color: rgb(146 64 14 / var(--tw-border-opacity, 1));\n}\n.bg-amber-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(254 243 199 / var(--tw-bg-opacity, 1));\n}\n.bg-amber-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 251 235 / var(--tw-bg-opacity, 1));\n}\n.bg-black {\n  --tw-bg-opacity: 1;\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n}\n.bg-gray-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(243 244 246 / var(--tw-bg-opacity, 1));\n}\n.bg-gray-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(229 231 235 / var(--tw-bg-opacity, 1));\n}\n.bg-gray-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(249 250 251 / var(--tw-bg-opacity, 1));\n}\n.bg-green-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(22 163 74 / var(--tw-bg-opacity, 1));\n}\n.bg-red-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n}\n.bg-transparent {\n  background-color: transparent;\n}\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\n}\n.bg-opacity-50 {\n  --tw-bg-opacity: 0.5;\n}\n.p-2 {\n  padding: 0.5rem;\n}\n.p-4 {\n  padding: 1rem;\n}\n.p-6 {\n  padding: 1.5rem;\n}\n.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n.px-3 {\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n.px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n.px-6 {\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n}\n.py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n.py-4 {\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n}\n.pb-2 {\n  padding-bottom: 0.5rem;\n}\n.pt-4 {\n  padding-top: 1rem;\n}\n.text-left {\n  text-align: left;\n}\n.text-center {\n  text-align: center;\n}\n.text-2xl {\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\n.text-3xl {\n  font-size: 1.875rem;\n  line-height: 2.25rem;\n}\n.text-9xl {\n  font-size: 8rem;\n  line-height: 1;\n}\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.text-xl {\n  font-size: 1.25rem;\n  line-height: 1.75rem;\n}\n.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n.font-bold {\n  font-weight: 700;\n}\n.font-medium {\n  font-weight: 500;\n}\n.font-semibold {\n  font-weight: 600;\n}\n.text-amber-800 {\n  --tw-text-opacity: 1;\n  color: rgb(146 64 14 / var(--tw-text-opacity, 1));\n}\n.text-gray-600 {\n  --tw-text-opacity: 1;\n  color: rgb(75 85 99 / var(--tw-text-opacity, 1));\n}\n.text-gray-900 {\n  --tw-text-opacity: 1;\n  color: rgb(17 24 39 / var(--tw-text-opacity, 1));\n}\n.text-green-600 {\n  --tw-text-opacity: 1;\n  color: rgb(22 163 74 / var(--tw-text-opacity, 1));\n}\n.text-red-400 {\n  --tw-text-opacity: 1;\n  color: rgb(248 113 113 / var(--tw-text-opacity, 1));\n}\n.text-red-500 {\n  --tw-text-opacity: 1;\n  color: rgb(239 68 68 / var(--tw-text-opacity, 1));\n}\n.text-red-600 {\n  --tw-text-opacity: 1;\n  color: rgb(220 38 38 / var(--tw-text-opacity, 1));\n}\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\n}\n.shadow-md {\n  --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.shadow-sm {\n  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.filter {\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n.transition-colors {\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.transition-opacity {\n  transition-property: opacity;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.duration-500 {\n  transition-duration: 500ms;\n}\n.animation-delay-200 {\n    animation-delay: 200ms;\n  }\n.animation-delay-400 {\n    animation-delay: 400ms;\n  }\n.fade-in {\n    opacity: 0;\n    animation: fadeIn 0.6s ease-in-out forwards;\n  }\n@keyframes fadeIn {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n@keyframes fadeOut {\n    from {\n      opacity: 1;\n    }\n    to {\n      opacity: 0;\n    }\n  }\n.hover\\:bg-gray-100:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(243 244 246 / var(--tw-bg-opacity, 1));\n}\n.hover\\:bg-gray-300:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(209 213 219 / var(--tw-bg-opacity, 1));\n}\n.hover\\:text-amber-600:hover {\n  --tw-text-opacity: 1;\n  color: rgb(217 119 6 / var(--tw-text-opacity, 1));\n}\n.hover\\:text-amber-950:hover {\n  --tw-text-opacity: 1;\n  color: rgb(69 26 3 / var(--tw-text-opacity, 1));\n}\n.hover\\:text-green-800:hover {\n  --tw-text-opacity: 1;\n  color: rgb(22 101 52 / var(--tw-text-opacity, 1));\n}\n.hover\\:text-red-700:hover {\n  --tw-text-opacity: 1;\n  color: rgb(185 28 28 / var(--tw-text-opacity, 1));\n}\n.focus\\:outline-none:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n@media (min-width: 768px) {\n\n  .md\\:p-6 {\n    padding: 1.5rem;\n  }\n}\n@media (min-width: 1024px) {\n\n  .lg\\:p-8 {\n    padding: 2rem;\n  }\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EAAA,wBAAc;EAAd,wBAAc;EAAd,mBAAc;EAAd,mBAAc;EAAd,cAAc;EAAd,cAAc;EAAd,cAAc;EAAd,eAAc;EAAd,eAAc;EAAd,aAAc;EAAd,aAAc;EAAd,kBAAc;EAAd,sCAAc;EAAd,8BAAc;EAAd,6BAAc;EAAd,4BAAc;EAAd,eAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,sCAAc;EAAd,kCAAc;EAAd,2BAAc;EAAd,sBAAc;EAAd,8BAAc;EAAd,YAAc;EAAd,kBAAc;EAAd,gBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,cAAc;EAAd,gBAAc;EAAd,aAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,2BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,yBAAc;EAAd,sBAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,qBAAc;EAAd;AAAc;;AAAd;EAAA,wBAAc;EAAd,wBAAc;EAAd,mBAAc;EAAd,mBAAc;EAAd,cAAc;EAAd,cAAc;EAAd,cAAc;EAAd,eAAc;EAAd,eAAc;EAAd,aAAc;EAAd,aAAc;EAAd,kBAAc;EAAd,sCAAc;EAAd,8BAAc;EAAd,6BAAc;EAAd,4BAAc;EAAd,eAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,sCAAc;EAAd,kCAAc;EAAd,2BAAc;EAAd,sBAAc;EAAd,8BAAc;EAAd,YAAc;EAAd,kBAAc;EAAd,gBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,cAAc;EAAd,gBAAc;EAAd,aAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,2BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,yBAAc;EAAd,sBAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,qBAAc;EAAd;AAAc,CAAd;;CAAc,CAAd;;;CAAc;;AAAd;;;EAAA,sBAAc,EAAd,MAAc;EAAd,eAAc,EAAd,MAAc;EAAd,mBAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;AAAA;;AAAd;;EAAA,gBAAc;AAAA;;AAAd;;;;;;;;CAAc;;AAAd;;EAAA,gBAAc,EAAd,MAAc;EAAd,8BAAc,EAAd,MAAc;EAAd,gBAAc,EAAd,MAAc;EAAd,cAAc;KAAd,WAAc,EAAd,MAAc;EAAd,+HAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;EAAd,+BAAc,EAAd,MAAc;EAAd,wCAAc,EAAd,MAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,SAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;AAAA;;AAAd;;;;CAAc;;AAAd;EAAA,SAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,yCAAc;UAAd,iCAAc;AAAA;;AAAd;;CAAc;;AAAd;;;;;;EAAA,kBAAc;EAAd,oBAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,cAAc;EAAd,wBAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,mBAAc;AAAA;;AAAd;;;;;CAAc;;AAAd;;;;EAAA,+GAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;EAAd,+BAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,cAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,cAAc;EAAd,cAAc;EAAd,kBAAc;EAAd,wBAAc;AAAA;;AAAd;EAAA,eAAc;AAAA;;AAAd;EAAA,WAAc;AAAA;;AAAd;;;;CAAc;;AAAd;EAAA,cAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;EAAd,yBAAc,EAAd,MAAc;AAAA;;AAAd;;;;CAAc;;AAAd;;;;;EAAA,oBAAc,EAAd,MAAc;EAAd,8BAAc,EAAd,MAAc;EAAd,gCAAc,EAAd,MAAc;EAAd,eAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;EAAd,uBAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;EAAd,SAAc,EAAd,MAAc;EAAd,UAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,oBAAc;AAAA;;AAAd;;;CAAc;;AAAd;;;;EAAA,0BAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;EAAd,sBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,aAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,gBAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,wBAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,YAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,6BAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,wBAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,0BAAc,EAAd,MAAc;EAAd,aAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,kBAAc;AAAA;;AAAd;;CAAc;;AAAd;;;;;;;;;;;;;EAAA,SAAc;AAAA;;AAAd;EAAA,SAAc;EAAd,UAAc;AAAA;;AAAd;EAAA,UAAc;AAAA;;AAAd;;;EAAA,gBAAc;EAAd,SAAc;EAAd,UAAc;AAAA;;AAAd;;CAAc;AAAd;EAAA,UAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,gBAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,UAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;EAAA,UAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,eAAc;AAAA;;AAAd;;CAAc;AAAd;EAAA,eAAc;AAAA;;AAAd;;;;CAAc;;AAAd;;;;;;;;EAAA,cAAc,EAAd,MAAc;EAAd,sBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,eAAc;EAAd,YAAc;AAAA;;AAAd,wEAAc;AAAd;EAAA,aAAc;AAAA;AACd;EAAA;AAAoB;AAApB;EAAA;AAAoB;AAApB;;EAAA;IAAA;EAAoB;;EAApB;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;;EAApB;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;;EAApB;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;;EAApB;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;;EAApB;IAAA;EAAoB;AAAA;AACpB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,iBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;;EAAA;IAAA;EAAmB;AAAA;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,8DAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,+DAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,+BAAmB;EAAnB;AAAmB;AAAnB;EAAA,gCAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,iBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,iBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,eAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,6EAAmB;EAAnB,iGAAmB;EAAnB;AAAmB;AAAnB;EAAA,0CAAmB;EAAnB,uDAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,+FAAmB;EAAnB,wDAAmB;EAAnB;AAAmB;AAAnB;EAAA,4BAAmB;EAAnB,wDAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAGjB;IACE,sBAAsB;EACxB;AACA;IACE,sBAAsB;EACxB;AAEA;IACE,UAAU;IACV,2CAA2C;EAC7C;AAEA;IACE;MACE,UAAU;IACZ;IACA;MACE,UAAU;IACZ;EACF;AAOA;IACE;MACE,UAAU;IACZ;IACA;MACE,UAAU;IACZ;EACF;AAtCF;EAAA,kBAwCA;EAxCA;AAwCA;AAxCA;EAAA,kBAwCA;EAxCA;AAwCA;AAxCA;EAAA,oBAwCA;EAxCA;AAwCA;AAxCA;EAAA,oBAwCA;EAxCA;AAwCA;AAxCA;EAAA,oBAwCA;EAxCA;AAwCA;AAxCA;EAAA,oBAwCA;EAxCA;AAwCA;AAxCA;EAAA,8BAwCA;EAxCA;AAwCA;AAxCA;;EAAA;IAAA;EAwCA;AAAA;AAxCA;;EAAA;IAAA;EAwCA;AAAA",sourcesContent:["@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer utilities {\n  .animation-delay-200 {\n    animation-delay: 200ms;\n  }\n  .animation-delay-400 {\n    animation-delay: 400ms;\n  }\n  \n  .fade-in {\n    opacity: 0;\n    animation: fadeIn 0.6s ease-in-out forwards;\n  }\n  \n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n  \n  .fade-out {\n    opacity: 1;\n    animation: fadeOut 0.6s ease-in-out forwards;\n  }\n  \n  @keyframes fadeOut {\n    from {\n      opacity: 1;\n    }\n    to {\n      opacity: 0;\n    }\n  }\n}\n"],sourceRoot:""}]);const l=i},976:(e,t,n)=>{var r,a;n.d(t,{Kd:()=>f,N_:()=>g});var o=n(540),i=n(961),l=n(767),s=n(588);function c(){return c=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c.apply(this,arguments)}new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const u=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","viewTransition"];try{window.__reactRouterVersion="6"}catch(e){}new Map;const d=(r||(r=n.t(o,2))).startTransition;function f(e){let{basename:t,children:n,future:r,window:a}=e,i=o.useRef();null==i.current&&(i.current=(0,s.zR)({window:a,v5Compat:!0}));let c=i.current,[u,f]=o.useState({action:c.action,location:c.location}),{v7_startTransition:p}=r||{},h=o.useCallback((e=>{p&&d?d((()=>f(e))):f(e)}),[f,p]);return o.useLayoutEffect((()=>c.listen(h)),[c,h]),o.useEffect((()=>(0,l.V8)(r)),[r]),o.createElement(l.Ix,{basename:t,children:n,location:u.location,navigationType:u.action,navigator:c,future:r})}(a||(a=n.t(i,2))).flushSync,(r||(r=n.t(o,2))).useId;const p="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,h=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,g=o.forwardRef((function(e,t){let n,{onClick:r,relative:a,reloadDocument:i,replace:d,state:f,target:g,to:m,preventScrollReset:A,viewTransition:b}=e,y=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,u),{basename:_}=o.useContext(l.jb),w=!1;if("string"==typeof m&&h.test(m)&&(n=m,p))try{let e=new URL(window.location.href),t=m.startsWith("//")?new URL(e.protocol+m):new URL(m),n=(0,s.pb)(t.pathname,_);t.origin===e.origin&&null!=n?m=n+t.search+t.hash:w=!0}catch(e){}let v=(0,l.$P)(m,{relative:a}),E=function(e,t){let{target:n,replace:r,state:a,preventScrollReset:i,relative:c,viewTransition:u}=void 0===t?{}:t,d=(0,l.Zp)(),f=(0,l.zy)(),p=(0,l.x$)(e,{relative:c});return o.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,n)){t.preventDefault();let n=void 0!==r?r:(0,s.AO)(f)===(0,s.AO)(p);d(e,{replace:n,state:a,preventScrollReset:i,relative:c,viewTransition:u})}}),[f,d,p,r,a,n,e,i,c,u])}(m,{replace:d,state:f,target:g,preventScrollReset:A,relative:a,viewTransition:b});return o.createElement("a",c({},y,{href:n||v,onClick:w||i?r:function(e){r&&r(e),e.defaultPrevented||E(e)},ref:t,target:g}))}));var m,A;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(m||(m={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(A||(A={}))},982:(e,t,n)=>{e.exports=n(477)}},l={};function s(e){var t=l[e];if(void 0!==t)return t.exports;var n=l[e]={id:e,exports:{}};return i[e](n,n.exports,s),n.exports}e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",r=e=>{e&&e.d<1&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},s.a=(a,o,i)=>{var l;i&&((l=[]).d=-1);var s,c,u,d=new Set,f=a.exports,p=new Promise(((e,t)=>{u=t,c=e}));p[t]=f,p[e]=e=>(l&&e(l),d.forEach(e),p.catch((e=>{}))),a.exports=p,o((a=>{var o;s=(a=>a.map((a=>{if(null!==a&&"object"==typeof a){if(a[e])return a;if(a.then){var o=[];o.d=0,a.then((e=>{i[t]=e,r(o)}),(e=>{i[n]=e,r(o)}));var i={};return i[e]=e=>e(o),i}}var l={};return l[e]=e=>{},l[t]=a,l})))(a);var i=()=>s.map((e=>{if(e[n])throw e[n];return e[t]})),c=new Promise((t=>{(o=()=>t(i)).r=0;var n=e=>e!==l&&!d.has(e)&&(d.add(e),e&&!e.d&&(o.r++,e.push(o)));s.map((t=>t[e](n)))}));return o.r?c:i()}),(e=>(e?u(p[n]=e):c(f),r(l)))),l&&l.d<0&&(l.d=0)},s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},o=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if("object"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&"function"==typeof e.then)return e}var n=Object.create(null);s.r(n);var r={};a=a||[null,o({}),o([]),o(o)];for(var i=2&t&&e;"object"==typeof i&&!~a.indexOf(i);i=o(i))Object.getOwnPropertyNames(i).forEach((t=>r[t]=()=>e[t]));return r.default=()=>e,s.d(n,r),n},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.v=(e,t,n,r)=>{var a=fetch(s.p+""+n+".module.wasm"),o=()=>a.then((e=>e.arrayBuffer())).then((e=>WebAssembly.instantiate(e,r))).then((t=>Object.assign(e,t.instance.exports)));return a.then((t=>"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(t,r).then((t=>Object.assign(e,t.instance.exports)),(e=>{if("application/wasm"!==t.headers.get("Content-Type"))return console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",e),o();throw e})):o()))},s.p="/",s.nc=void 0,s(879)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,