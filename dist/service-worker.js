(()=>{"use strict";const t=self,e=([{'revision':null,'url':'/4bc69c9fa1b4f2712454.module.wasm'},{'revision':'6eeff4bc3368b231c534505d5c6d44ed','url':'/bundle.js'},{'revision':'1aef9e0d481a6908c30509eb88500877','url':'/bundle.js.LICENSE.txt'},{'revision':'bc9080d40b457875fac05736ad51f22f','url':'/icons/icon-192x192.png'},{'revision':'882b982e1778dd6cd5943f168d443b67','url':'/icons/icon-512x512.png'},{'revision':'87f298e2267bd8dd7cdbb93bdc1c6fee','url':'/index.html'},{'revision':'e99602433ff77cb6cd963669b8dbedfc','url':'/manifest.json'},{'revision':'a8ce3acb255002ce3e15d64d63dbb8e7','url':'/offline.html'},{'revision':'6943cf9aa5859562c17cc96492d99dcf','url':'/sw-cleanup.js'}],"tonk-app-v1"),s=[".html",".css",".js",".json",".png",".jpg",".jpeg",".svg",".ico",".woff",".woff2",".ttf",".mp3",".wav",".ogg",".m4a",".wasm"];t.addEventListener("install",(s=>{s.waitUntil(caches.open(e).then((t=>t.addAll(["/","/index.html","/offline.html","/manifest.json","/favicon.ico","/bundle.js","/icons/icon-192x192.png","/icons/icon-512x512.png","/4bc69c9fa1b4f2712454.module.wasm"])))),t.skipWaiting()})),t.addEventListener("activate",(s=>{s.waitUntil(caches.keys().then((t=>Promise.all(t.filter((t=>t!==e)).map((t=>caches.delete(t))))))),t.clients.claim()})),t.addEventListener("fetch",(t=>{t.respondWith((async()=>{const n=await caches.match(t.request);if(n)return t.request.url.endsWith(".wasm")?new Response(n.body,{headers:{"Content-Type":"application/wasm",...n.headers},status:n.status,statusText:n.statusText}):n;try{const n=await fetch(t.request);if(n.ok){const a=new URL(t.request.url);if(s.some((t=>a.pathname.endsWith(t)))){const s=n.clone();caches.open(e).then((e=>{e.put(t.request,s)}))}}return n}catch(e){const n=new URL(t.request.url),a=n.pathname,i=a.substring(1+a.lastIndexOf("/")).split(/\#|\?/g)[0];if(n.origin===location.origin&&!s.some((t=>i.endsWith(t)))){const t=await caches.match("/");if(t)return t;const e=await caches.match("/offline.html");if(e)return e}throw e}})())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS13b3JrZXIuanMiLCJtYXBwaW5ncyI6Im1CQUdBLE1BQU1BLEVBQUtDLEtBTUxDLEdBRmtCRCxLQUFLRSxjQUVWLGVBR2JDLEVBQXVCLENBQzNCLFFBQ0EsT0FDQSxNQUNBLFFBQ0EsT0FDQSxPQUNBLFFBQ0EsT0FDQSxPQUNBLFFBQ0EsU0FDQSxPQUNBLE9BQ0EsT0FDQSxPQUNBLE9BQ0EsU0FJRkosRUFBR0ssaUJBQWlCLFdBQVlDLElBQzlCQSxFQUFNQyxVQUNKQyxPQUFPQyxLQUFLUCxHQUFZUSxNQUFNQyxHQUNyQkEsRUFBTUMsT0FBTyxDQUNsQixJQUNBLGNBQ0EsZ0JBQ0EsaUJBQ0EsZUFDQSxhQUNBLDBCQUNBLDBCQUNBLGtDQUlOWixFQUFHYSxhQUFhLElBSWxCYixFQUFHSyxpQkFBaUIsWUFBYUMsSUFDL0JBLEVBQU1DLFVBQ0pDLE9BQU9NLE9BQU9KLE1BQU1LLEdBQ1hDLFFBQVFDLElBQ2JGLEVBQ0dHLFFBQVFDLEdBQWNBLElBQWNqQixJQUNwQ2tCLEtBQUtELEdBQWNYLE9BQU9hLE9BQU9GLFNBSTFDbkIsRUFBR3NCLFFBQVFDLE9BQU8sSUFHcEJ2QixFQUFHSyxpQkFBaUIsU0FBVUMsSUFDNUJBLEVBQU1rQixZQUNKLFdBQ0UsTUFBTUMsUUFBdUJqQixPQUFPa0IsTUFBTXBCLEVBQU1xQixTQUNoRCxHQUFJRixFQUVGLE9BQUluQixFQUFNcUIsUUFBUUMsSUFBSUMsU0FBUyxTQUV0QixJQUFJQyxTQUFTTCxFQUFlTSxLQUFNLENBQ3ZDQyxRQUFTLENBQ1AsZUFBZ0Isc0JBQ2JQLEVBQWVPLFNBRXBCQyxPQUFRUixFQUFlUSxPQUN2QkMsV0FBWVQsRUFBZVMsYUFHeEJULEVBR1QsSUFDRSxNQUFNVSxRQUFpQkMsTUFBTTlCLEVBQU1xQixTQUduQyxHQUFJUSxFQUFTRSxHQUFJLENBQ2YsTUFBTVQsRUFBTSxJQUFJVSxJQUFJaEMsRUFBTXFCLFFBQVFDLEtBQ2xDLEdBQUl4QixFQUFxQm1DLE1BQU1DLEdBQVFaLEVBQUlhLFNBQVNaLFNBQVNXLEtBQU8sQ0FDbEUsTUFBTUUsRUFBa0JQLEVBQVNRLFFBQ2pDbkMsT0FBT0MsS0FBS1AsR0FBWVEsTUFBTUMsSUFDNUJBLEVBQU1pQyxJQUFJdEMsRUFBTXFCLFFBQVNlLEVBQWdCLEdBRTdDLENBQ0YsQ0FFQSxPQUFPUCxDQUNULENBQUUsTUFBT1UsR0FDUCxNQUFNakIsRUFBTSxJQUFJVSxJQUFJaEMsRUFBTXFCLFFBQVFDLEtBRTVCYSxFQUFXYixFQUFJYSxTQUNmSyxFQUFXTCxFQUNkTSxVQUFVLEVBQUlOLEVBQVNPLFlBQVksTUFDbkNDLE1BQU0sVUFBVSxHQUluQixHQUNFckIsRUFBSXNCLFNBQVdDLFNBQVNELFNBQ3ZCOUMsRUFBcUJtQyxNQUFNQyxHQUFRTSxFQUFTakIsU0FBU1csS0FDdEQsQ0FDQSxNQUFNWSxRQUFvQjVDLE9BQU9rQixNQUFNLEtBQ3ZDLEdBQUkwQixFQUFhLE9BQU9BLEVBR3hCLE1BQU1DLFFBQW9CN0MsT0FBT2tCLE1BQU0saUJBQ3ZDLEdBQUkyQixFQUFhLE9BQU9BLENBQzFCLENBRUEsTUFBTVIsQ0FDUixDQUNELEVBekRELEdBMERELEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby8uL3NyYy9zZXJ2aWNlLXdvcmtlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBsaWI9XCJ3ZWJ3b3JrZXJcIiAvPlxuXG4vLyBUaGlzIHByZXZlbnRzIFR5cGVTY3JpcHQgZXJyb3JzIGluIHNlcnZpY2Ugd29ya2VyIGNvbnRleHRcbmNvbnN0IHN3ID0gc2VsZiBhcyB1bmtub3duIGFzIFNlcnZpY2VXb3JrZXJHbG9iYWxTY29wZTtcblxuLy8gV29ya2JveCBpbmplY3RzIG1hbmlmZXN0IGhlcmVcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IG1hbmlmZXN0RW50cmllcyA9IHNlbGYuX19XQl9NQU5JRkVTVDtcblxuY29uc3QgQ0FDSEVfTkFNRSA9IFwidG9uay1hcHAtdjFcIjtcblxuLy8gRGVmaW5lIGFzc2V0IHR5cGVzIHRvIGNhY2hlIGJ5IGV4dGVuc2lvblxuY29uc3QgQ0FDSEVBQkxFX0VYVEVOU0lPTlMgPSBbXG4gIFwiLmh0bWxcIixcbiAgXCIuY3NzXCIsXG4gIFwiLmpzXCIsXG4gIFwiLmpzb25cIixcbiAgXCIucG5nXCIsXG4gIFwiLmpwZ1wiLFxuICBcIi5qcGVnXCIsXG4gIFwiLnN2Z1wiLFxuICBcIi5pY29cIixcbiAgXCIud29mZlwiLFxuICBcIi53b2ZmMlwiLFxuICBcIi50dGZcIixcbiAgXCIubXAzXCIsXG4gIFwiLndhdlwiLFxuICBcIi5vZ2dcIixcbiAgXCIubTRhXCIsXG4gIFwiLndhc21cIixcbl07XG5cbi8vIEluc3RhbGwgZXZlbnRcbnN3LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnN0YWxsXCIsIChldmVudCkgPT4ge1xuICBldmVudC53YWl0VW50aWwoXG4gICAgY2FjaGVzLm9wZW4oQ0FDSEVfTkFNRSkudGhlbigoY2FjaGUpID0+IHtcbiAgICAgIHJldHVybiBjYWNoZS5hZGRBbGwoW1xuICAgICAgICBcIi9cIixcbiAgICAgICAgXCIvaW5kZXguaHRtbFwiLFxuICAgICAgICBcIi9vZmZsaW5lLmh0bWxcIixcbiAgICAgICAgXCIvbWFuaWZlc3QuanNvblwiLFxuICAgICAgICBcIi9mYXZpY29uLmljb1wiLFxuICAgICAgICBcIi9idW5kbGUuanNcIixcbiAgICAgICAgXCIvaWNvbnMvaWNvbi0xOTJ4MTkyLnBuZ1wiLFxuICAgICAgICBcIi9pY29ucy9pY29uLTUxMng1MTIucG5nXCIsXG4gICAgICAgIFwiLzEyMzQ1Njc4OTBhYmMubW9kdWxlLndhc21cIiwgLy8gd2lsbCBnZXQgcmVwbGFjZWQgd2l0aCBhY3R1YWwgbW9kdWxlIG9uIGJ1aWxkXG4gICAgICBdKTtcbiAgICB9KSxcbiAgKTtcbiAgc3cuc2tpcFdhaXRpbmcoKTtcbn0pO1xuXG4vLyBBY3RpdmF0ZSBldmVudFxuc3cuYWRkRXZlbnRMaXN0ZW5lcihcImFjdGl2YXRlXCIsIChldmVudCkgPT4ge1xuICBldmVudC53YWl0VW50aWwoXG4gICAgY2FjaGVzLmtleXMoKS50aGVuKChjYWNoZU5hbWVzKSA9PiB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICAgIGNhY2hlTmFtZXNcbiAgICAgICAgICAuZmlsdGVyKChjYWNoZU5hbWUpID0+IGNhY2hlTmFtZSAhPT0gQ0FDSEVfTkFNRSlcbiAgICAgICAgICAubWFwKChjYWNoZU5hbWUpID0+IGNhY2hlcy5kZWxldGUoY2FjaGVOYW1lKSksXG4gICAgICApO1xuICAgIH0pLFxuICApO1xuICBzdy5jbGllbnRzLmNsYWltKCk7XG59KTtcblxuc3cuYWRkRXZlbnRMaXN0ZW5lcihcImZldGNoXCIsIChldmVudCkgPT4ge1xuICBldmVudC5yZXNwb25kV2l0aChcbiAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY2FjaGVkUmVzcG9uc2UgPSBhd2FpdCBjYWNoZXMubWF0Y2goZXZlbnQucmVxdWVzdCk7XG4gICAgICBpZiAoY2FjaGVkUmVzcG9uc2UpIHtcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHdhc20gZmlsZSwgZW5zdXJlIGl0IGhhcyB0aGUgY29ycmVjdCBNSU1FIHR5cGVcbiAgICAgICAgaWYgKGV2ZW50LnJlcXVlc3QudXJsLmVuZHNXaXRoKFwiLndhc21cIikpIHtcbiAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgcmVzcG9uc2Ugd2l0aCB0aGUgY29ycmVjdCBNSU1FIHR5cGVcbiAgICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKGNhY2hlZFJlc3BvbnNlLmJvZHksIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi93YXNtXCIsXG4gICAgICAgICAgICAgIC4uLmNhY2hlZFJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdHVzOiBjYWNoZWRSZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICBzdGF0dXNUZXh0OiBjYWNoZWRSZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWNoZWRSZXNwb25zZTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChldmVudC5yZXF1ZXN0KTtcblxuICAgICAgICAvLyBDYWNoZSBzdWNjZXNzZnVsIHJlc3BvbnNlc1xuICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGV2ZW50LnJlcXVlc3QudXJsKTtcbiAgICAgICAgICBpZiAoQ0FDSEVBQkxFX0VYVEVOU0lPTlMuc29tZSgoZXh0KSA9PiB1cmwucGF0aG5hbWUuZW5kc1dpdGgoZXh0KSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlVG9DYWNoZSA9IHJlc3BvbnNlLmNsb25lKCk7XG4gICAgICAgICAgICBjYWNoZXMub3BlbihDQUNIRV9OQU1FKS50aGVuKChjYWNoZSkgPT4ge1xuICAgICAgICAgICAgICBjYWNoZS5wdXQoZXZlbnQucmVxdWVzdCwgcmVzcG9uc2VUb0NhY2hlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGV2ZW50LnJlcXVlc3QudXJsKTtcblxuICAgICAgICBjb25zdCBwYXRobmFtZSA9IHVybC5wYXRobmFtZTtcbiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSBwYXRobmFtZVxuICAgICAgICAgIC5zdWJzdHJpbmcoMSArIHBhdGhuYW1lLmxhc3RJbmRleE9mKFwiL1wiKSlcbiAgICAgICAgICAuc3BsaXQoL1xcI3xcXD8vZylbMF07XG5cbiAgICAgICAgLy8gSWYgd2UncmUgbmF2aWdhdGluZyB0byBhIHBhZ2UgYW5kIG5vdCByZXF1ZXN0aW5nIGEgc3BlY2lmaWMgYXNzZXQgZmlsZSxcbiAgICAgICAgLy8gdHJ5IHRvIHJldHVybiB0aGUgaW5kZXggcGFnZSBmcm9tIGNhY2hlXG4gICAgICAgIGlmIChcbiAgICAgICAgICB1cmwub3JpZ2luID09PSBsb2NhdGlvbi5vcmlnaW4gJiZcbiAgICAgICAgICAhQ0FDSEVBQkxFX0VYVEVOU0lPTlMuc29tZSgoZXh0KSA9PiBmaWxlbmFtZS5lbmRzV2l0aChleHQpKVxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBjYWNoZWRJbmRleCA9IGF3YWl0IGNhY2hlcy5tYXRjaChcIi9cIik7XG4gICAgICAgICAgaWYgKGNhY2hlZEluZGV4KSByZXR1cm4gY2FjaGVkSW5kZXg7XG5cbiAgICAgICAgICAvLyBJZiBpbmRleCBpc24ndCBjYWNoZWQsIHRyeSB0aGUgb2ZmbGluZSBwYWdlXG4gICAgICAgICAgY29uc3Qgb2ZmbGluZVBhZ2UgPSBhd2FpdCBjYWNoZXMubWF0Y2goXCIvb2ZmbGluZS5odG1sXCIpO1xuICAgICAgICAgIGlmIChvZmZsaW5lUGFnZSkgcmV0dXJuIG9mZmxpbmVQYWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH0pKCksXG4gICk7XG59KTtcbiJdLCJuYW1lcyI6WyJzdyIsInNlbGYiLCJDQUNIRV9OQU1FIiwiX19XQl9NQU5JRkVTVCIsIkNBQ0hFQUJMRV9FWFRFTlNJT05TIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50Iiwid2FpdFVudGlsIiwiY2FjaGVzIiwib3BlbiIsInRoZW4iLCJjYWNoZSIsImFkZEFsbCIsInNraXBXYWl0aW5nIiwia2V5cyIsImNhY2hlTmFtZXMiLCJQcm9taXNlIiwiYWxsIiwiZmlsdGVyIiwiY2FjaGVOYW1lIiwibWFwIiwiZGVsZXRlIiwiY2xpZW50cyIsImNsYWltIiwicmVzcG9uZFdpdGgiLCJjYWNoZWRSZXNwb25zZSIsIm1hdGNoIiwicmVxdWVzdCIsInVybCIsImVuZHNXaXRoIiwiUmVzcG9uc2UiLCJib2R5IiwiaGVhZGVycyIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJVUkwiLCJzb21lIiwiZXh0IiwicGF0aG5hbWUiLCJyZXNwb25zZVRvQ2FjaGUiLCJjbG9uZSIsInB1dCIsImVyciIsImZpbGVuYW1lIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJzcGxpdCIsIm9yaWdpbiIsImxvY2F0aW9uIiwiY2FjaGVkSW5kZXgiLCJvZmZsaW5lUGFnZSJdLCJzb3VyY2VSb290IjoiIn0=